// Autogenerated by Thrift Compiler (facebook)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
// @generated

package laser

import (
	"bytes"
	"fmt"
	"sync"

	"github.com/facebook/fbthrift/thrift/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = sync.Mutex{}
var _ = bytes.Equal

var GoUnusedProtection__ int

type Status int64

const (
	Status_OK                              Status = 0
	Status_RS_NOT_FOUND                    Status = 1
	Status_RS_CORRUPTION                   Status = 2
	Status_RS_NOT_SUPPORTED                Status = 3
	Status_RS_INVALID_ARGUMENT             Status = 4
	Status_RS_IO_ERROR                     Status = 5
	Status_RS_MERGE_INPROGRESS             Status = 6
	Status_RS_IN_COMPLETE                  Status = 7
	Status_RS_SHUTDOWN_INPROGRESS          Status = 8
	Status_RS_TIMEDOUT                     Status = 9
	Status_RS_ABORTED                      Status = 10
	Status_RS_BUSY                         Status = 11
	Status_RS_EXPIRED                      Status = 12
	Status_RS_TRYAGAIN                     Status = 13
	Status_RS_COMPACTION_TOO_LARGE         Status = 14
	Status_RS_ERROR                        Status = 15
	Status_RS_EMPTY                        Status = 16
	Status_RS_WRITE_IN_FOLLOWER            Status = 17
	Status_RS_KEY_EXPIRE                   Status = 18
	Status_RS_KEY_EXISTS                   Status = 19
	Status_RS_PART_FAILED                  Status = 20
	Status_RS_TRAFFIC_RESTRICTION          Status = 21
	Status_RS_OPERATION_DENIED             Status = 22
	Status_SERVICE_NOT_EXISTS_PARTITION    Status = 101
	Status_SERVICE_UNION_DATA_TYPE_INVALID Status = 102
	Status_CLIENT_THRIFT_CALL_ERROR        Status = 200
	Status_CLIENT_THRIFT_CALL_NO_SHARD_ID  Status = 201
	Status_CLIENT_UNION_DATA_TYPE_INVALID  Status = 202
	Status_CLIENT_THRIFT_CALL_TIMEOUT      Status = 203
	Status_CLIENT_THRIFT_FUTURE_TIMEOUT    Status = 204
	Status_RP_SOURCE_NOT_FOUND             Status = 301
	Status_RP_ROLE_ERROR                   Status = 302
	Status_RP_SOURCE_READ_ERROR            Status = 303
	Status_RP_SOURCE_DB_REMOVED            Status = 304
	Status_RP_SOURCE_WAL_LOG_REMOVED       Status = 305
	Status_GENERATOR_TABLE_NOT_EXISTS      Status = 401
	Status_GENERATOR_GET_TABLE_LOCK_FAIL   Status = 402
	Status_GENERATOR_TABLE_PROCESSING      Status = 403
	Status_GENERATOR_TABLE_SET_QUEUE_FAIL  Status = 404
	Status_GENERATOR_TABLE_SET_HASH_FAIL   Status = 405
	Status_GENERATOR_TABLE_SET_LOCK_FAIL   Status = 406
	Status_GENERATOR_TABLE_DEL_LOCK_FAIL   Status = 407
	Status_GENERATOR_TABLE_DEL_QUEUE_FAIL  Status = 408
	Status_UNKNOWN_ERROR                   Status = 10000
)

var StatusToName = map[Status]string{
	Status_OK:                              "OK",
	Status_RS_NOT_FOUND:                    "RS_NOT_FOUND",
	Status_RS_CORRUPTION:                   "RS_CORRUPTION",
	Status_RS_NOT_SUPPORTED:                "RS_NOT_SUPPORTED",
	Status_RS_INVALID_ARGUMENT:             "RS_INVALID_ARGUMENT",
	Status_RS_IO_ERROR:                     "RS_IO_ERROR",
	Status_RS_MERGE_INPROGRESS:             "RS_MERGE_INPROGRESS",
	Status_RS_IN_COMPLETE:                  "RS_IN_COMPLETE",
	Status_RS_SHUTDOWN_INPROGRESS:          "RS_SHUTDOWN_INPROGRESS",
	Status_RS_TIMEDOUT:                     "RS_TIMEDOUT",
	Status_RS_ABORTED:                      "RS_ABORTED",
	Status_RS_BUSY:                         "RS_BUSY",
	Status_RS_EXPIRED:                      "RS_EXPIRED",
	Status_RS_TRYAGAIN:                     "RS_TRYAGAIN",
	Status_RS_COMPACTION_TOO_LARGE:         "RS_COMPACTION_TOO_LARGE",
	Status_RS_ERROR:                        "RS_ERROR",
	Status_RS_EMPTY:                        "RS_EMPTY",
	Status_RS_WRITE_IN_FOLLOWER:            "RS_WRITE_IN_FOLLOWER",
	Status_RS_KEY_EXPIRE:                   "RS_KEY_EXPIRE",
	Status_RS_KEY_EXISTS:                   "RS_KEY_EXISTS",
	Status_RS_PART_FAILED:                  "RS_PART_FAILED",
	Status_RS_TRAFFIC_RESTRICTION:          "RS_TRAFFIC_RESTRICTION",
	Status_RS_OPERATION_DENIED:             "RS_OPERATION_DENIED",
	Status_SERVICE_NOT_EXISTS_PARTITION:    "SERVICE_NOT_EXISTS_PARTITION",
	Status_SERVICE_UNION_DATA_TYPE_INVALID: "SERVICE_UNION_DATA_TYPE_INVALID",
	Status_CLIENT_THRIFT_CALL_ERROR:        "CLIENT_THRIFT_CALL_ERROR",
	Status_CLIENT_THRIFT_CALL_NO_SHARD_ID:  "CLIENT_THRIFT_CALL_NO_SHARD_ID",
	Status_CLIENT_UNION_DATA_TYPE_INVALID:  "CLIENT_UNION_DATA_TYPE_INVALID",
	Status_CLIENT_THRIFT_CALL_TIMEOUT:      "CLIENT_THRIFT_CALL_TIMEOUT",
	Status_CLIENT_THRIFT_FUTURE_TIMEOUT:    "CLIENT_THRIFT_FUTURE_TIMEOUT",
	Status_RP_SOURCE_NOT_FOUND:             "RP_SOURCE_NOT_FOUND",
	Status_RP_ROLE_ERROR:                   "RP_ROLE_ERROR",
	Status_RP_SOURCE_READ_ERROR:            "RP_SOURCE_READ_ERROR",
	Status_RP_SOURCE_DB_REMOVED:            "RP_SOURCE_DB_REMOVED",
	Status_RP_SOURCE_WAL_LOG_REMOVED:       "RP_SOURCE_WAL_LOG_REMOVED",
	Status_GENERATOR_TABLE_NOT_EXISTS:      "GENERATOR_TABLE_NOT_EXISTS",
	Status_GENERATOR_GET_TABLE_LOCK_FAIL:   "GENERATOR_GET_TABLE_LOCK_FAIL",
	Status_GENERATOR_TABLE_PROCESSING:      "GENERATOR_TABLE_PROCESSING",
	Status_GENERATOR_TABLE_SET_QUEUE_FAIL:  "GENERATOR_TABLE_SET_QUEUE_FAIL",
	Status_GENERATOR_TABLE_SET_HASH_FAIL:   "GENERATOR_TABLE_SET_HASH_FAIL",
	Status_GENERATOR_TABLE_SET_LOCK_FAIL:   "GENERATOR_TABLE_SET_LOCK_FAIL",
	Status_GENERATOR_TABLE_DEL_LOCK_FAIL:   "GENERATOR_TABLE_DEL_LOCK_FAIL",
	Status_GENERATOR_TABLE_DEL_QUEUE_FAIL:  "GENERATOR_TABLE_DEL_QUEUE_FAIL",
	Status_UNKNOWN_ERROR:                   "UNKNOWN_ERROR",
}

var StatusToValue = map[string]Status{
	"OK":                              Status_OK,
	"RS_NOT_FOUND":                    Status_RS_NOT_FOUND,
	"RS_CORRUPTION":                   Status_RS_CORRUPTION,
	"RS_NOT_SUPPORTED":                Status_RS_NOT_SUPPORTED,
	"RS_INVALID_ARGUMENT":             Status_RS_INVALID_ARGUMENT,
	"RS_IO_ERROR":                     Status_RS_IO_ERROR,
	"RS_MERGE_INPROGRESS":             Status_RS_MERGE_INPROGRESS,
	"RS_IN_COMPLETE":                  Status_RS_IN_COMPLETE,
	"RS_SHUTDOWN_INPROGRESS":          Status_RS_SHUTDOWN_INPROGRESS,
	"RS_TIMEDOUT":                     Status_RS_TIMEDOUT,
	"RS_ABORTED":                      Status_RS_ABORTED,
	"RS_BUSY":                         Status_RS_BUSY,
	"RS_EXPIRED":                      Status_RS_EXPIRED,
	"RS_TRYAGAIN":                     Status_RS_TRYAGAIN,
	"RS_COMPACTION_TOO_LARGE":         Status_RS_COMPACTION_TOO_LARGE,
	"RS_ERROR":                        Status_RS_ERROR,
	"RS_EMPTY":                        Status_RS_EMPTY,
	"RS_WRITE_IN_FOLLOWER":            Status_RS_WRITE_IN_FOLLOWER,
	"RS_KEY_EXPIRE":                   Status_RS_KEY_EXPIRE,
	"RS_KEY_EXISTS":                   Status_RS_KEY_EXISTS,
	"RS_PART_FAILED":                  Status_RS_PART_FAILED,
	"RS_TRAFFIC_RESTRICTION":          Status_RS_TRAFFIC_RESTRICTION,
	"RS_OPERATION_DENIED":             Status_RS_OPERATION_DENIED,
	"SERVICE_NOT_EXISTS_PARTITION":    Status_SERVICE_NOT_EXISTS_PARTITION,
	"SERVICE_UNION_DATA_TYPE_INVALID": Status_SERVICE_UNION_DATA_TYPE_INVALID,
	"CLIENT_THRIFT_CALL_ERROR":        Status_CLIENT_THRIFT_CALL_ERROR,
	"CLIENT_THRIFT_CALL_NO_SHARD_ID":  Status_CLIENT_THRIFT_CALL_NO_SHARD_ID,
	"CLIENT_UNION_DATA_TYPE_INVALID":  Status_CLIENT_UNION_DATA_TYPE_INVALID,
	"CLIENT_THRIFT_CALL_TIMEOUT":      Status_CLIENT_THRIFT_CALL_TIMEOUT,
	"CLIENT_THRIFT_FUTURE_TIMEOUT":    Status_CLIENT_THRIFT_FUTURE_TIMEOUT,
	"RP_SOURCE_NOT_FOUND":             Status_RP_SOURCE_NOT_FOUND,
	"RP_ROLE_ERROR":                   Status_RP_ROLE_ERROR,
	"RP_SOURCE_READ_ERROR":            Status_RP_SOURCE_READ_ERROR,
	"RP_SOURCE_DB_REMOVED":            Status_RP_SOURCE_DB_REMOVED,
	"RP_SOURCE_WAL_LOG_REMOVED":       Status_RP_SOURCE_WAL_LOG_REMOVED,
	"GENERATOR_TABLE_NOT_EXISTS":      Status_GENERATOR_TABLE_NOT_EXISTS,
	"GENERATOR_GET_TABLE_LOCK_FAIL":   Status_GENERATOR_GET_TABLE_LOCK_FAIL,
	"GENERATOR_TABLE_PROCESSING":      Status_GENERATOR_TABLE_PROCESSING,
	"GENERATOR_TABLE_SET_QUEUE_FAIL":  Status_GENERATOR_TABLE_SET_QUEUE_FAIL,
	"GENERATOR_TABLE_SET_HASH_FAIL":   Status_GENERATOR_TABLE_SET_HASH_FAIL,
	"GENERATOR_TABLE_SET_LOCK_FAIL":   Status_GENERATOR_TABLE_SET_LOCK_FAIL,
	"GENERATOR_TABLE_DEL_LOCK_FAIL":   Status_GENERATOR_TABLE_DEL_LOCK_FAIL,
	"GENERATOR_TABLE_DEL_QUEUE_FAIL":  Status_GENERATOR_TABLE_DEL_QUEUE_FAIL,
	"UNKNOWN_ERROR":                   Status_UNKNOWN_ERROR,
}

func (p Status) String() string {
	if v, ok := StatusToName[p]; ok {
		return v
	}
	return "<UNSET>"
}

func StatusFromString(s string) (Status, error) {
	if v, ok := StatusToValue[s]; ok {
		return v, nil
	}
	return Status(0), fmt.Errorf("not a valid Status string")
}

func StatusPtr(v Status) *Status { return &v }

// Attributes:
//  - DatabaseName
//  - TableName
//  - PrimaryKeys
//  - ColumnKeys
type LaserKey struct {
	DatabaseName string   `thrift:"database_name,1,required" db:"database_name" json:"database_name"`
	TableName    string   `thrift:"table_name,2,required" db:"table_name" json:"table_name"`
	PrimaryKeys  []string `thrift:"primary_keys,3,required" db:"primary_keys" json:"primary_keys"`
	ColumnKeys   []string `thrift:"column_keys,4" db:"column_keys" json:"column_keys"`
}

func NewLaserKey() *LaserKey {
	return &LaserKey{}
}

func (p *LaserKey) GetDatabaseName() string {
	return p.DatabaseName
}

func (p *LaserKey) GetTableName() string {
	return p.TableName
}

func (p *LaserKey) GetPrimaryKeys() []string {
	return p.PrimaryKeys
}

func (p *LaserKey) GetColumnKeys() []string {
	return p.ColumnKeys
}
func (p *LaserKey) Read(iprot thrift.Protocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetDatabaseName bool = false
	var issetTableName bool = false
	var issetPrimaryKeys bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
			issetDatabaseName = true
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
			issetTableName = true
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
			issetPrimaryKeys = true
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetDatabaseName {
		return thrift.NewProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field DatabaseName is not set"))
	}
	if !issetTableName {
		return thrift.NewProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field TableName is not set"))
	}
	if !issetPrimaryKeys {
		return thrift.NewProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field PrimaryKeys is not set"))
	}
	return nil
}

func (p *LaserKey) ReadField1(iprot thrift.Protocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.DatabaseName = v
	}
	return nil
}

func (p *LaserKey) ReadField2(iprot thrift.Protocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.TableName = v
	}
	return nil
}

func (p *LaserKey) ReadField3(iprot thrift.Protocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.PrimaryKeys = tSlice
	for i := 0; i < size; i++ {
		var _elem0 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem0 = v
		}
		p.PrimaryKeys = append(p.PrimaryKeys, _elem0)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *LaserKey) ReadField4(iprot thrift.Protocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.ColumnKeys = tSlice
	for i := 0; i < size; i++ {
		var _elem1 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem1 = v
		}
		p.ColumnKeys = append(p.ColumnKeys, _elem1)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *LaserKey) Write(oprot thrift.Protocol) error {
	if err := oprot.WriteStructBegin("LaserKey"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *LaserKey) writeField1(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("database_name", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:database_name: ", p), err)
	}
	if err := oprot.WriteString(string(p.DatabaseName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.database_name (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:database_name: ", p), err)
	}
	return err
}

func (p *LaserKey) writeField2(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("table_name", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:table_name: ", p), err)
	}
	if err := oprot.WriteString(string(p.TableName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.table_name (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:table_name: ", p), err)
	}
	return err
}

func (p *LaserKey) writeField3(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("primary_keys", thrift.LIST, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:primary_keys: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.PrimaryKeys)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.PrimaryKeys {
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:primary_keys: ", p), err)
	}
	return err
}

func (p *LaserKey) writeField4(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("column_keys", thrift.LIST, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:column_keys: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.ColumnKeys)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.ColumnKeys {
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:column_keys: ", p), err)
	}
	return err
}

func (p *LaserKey) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LaserKey(%+v)", *p)
}

// Attributes:
//  - Keys
type LaserKeys struct {
	Keys []*LaserKey `thrift:"keys,1,required" db:"keys" json:"keys"`
}

func NewLaserKeys() *LaserKeys {
	return &LaserKeys{}
}

func (p *LaserKeys) GetKeys() []*LaserKey {
	return p.Keys
}
func (p *LaserKeys) Read(iprot thrift.Protocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetKeys bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
			issetKeys = true
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetKeys {
		return thrift.NewProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Keys is not set"))
	}
	return nil
}

func (p *LaserKeys) ReadField1(iprot thrift.Protocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*LaserKey, 0, size)
	p.Keys = tSlice
	for i := 0; i < size; i++ {
		_elem2 := NewLaserKey()
		if err := _elem2.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem2), err)
		}
		p.Keys = append(p.Keys, _elem2)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *LaserKeys) Write(oprot thrift.Protocol) error {
	if err := oprot.WriteStructBegin("LaserKeys"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *LaserKeys) writeField1(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("keys", thrift.LIST, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:keys: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Keys)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Keys {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:keys: ", p), err)
	}
	return err
}

func (p *LaserKeys) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LaserKeys(%+v)", *p)
}

// Attributes:
//  - Status
//  - StringValue
type EntryValue struct {
	Status      Status `thrift:"status,1,required" db:"status" json:"status"`
	StringValue string `thrift:"string_value,2,required" db:"string_value" json:"string_value"`
}

func NewEntryValue() *EntryValue {
	return &EntryValue{}
}

func (p *EntryValue) GetStatus() Status {
	return p.Status
}

func (p *EntryValue) GetStringValue() string {
	return p.StringValue
}
func (p *EntryValue) Read(iprot thrift.Protocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetStatus bool = false
	var issetStringValue bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
			issetStatus = true
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
			issetStringValue = true
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetStatus {
		return thrift.NewProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Status is not set"))
	}
	if !issetStringValue {
		return thrift.NewProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field StringValue is not set"))
	}
	return nil
}

func (p *EntryValue) ReadField1(iprot thrift.Protocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := Status(v)
		p.Status = temp
	}
	return nil
}

func (p *EntryValue) ReadField2(iprot thrift.Protocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.StringValue = v
	}
	return nil
}

func (p *EntryValue) Write(oprot thrift.Protocol) error {
	if err := oprot.WriteStructBegin("EntryValue"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *EntryValue) writeField1(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("status", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Status)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.status (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err)
	}
	return err
}

func (p *EntryValue) writeField2(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("string_value", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:string_value: ", p), err)
	}
	if err := oprot.WriteString(string(p.StringValue)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.string_value (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:string_value: ", p), err)
	}
	return err
}

func (p *EntryValue) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EntryValue(%+v)", *p)
}

// Attributes:
//  - StringValue
//  - MapValue
//  - NullValue
//  - MemberScoreValue
//  - EntryValue
type LaserValue struct {
	StringValue      *string           `thrift:"string_value,1" db:"string_value" json:"string_value,omitempty"`
	MapValue         map[string]string `thrift:"map_value,2" db:"map_value" json:"map_value,omitempty"`
	NullValue        *bool             `thrift:"null_value,3" db:"null_value" json:"null_value,omitempty"`
	MemberScoreValue map[string]int64  `thrift:"member_score_value,4" db:"member_score_value" json:"member_score_value,omitempty"`
	EntryValue       *EntryValue       `thrift:"entry_value,5" db:"entry_value" json:"entry_value,omitempty"`
}

func NewLaserValue() *LaserValue {
	return &LaserValue{}
}

var LaserValue_StringValue_DEFAULT string

func (p *LaserValue) GetStringValue() string {
	if !p.IsSetStringValue() {
		return LaserValue_StringValue_DEFAULT
	}
	return *p.StringValue
}

var LaserValue_MapValue_DEFAULT map[string]string

func (p *LaserValue) GetMapValue() map[string]string {
	return p.MapValue
}

var LaserValue_NullValue_DEFAULT bool

func (p *LaserValue) GetNullValue() bool {
	if !p.IsSetNullValue() {
		return LaserValue_NullValue_DEFAULT
	}
	return *p.NullValue
}

var LaserValue_MemberScoreValue_DEFAULT map[string]int64

func (p *LaserValue) GetMemberScoreValue() map[string]int64 {
	return p.MemberScoreValue
}

var LaserValue_EntryValue_DEFAULT *EntryValue

func (p *LaserValue) GetEntryValue() *EntryValue {
	if !p.IsSetEntryValue() {
		return LaserValue_EntryValue_DEFAULT
	}
	return p.EntryValue
}
func (p *LaserValue) CountSetFieldsLaserValue() int {
	count := 0
	if p.IsSetStringValue() {
		count++
	}
	if p.IsSetMapValue() {
		count++
	}
	if p.IsSetNullValue() {
		count++
	}
	if p.IsSetMemberScoreValue() {
		count++
	}
	if p.IsSetEntryValue() {
		count++
	}
	return count

}

func (p *LaserValue) IsSetStringValue() bool {
	return p.StringValue != nil
}

func (p *LaserValue) IsSetMapValue() bool {
	return p.MapValue != nil
}

func (p *LaserValue) IsSetNullValue() bool {
	return p.NullValue != nil
}

func (p *LaserValue) IsSetMemberScoreValue() bool {
	return p.MemberScoreValue != nil
}

func (p *LaserValue) IsSetEntryValue() bool {
	return p.EntryValue != nil
}

func (p *LaserValue) Read(iprot thrift.Protocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *LaserValue) ReadField1(iprot thrift.Protocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.StringValue = &v
	}
	return nil
}

func (p *LaserValue) ReadField2(iprot thrift.Protocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]string, size)
	p.MapValue = tMap
	for i := 0; i < size; i++ {
		var _key3 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key3 = v
		}
		var _val4 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val4 = v
		}
		p.MapValue[_key3] = _val4
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *LaserValue) ReadField3(iprot thrift.Protocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.NullValue = &v
	}
	return nil
}

func (p *LaserValue) ReadField4(iprot thrift.Protocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]int64, size)
	p.MemberScoreValue = tMap
	for i := 0; i < size; i++ {
		var _key5 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key5 = v
		}
		var _val6 int64
		if v, err := iprot.ReadI64(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val6 = v
		}
		p.MemberScoreValue[_key5] = _val6
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *LaserValue) ReadField5(iprot thrift.Protocol) error {
	p.EntryValue = NewEntryValue()
	if err := p.EntryValue.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.EntryValue), err)
	}
	return nil
}

func (p *LaserValue) Write(oprot thrift.Protocol) error {
	if c := p.CountSetFieldsLaserValue(); c != 1 {
		return fmt.Errorf("%T write union: exactly one field must be set (%d set).", p, c)
	}
	if err := oprot.WriteStructBegin("LaserValue"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *LaserValue) writeField1(oprot thrift.Protocol) (err error) {
	if p.IsSetStringValue() {
		if err := oprot.WriteFieldBegin("string_value", thrift.STRING, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:string_value: ", p), err)
		}
		if err := oprot.WriteString(string(*p.StringValue)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.string_value (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:string_value: ", p), err)
		}
	}
	return err
}

func (p *LaserValue) writeField2(oprot thrift.Protocol) (err error) {
	if p.IsSetMapValue() {
		if err := oprot.WriteFieldBegin("map_value", thrift.MAP, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:map_value: ", p), err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.MapValue)); err != nil {
			return thrift.PrependError("error writing map begin: ", err)
		}
		for k, v := range p.MapValue {
			if err := oprot.WriteString(string(k)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
			if err := oprot.WriteString(string(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return thrift.PrependError("error writing map end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:map_value: ", p), err)
		}
	}
	return err
}

func (p *LaserValue) writeField3(oprot thrift.Protocol) (err error) {
	if p.IsSetNullValue() {
		if err := oprot.WriteFieldBegin("null_value", thrift.BOOL, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:null_value: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.NullValue)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.null_value (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:null_value: ", p), err)
		}
	}
	return err
}

func (p *LaserValue) writeField4(oprot thrift.Protocol) (err error) {
	if p.IsSetMemberScoreValue() {
		if err := oprot.WriteFieldBegin("member_score_value", thrift.MAP, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:member_score_value: ", p), err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.I64, len(p.MemberScoreValue)); err != nil {
			return thrift.PrependError("error writing map begin: ", err)
		}
		for k, v := range p.MemberScoreValue {
			if err := oprot.WriteString(string(k)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
			if err := oprot.WriteI64(int64(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return thrift.PrependError("error writing map end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:member_score_value: ", p), err)
		}
	}
	return err
}

func (p *LaserValue) writeField5(oprot thrift.Protocol) (err error) {
	if p.IsSetEntryValue() {
		if err := oprot.WriteFieldBegin("entry_value", thrift.STRUCT, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:entry_value: ", p), err)
		}
		if err := p.EntryValue.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.EntryValue), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:entry_value: ", p), err)
		}
	}
	return err
}

func (p *LaserValue) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LaserValue(%+v)", *p)
}

// Attributes:
//  - Key
//  - Value
type LaserKV struct {
	Key   *LaserKey   `thrift:"key,1,required" db:"key" json:"key"`
	Value *LaserValue `thrift:"value,2,required" db:"value" json:"value"`
}

func NewLaserKV() *LaserKV {
	return &LaserKV{}
}

var LaserKV_Key_DEFAULT *LaserKey

func (p *LaserKV) GetKey() *LaserKey {
	if !p.IsSetKey() {
		return LaserKV_Key_DEFAULT
	}
	return p.Key
}

var LaserKV_Value_DEFAULT *LaserValue

func (p *LaserKV) GetValue() *LaserValue {
	if !p.IsSetValue() {
		return LaserKV_Value_DEFAULT
	}
	return p.Value
}
func (p *LaserKV) IsSetKey() bool {
	return p.Key != nil
}

func (p *LaserKV) IsSetValue() bool {
	return p.Value != nil
}

func (p *LaserKV) Read(iprot thrift.Protocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetKey bool = false
	var issetValue bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
			issetKey = true
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
			issetValue = true
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetKey {
		return thrift.NewProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Key is not set"))
	}
	if !issetValue {
		return thrift.NewProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Value is not set"))
	}
	return nil
}

func (p *LaserKV) ReadField1(iprot thrift.Protocol) error {
	p.Key = NewLaserKey()
	if err := p.Key.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Key), err)
	}
	return nil
}

func (p *LaserKV) ReadField2(iprot thrift.Protocol) error {
	p.Value = NewLaserValue()
	if err := p.Value.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Value), err)
	}
	return nil
}

func (p *LaserKV) Write(oprot thrift.Protocol) error {
	if err := oprot.WriteStructBegin("LaserKV"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *LaserKV) writeField1(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("key", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:key: ", p), err)
	}
	if err := p.Key.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Key), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:key: ", p), err)
	}
	return err
}

func (p *LaserKV) writeField2(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("value", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:value: ", p), err)
	}
	if err := p.Value.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Value), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:value: ", p), err)
	}
	return err
}

func (p *LaserKV) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LaserKV(%+v)", *p)
}

// Attributes:
//  - NotExists
//  - Ttl
type LaserSetOption struct {
	NotExists bool  `thrift:"not_exists,1,required" db:"not_exists" json:"not_exists"`
	Ttl       int64 `thrift:"ttl,2,required" db:"ttl" json:"ttl"`
}

func NewLaserSetOption() *LaserSetOption {
	return &LaserSetOption{}
}

func (p *LaserSetOption) GetNotExists() bool {
	return p.NotExists
}

func (p *LaserSetOption) GetTtl() int64 {
	return p.Ttl
}
func (p *LaserSetOption) Read(iprot thrift.Protocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetNotExists bool = false
	var issetTtl bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
			issetNotExists = true
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
			issetTtl = true
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetNotExists {
		return thrift.NewProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NotExists is not set"))
	}
	if !issetTtl {
		return thrift.NewProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Ttl is not set"))
	}
	return nil
}

func (p *LaserSetOption) ReadField1(iprot thrift.Protocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.NotExists = v
	}
	return nil
}

func (p *LaserSetOption) ReadField2(iprot thrift.Protocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Ttl = v
	}
	return nil
}

func (p *LaserSetOption) Write(oprot thrift.Protocol) error {
	if err := oprot.WriteStructBegin("LaserSetOption"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *LaserSetOption) writeField1(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("not_exists", thrift.BOOL, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:not_exists: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.NotExists)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.not_exists (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:not_exists: ", p), err)
	}
	return err
}

func (p *LaserSetOption) writeField2(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("ttl", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ttl: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.Ttl)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ttl (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ttl: ", p), err)
	}
	return err
}

func (p *LaserSetOption) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LaserSetOption(%+v)", *p)
}

// Attributes:
//  - Values
type LaserKVs struct {
	Values []*LaserKV `thrift:"values,1" db:"values" json:"values"`
}

func NewLaserKVs() *LaserKVs {
	return &LaserKVs{}
}

func (p *LaserKVs) GetValues() []*LaserKV {
	return p.Values
}
func (p *LaserKVs) Read(iprot thrift.Protocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *LaserKVs) ReadField1(iprot thrift.Protocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*LaserKV, 0, size)
	p.Values = tSlice
	for i := 0; i < size; i++ {
		_elem7 := NewLaserKV()
		if err := _elem7.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem7), err)
		}
		p.Values = append(p.Values, _elem7)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *LaserKVs) Write(oprot thrift.Protocol) error {
	if err := oprot.WriteStructBegin("LaserKVs"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *LaserKVs) writeField1(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("values", thrift.LIST, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:values: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Values)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Values {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:values: ", p), err)
	}
	return err
}

func (p *LaserKVs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LaserKVs(%+v)", *p)
}

// Attributes:
//  - Score
//  - Member
type LaserFloatScoreMember struct {
	Score  float64
	Member string
}

type LaserScoreMember struct {
	Score  int64  `thrift:"score,1,required" db:"score" json:"score"`
	Member string `thrift:"member,2,required" db:"member" json:"member"`
}

func NewLaserScoreMember() *LaserScoreMember {
	return &LaserScoreMember{}
}

func (p *LaserScoreMember) GetScore() int64 {
	return p.Score
}

func (p *LaserScoreMember) GetMember() string {
	return p.Member
}
func (p *LaserScoreMember) Read(iprot thrift.Protocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetScore bool = false
	var issetMember bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
			issetScore = true
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
			issetMember = true
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetScore {
		return thrift.NewProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Score is not set"))
	}
	if !issetMember {
		return thrift.NewProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Member is not set"))
	}
	return nil
}

func (p *LaserScoreMember) ReadField1(iprot thrift.Protocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Score = v
	}
	return nil
}

func (p *LaserScoreMember) ReadField2(iprot thrift.Protocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Member = v
	}
	return nil
}

func (p *LaserScoreMember) Write(oprot thrift.Protocol) error {
	if err := oprot.WriteStructBegin("LaserScoreMember"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *LaserScoreMember) writeField1(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("score", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:score: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.Score)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.score (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:score: ", p), err)
	}
	return err
}

func (p *LaserScoreMember) writeField2(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("member", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:member: ", p), err)
	}
	if err := oprot.WriteString(string(p.Member)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.member (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:member: ", p), err)
	}
	return err
}

func (p *LaserScoreMember) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LaserScoreMember(%+v)", *p)
}

// Attributes:
//  - IntData
//  - StringData
//  - ListIntData
//  - ListStringData
//  - ListValueData
//  - MapStringData
//  - MapValueData
//  - BoolData
//  - ListScoreMemberData
type LaserResponse struct {
	IntData             *int64                 `thrift:"int_data,1" db:"int_data" json:"int_data,omitempty"`
	StringData          *string                `thrift:"string_data,2" db:"string_data" json:"string_data,omitempty"`
	ListIntData         []int64                `thrift:"list_int_data,3" db:"list_int_data" json:"list_int_data,omitempty"`
	ListStringData      []string               `thrift:"list_string_data,4" db:"list_string_data" json:"list_string_data,omitempty"`
	ListValueData       []*LaserValue          `thrift:"list_value_data,5" db:"list_value_data" json:"list_value_data,omitempty"`
	MapStringData       map[string]string      `thrift:"map_string_data,6" db:"map_string_data" json:"map_string_data,omitempty"`
	MapValueData        map[string]*LaserValue `thrift:"map_value_data,7" db:"map_value_data" json:"map_value_data,omitempty"`
	BoolData            *bool                  `thrift:"bool_data,8" db:"bool_data" json:"bool_data,omitempty"`
	ListScoreMemberData []*LaserScoreMember    `thrift:"list_score_member_data,9" db:"list_score_member_data" json:"list_score_member_data,omitempty"`
}

func NewLaserResponse() *LaserResponse {
	return &LaserResponse{}
}

var LaserResponse_IntData_DEFAULT int64

func (p *LaserResponse) GetIntData() int64 {
	if !p.IsSetIntData() {
		return LaserResponse_IntData_DEFAULT
	}
	return *p.IntData
}

var LaserResponse_StringData_DEFAULT string

func (p *LaserResponse) GetStringData() string {
	if !p.IsSetStringData() {
		return LaserResponse_StringData_DEFAULT
	}
	return *p.StringData
}

var LaserResponse_ListIntData_DEFAULT []int64

func (p *LaserResponse) GetListIntData() []int64 {
	return p.ListIntData
}

var LaserResponse_ListStringData_DEFAULT []string

func (p *LaserResponse) GetListStringData() []string {
	return p.ListStringData
}

var LaserResponse_ListValueData_DEFAULT []*LaserValue

func (p *LaserResponse) GetListValueData() []*LaserValue {
	return p.ListValueData
}

var LaserResponse_MapStringData_DEFAULT map[string]string

func (p *LaserResponse) GetMapStringData() map[string]string {
	return p.MapStringData
}

var LaserResponse_MapValueData_DEFAULT map[string]*LaserValue

func (p *LaserResponse) GetMapValueData() map[string]*LaserValue {
	return p.MapValueData
}

var LaserResponse_BoolData_DEFAULT bool

func (p *LaserResponse) GetBoolData() bool {
	if !p.IsSetBoolData() {
		return LaserResponse_BoolData_DEFAULT
	}
	return *p.BoolData
}

var LaserResponse_ListScoreMemberData_DEFAULT []*LaserScoreMember

func (p *LaserResponse) GetListScoreMemberData() []*LaserScoreMember {
	return p.ListScoreMemberData
}
func (p *LaserResponse) CountSetFieldsLaserResponse() int {
	count := 0
	if p.IsSetIntData() {
		count++
	}
	if p.IsSetStringData() {
		count++
	}
	if p.IsSetListIntData() {
		count++
	}
	if p.IsSetListStringData() {
		count++
	}
	if p.IsSetListValueData() {
		count++
	}
	if p.IsSetMapStringData() {
		count++
	}
	if p.IsSetMapValueData() {
		count++
	}
	if p.IsSetBoolData() {
		count++
	}
	if p.IsSetListScoreMemberData() {
		count++
	}
	return count

}

func (p *LaserResponse) IsSetIntData() bool {
	return p.IntData != nil
}

func (p *LaserResponse) IsSetStringData() bool {
	return p.StringData != nil
}

func (p *LaserResponse) IsSetListIntData() bool {
	return p.ListIntData != nil
}

func (p *LaserResponse) IsSetListStringData() bool {
	return p.ListStringData != nil
}

func (p *LaserResponse) IsSetListValueData() bool {
	return p.ListValueData != nil
}

func (p *LaserResponse) IsSetMapStringData() bool {
	return p.MapStringData != nil
}

func (p *LaserResponse) IsSetMapValueData() bool {
	return p.MapValueData != nil
}

func (p *LaserResponse) IsSetBoolData() bool {
	return p.BoolData != nil
}

func (p *LaserResponse) IsSetListScoreMemberData() bool {
	return p.ListScoreMemberData != nil
}

func (p *LaserResponse) Read(iprot thrift.Protocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.ReadField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.ReadField9(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *LaserResponse) ReadField1(iprot thrift.Protocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.IntData = &v
	}
	return nil
}

func (p *LaserResponse) ReadField2(iprot thrift.Protocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.StringData = &v
	}
	return nil
}

func (p *LaserResponse) ReadField3(iprot thrift.Protocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]int64, 0, size)
	p.ListIntData = tSlice
	for i := 0; i < size; i++ {
		var _elem8 int64
		if v, err := iprot.ReadI64(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem8 = v
		}
		p.ListIntData = append(p.ListIntData, _elem8)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *LaserResponse) ReadField4(iprot thrift.Protocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.ListStringData = tSlice
	for i := 0; i < size; i++ {
		var _elem9 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem9 = v
		}
		p.ListStringData = append(p.ListStringData, _elem9)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *LaserResponse) ReadField5(iprot thrift.Protocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*LaserValue, 0, size)
	p.ListValueData = tSlice
	for i := 0; i < size; i++ {
		_elem10 := NewLaserValue()
		if err := _elem10.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem10), err)
		}
		p.ListValueData = append(p.ListValueData, _elem10)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *LaserResponse) ReadField6(iprot thrift.Protocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]string, size)
	p.MapStringData = tMap
	for i := 0; i < size; i++ {
		var _key11 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key11 = v
		}
		var _val12 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val12 = v
		}
		p.MapStringData[_key11] = _val12
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *LaserResponse) ReadField7(iprot thrift.Protocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]*LaserValue, size)
	p.MapValueData = tMap
	for i := 0; i < size; i++ {
		var _key13 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key13 = v
		}
		_val14 := NewLaserValue()
		if err := _val14.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _val14), err)
		}
		p.MapValueData[_key13] = _val14
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *LaserResponse) ReadField8(iprot thrift.Protocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.BoolData = &v
	}
	return nil
}

func (p *LaserResponse) ReadField9(iprot thrift.Protocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*LaserScoreMember, 0, size)
	p.ListScoreMemberData = tSlice
	for i := 0; i < size; i++ {
		_elem15 := NewLaserScoreMember()
		if err := _elem15.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem15), err)
		}
		p.ListScoreMemberData = append(p.ListScoreMemberData, _elem15)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *LaserResponse) Write(oprot thrift.Protocol) error {
	if c := p.CountSetFieldsLaserResponse(); c != 1 {
		return fmt.Errorf("%T write union: exactly one field must be set (%d set).", p, c)
	}
	if err := oprot.WriteStructBegin("LaserResponse"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *LaserResponse) writeField1(oprot thrift.Protocol) (err error) {
	if p.IsSetIntData() {
		if err := oprot.WriteFieldBegin("int_data", thrift.I64, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:int_data: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.IntData)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.int_data (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:int_data: ", p), err)
		}
	}
	return err
}

func (p *LaserResponse) writeField2(oprot thrift.Protocol) (err error) {
	if p.IsSetStringData() {
		if err := oprot.WriteFieldBegin("string_data", thrift.STRING, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:string_data: ", p), err)
		}
		if err := oprot.WriteString(string(*p.StringData)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.string_data (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:string_data: ", p), err)
		}
	}
	return err
}

func (p *LaserResponse) writeField3(oprot thrift.Protocol) (err error) {
	if p.IsSetListIntData() {
		if err := oprot.WriteFieldBegin("list_int_data", thrift.LIST, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:list_int_data: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.I64, len(p.ListIntData)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.ListIntData {
			if err := oprot.WriteI64(int64(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:list_int_data: ", p), err)
		}
	}
	return err
}

func (p *LaserResponse) writeField4(oprot thrift.Protocol) (err error) {
	if p.IsSetListStringData() {
		if err := oprot.WriteFieldBegin("list_string_data", thrift.LIST, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:list_string_data: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.ListStringData)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.ListStringData {
			if err := oprot.WriteString(string(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:list_string_data: ", p), err)
		}
	}
	return err
}

func (p *LaserResponse) writeField5(oprot thrift.Protocol) (err error) {
	if p.IsSetListValueData() {
		if err := oprot.WriteFieldBegin("list_value_data", thrift.LIST, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:list_value_data: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.ListValueData)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.ListValueData {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:list_value_data: ", p), err)
		}
	}
	return err
}

func (p *LaserResponse) writeField6(oprot thrift.Protocol) (err error) {
	if p.IsSetMapStringData() {
		if err := oprot.WriteFieldBegin("map_string_data", thrift.MAP, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:map_string_data: ", p), err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.MapStringData)); err != nil {
			return thrift.PrependError("error writing map begin: ", err)
		}
		for k, v := range p.MapStringData {
			if err := oprot.WriteString(string(k)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
			if err := oprot.WriteString(string(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return thrift.PrependError("error writing map end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:map_string_data: ", p), err)
		}
	}
	return err
}

func (p *LaserResponse) writeField7(oprot thrift.Protocol) (err error) {
	if p.IsSetMapValueData() {
		if err := oprot.WriteFieldBegin("map_value_data", thrift.MAP, 7); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:map_value_data: ", p), err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRUCT, len(p.MapValueData)); err != nil {
			return thrift.PrependError("error writing map begin: ", err)
		}
		for k, v := range p.MapValueData {
			if err := oprot.WriteString(string(k)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return thrift.PrependError("error writing map end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 7:map_value_data: ", p), err)
		}
	}
	return err
}

func (p *LaserResponse) writeField8(oprot thrift.Protocol) (err error) {
	if p.IsSetBoolData() {
		if err := oprot.WriteFieldBegin("bool_data", thrift.BOOL, 8); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:bool_data: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.BoolData)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.bool_data (8) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 8:bool_data: ", p), err)
		}
	}
	return err
}

func (p *LaserResponse) writeField9(oprot thrift.Protocol) (err error) {
	if p.IsSetListScoreMemberData() {
		if err := oprot.WriteFieldBegin("list_score_member_data", thrift.LIST, 9); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:list_score_member_data: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.ListScoreMemberData)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.ListScoreMemberData {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 9:list_score_member_data: ", p), err)
		}
	}
	return err
}

func (p *LaserResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LaserResponse(%+v)", *p)
}

// Attributes:
//  - Message
//  - Status
type LaserException struct {
	Message string `thrift:"message,1,required" db:"message" json:"message"`
	Status  Status `thrift:"status,2,required" db:"status" json:"status"`
}

func NewLaserException() *LaserException {
	return &LaserException{}
}

func (p *LaserException) GetMessage() string {
	return p.Message
}

func (p *LaserException) GetStatus() Status {
	return p.Status
}
func (p *LaserException) Read(iprot thrift.Protocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetMessage bool = false
	var issetStatus bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
			issetMessage = true
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
			issetStatus = true
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetMessage {
		return thrift.NewProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Message is not set"))
	}
	if !issetStatus {
		return thrift.NewProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Status is not set"))
	}
	return nil
}

func (p *LaserException) ReadField1(iprot thrift.Protocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Message = v
	}
	return nil
}

func (p *LaserException) ReadField2(iprot thrift.Protocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := Status(v)
		p.Status = temp
	}
	return nil
}

func (p *LaserException) Write(oprot thrift.Protocol) error {
	if err := oprot.WriteStructBegin("LaserException"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *LaserException) writeField1(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("message", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:message: ", p), err)
	}
	if err := oprot.WriteString(string(p.Message)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.message (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:message: ", p), err)
	}
	return err
}

func (p *LaserException) writeField2(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("status", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:status: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Status)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.status (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:status: ", p), err)
	}
	return err
}

func (p *LaserException) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LaserException(%+v)", *p)
}

func (p *LaserException) Error() string {
	return p.String()
}
