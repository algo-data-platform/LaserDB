// Autogenerated by Thrift Compiler (facebook)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
// @generated

package main

import (
	"../../laser"
	"flag"
	"fmt"
	"math"
	"net"
	"net/url"
	"os"
	"strconv"
	"strings"

	"github.com/facebook/fbthrift/thrift/lib/go/thrift"
)

func Usage() {
	fmt.Fprintln(os.Stderr, "Usage of ", os.Args[0], " [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]:")
	flag.PrintDefaults()
	fmt.Fprintln(os.Stderr, "\nFunctions:")
	fmt.Fprintln(os.Stderr, "  LaserResponse delkey(LaserKey key)")
	fmt.Fprintln(os.Stderr, "  LaserResponse exists(LaserKey key)")
	fmt.Fprintln(os.Stderr, "  LaserResponse expire(LaserKey key, i64 time)")
	fmt.Fprintln(os.Stderr, "  LaserResponse expireAt(LaserKey key, i64 time_at)")
	fmt.Fprintln(os.Stderr, "  LaserResponse ttl(LaserKey key)")
	fmt.Fprintln(os.Stderr, "  LaserResponse append(LaserKey key, string value)")
	fmt.Fprintln(os.Stderr, "  LaserResponse get(LaserKey key)")
	fmt.Fprintln(os.Stderr, "  LaserResponse sset(LaserKV kv)")
	fmt.Fprintln(os.Stderr, "  LaserResponse setx(LaserKV kv, LaserSetOption option)")
	fmt.Fprintln(os.Stderr, "  LaserResponse mget(LaserKeys keys)")
	fmt.Fprintln(os.Stderr, "  LaserResponse mset(LaserKVs values)")
	fmt.Fprintln(os.Stderr, "  LaserResponse mgetDetail(LaserKeys keys)")
	fmt.Fprintln(os.Stderr, "  LaserResponse msetDetail(LaserKVs values, LaserSetOption option)")
	fmt.Fprintln(os.Stderr, "  LaserResponse mdel(LaserKeys keys)")
	fmt.Fprintln(os.Stderr, "  LaserResponse exist(LaserKey key)")
	fmt.Fprintln(os.Stderr, "  LaserResponse decr(LaserKey key)")
	fmt.Fprintln(os.Stderr, "  LaserResponse incr(LaserKey key)")
	fmt.Fprintln(os.Stderr, "  LaserResponse decrBy(LaserKey key, i64 step)")
	fmt.Fprintln(os.Stderr, "  LaserResponse incrBy(LaserKey key, i64 step)")
	fmt.Fprintln(os.Stderr, "  LaserResponse hdel(LaserKey key, string field)")
	fmt.Fprintln(os.Stderr, "  LaserResponse hexists(LaserKey key, string field)")
	fmt.Fprintln(os.Stderr, "  LaserResponse hget(LaserKey key, string field)")
	fmt.Fprintln(os.Stderr, "  LaserResponse hset(LaserKey key, string field, string value)")
	fmt.Fprintln(os.Stderr, "  LaserResponse hgetall(LaserKey key)")
	fmt.Fprintln(os.Stderr, "  LaserResponse hkeys(LaserKey key)")
	fmt.Fprintln(os.Stderr, "  LaserResponse hlen(LaserKey key)")
	fmt.Fprintln(os.Stderr, "  LaserResponse hmget(LaserKey key,  fields)")
	fmt.Fprintln(os.Stderr, "  LaserResponse hmset(LaserKey key, LaserValue value)")
	fmt.Fprintln(os.Stderr, "  LaserResponse lindex(LaserKey key, i32 index)")
	fmt.Fprintln(os.Stderr, "  LaserResponse llen(LaserKey key)")
	fmt.Fprintln(os.Stderr, "  LaserResponse lpop(LaserKey key)")
	fmt.Fprintln(os.Stderr, "  LaserResponse lpush(LaserKey key, string value)")
	fmt.Fprintln(os.Stderr, "  LaserResponse lrange(LaserKey key, i32 start, i32 end)")
	fmt.Fprintln(os.Stderr, "  LaserResponse rpop(LaserKey key)")
	fmt.Fprintln(os.Stderr, "  LaserResponse rpush(LaserKey key, string value)")
	fmt.Fprintln(os.Stderr, "  LaserResponse sadd(LaserKey key, string member)")
	fmt.Fprintln(os.Stderr, "  LaserResponse scard(LaserKey req)")
	fmt.Fprintln(os.Stderr, "  LaserResponse sismember(LaserKey req, string member)")
	fmt.Fprintln(os.Stderr, "  LaserResponse sremove(LaserKey req, string member)")
	fmt.Fprintln(os.Stderr, "  LaserResponse smembers(LaserKey req)")
	fmt.Fprintln(os.Stderr, "  LaserResponse zadd(LaserKey key, LaserValue member_score)")
	fmt.Fprintln(os.Stderr, "  LaserResponse zcard(LaserKey key)")
	fmt.Fprintln(os.Stderr, "  LaserResponse zrank(LaserKey key, string member)")
	fmt.Fprintln(os.Stderr, "  LaserResponse zscore(LaserKey key, string member)")
	fmt.Fprintln(os.Stderr, "  LaserResponse zrem(LaserKey key, string member)")
	fmt.Fprintln(os.Stderr, "  LaserResponse zrange(LaserKey key, i64 start, i64 stop)")
	fmt.Fprintln(os.Stderr, "  LaserResponse zrangeByScore(LaserKey key, i64 min, i64 max)")
	fmt.Fprintln(os.Stderr, "  LaserResponse zremRangeByScore(LaserKey key, i64 min, i64 max)")
	fmt.Fprintln(os.Stderr)
	os.Exit(0)
}

func main() {
	flag.Usage = Usage
	var host string
	var port int
	var protocol string
	var urlString string
	var framed bool
	var useHttp bool
	var parsedUrl url.URL
	var trans thrift.Transport
	_ = strconv.Atoi
	_ = math.Abs
	flag.Usage = Usage
	flag.StringVar(&host, "h", "localhost", "Specify host")
	flag.IntVar(&port, "p", 9090, "Specify port")
	flag.StringVar(&protocol, "P", "binary", "Specify the protocol (binary, compact, simplejson, json)")
	flag.StringVar(&urlString, "u", "", "Specify the url")
	flag.BoolVar(&framed, "framed", false, "Use framed transport")
	flag.BoolVar(&useHttp, "http", false, "Use http")
	flag.Parse()

	if len(urlString) > 0 {
		parsedUrl, err := url.Parse(urlString)
		if err != nil {
			fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
			flag.Usage()
		}
		host = parsedUrl.Host
		useHttp = len(parsedUrl.Scheme) <= 0 || parsedUrl.Scheme == "http"
	} else if useHttp {
		_, err := url.Parse(fmt.Sprint("http://", host, ":", port))
		if err != nil {
			fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
			flag.Usage()
		}
	}

	cmd := flag.Arg(0)
	var err error
	if useHttp {
		trans, err = thrift.NewHTTPPostClient(parsedUrl.String())
	} else {
		portStr := fmt.Sprint(port)
		if strings.Contains(host, ":") {
			host, portStr, err = net.SplitHostPort(host)
			if err != nil {
				fmt.Fprintln(os.Stderr, "error with host:", err)
				os.Exit(1)
			}
		}
		trans, err = thrift.NewSocket(thrift.SocketAddr(net.JoinHostPort(host, portStr)))
		if err != nil {
			fmt.Fprintln(os.Stderr, "error resolving address:", err)
			os.Exit(1)
		}
		if framed {
			trans = thrift.NewFramedTransport(trans)
		}
	}
	if err != nil {
		fmt.Fprintln(os.Stderr, "Error creating transport", err)
		os.Exit(1)
	}
	defer trans.Close()
	var protocolFactory thrift.ProtocolFactory
	switch protocol {
	case "compact":
		protocolFactory = thrift.NewCompactProtocolFactory()
		break
	case "simplejson":
		protocolFactory = thrift.NewSimpleJSONProtocolFactory()
		break
	case "json":
		protocolFactory = thrift.NewJSONProtocolFactory()
		break
	case "binary", "":
		protocolFactory = thrift.NewBinaryProtocolFactoryDefault()
		break
	default:
		fmt.Fprintln(os.Stderr, "Invalid protocol specified: ", protocol)
		Usage()
		os.Exit(1)
	}
	client := laser.NewLaserServiceClientFactory(trans, protocolFactory)
	if err := trans.Open(); err != nil {
		fmt.Fprintln(os.Stderr, "Error opening socket to ", host, ":", port, " ", err)
		os.Exit(1)
	}

	switch cmd {
	case "delkey":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "Delkey requires 1 args")
			flag.Usage()
		}
		arg211 := flag.Arg(1)
		mbTrans212 := thrift.NewMemoryBufferLen(len(arg211))
		defer mbTrans212.Close()
		_, err213 := mbTrans212.WriteString(arg211)
		if err213 != nil {
			Usage()
			return
		}
		factory214 := thrift.NewSimpleJSONProtocolFactory()
		jsProt215 := factory214.GetProtocol(mbTrans212)
		argvalue0 := laser.NewLaserKey()
		err216 := argvalue0.Read(jsProt215)
		if err216 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.Delkey(value0))
		fmt.Print("\n")
		break
	case "exists":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "Exists requires 1 args")
			flag.Usage()
		}
		arg217 := flag.Arg(1)
		mbTrans218 := thrift.NewMemoryBufferLen(len(arg217))
		defer mbTrans218.Close()
		_, err219 := mbTrans218.WriteString(arg217)
		if err219 != nil {
			Usage()
			return
		}
		factory220 := thrift.NewSimpleJSONProtocolFactory()
		jsProt221 := factory220.GetProtocol(mbTrans218)
		argvalue0 := laser.NewLaserKey()
		err222 := argvalue0.Read(jsProt221)
		if err222 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.Exists(value0))
		fmt.Print("\n")
		break
	case "expire":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "Expire requires 2 args")
			flag.Usage()
		}
		arg223 := flag.Arg(1)
		mbTrans224 := thrift.NewMemoryBufferLen(len(arg223))
		defer mbTrans224.Close()
		_, err225 := mbTrans224.WriteString(arg223)
		if err225 != nil {
			Usage()
			return
		}
		factory226 := thrift.NewSimpleJSONProtocolFactory()
		jsProt227 := factory226.GetProtocol(mbTrans224)
		argvalue0 := laser.NewLaserKey()
		err228 := argvalue0.Read(jsProt227)
		if err228 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		argvalue1, err229 := (strconv.ParseInt(flag.Arg(2), 10, 64))
		if err229 != nil {
			Usage()
			return
		}
		value1 := argvalue1
		fmt.Print(client.Expire(value0, value1))
		fmt.Print("\n")
		break
	case "expireAt":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "ExpireAt requires 2 args")
			flag.Usage()
		}
		arg230 := flag.Arg(1)
		mbTrans231 := thrift.NewMemoryBufferLen(len(arg230))
		defer mbTrans231.Close()
		_, err232 := mbTrans231.WriteString(arg230)
		if err232 != nil {
			Usage()
			return
		}
		factory233 := thrift.NewSimpleJSONProtocolFactory()
		jsProt234 := factory233.GetProtocol(mbTrans231)
		argvalue0 := laser.NewLaserKey()
		err235 := argvalue0.Read(jsProt234)
		if err235 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		argvalue1, err236 := (strconv.ParseInt(flag.Arg(2), 10, 64))
		if err236 != nil {
			Usage()
			return
		}
		value1 := argvalue1
		fmt.Print(client.ExpireAt(value0, value1))
		fmt.Print("\n")
		break
	case "ttl":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "Ttl requires 1 args")
			flag.Usage()
		}
		arg237 := flag.Arg(1)
		mbTrans238 := thrift.NewMemoryBufferLen(len(arg237))
		defer mbTrans238.Close()
		_, err239 := mbTrans238.WriteString(arg237)
		if err239 != nil {
			Usage()
			return
		}
		factory240 := thrift.NewSimpleJSONProtocolFactory()
		jsProt241 := factory240.GetProtocol(mbTrans238)
		argvalue0 := laser.NewLaserKey()
		err242 := argvalue0.Read(jsProt241)
		if err242 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.Ttl(value0))
		fmt.Print("\n")
		break
	case "append":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "Append requires 2 args")
			flag.Usage()
		}
		arg243 := flag.Arg(1)
		mbTrans244 := thrift.NewMemoryBufferLen(len(arg243))
		defer mbTrans244.Close()
		_, err245 := mbTrans244.WriteString(arg243)
		if err245 != nil {
			Usage()
			return
		}
		factory246 := thrift.NewSimpleJSONProtocolFactory()
		jsProt247 := factory246.GetProtocol(mbTrans244)
		argvalue0 := laser.NewLaserKey()
		err248 := argvalue0.Read(jsProt247)
		if err248 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.Append(value0, value1))
		fmt.Print("\n")
		break
	case "get":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "Get requires 1 args")
			flag.Usage()
		}
		arg250 := flag.Arg(1)
		mbTrans251 := thrift.NewMemoryBufferLen(len(arg250))
		defer mbTrans251.Close()
		_, err252 := mbTrans251.WriteString(arg250)
		if err252 != nil {
			Usage()
			return
		}
		factory253 := thrift.NewSimpleJSONProtocolFactory()
		jsProt254 := factory253.GetProtocol(mbTrans251)
		argvalue0 := laser.NewLaserKey()
		err255 := argvalue0.Read(jsProt254)
		if err255 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.Get(value0))
		fmt.Print("\n")
		break
	case "sset":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "Sset requires 1 args")
			flag.Usage()
		}
		arg256 := flag.Arg(1)
		mbTrans257 := thrift.NewMemoryBufferLen(len(arg256))
		defer mbTrans257.Close()
		_, err258 := mbTrans257.WriteString(arg256)
		if err258 != nil {
			Usage()
			return
		}
		factory259 := thrift.NewSimpleJSONProtocolFactory()
		jsProt260 := factory259.GetProtocol(mbTrans257)
		argvalue0 := laser.NewLaserKV()
		err261 := argvalue0.Read(jsProt260)
		if err261 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.Sset(value0))
		fmt.Print("\n")
		break
	case "setx":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "Setx requires 2 args")
			flag.Usage()
		}
		arg262 := flag.Arg(1)
		mbTrans263 := thrift.NewMemoryBufferLen(len(arg262))
		defer mbTrans263.Close()
		_, err264 := mbTrans263.WriteString(arg262)
		if err264 != nil {
			Usage()
			return
		}
		factory265 := thrift.NewSimpleJSONProtocolFactory()
		jsProt266 := factory265.GetProtocol(mbTrans263)
		argvalue0 := laser.NewLaserKV()
		err267 := argvalue0.Read(jsProt266)
		if err267 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		arg268 := flag.Arg(2)
		mbTrans269 := thrift.NewMemoryBufferLen(len(arg268))
		defer mbTrans269.Close()
		_, err270 := mbTrans269.WriteString(arg268)
		if err270 != nil {
			Usage()
			return
		}
		factory271 := thrift.NewSimpleJSONProtocolFactory()
		jsProt272 := factory271.GetProtocol(mbTrans269)
		argvalue1 := laser.NewLaserSetOption()
		err273 := argvalue1.Read(jsProt272)
		if err273 != nil {
			Usage()
			return
		}
		value1 := argvalue1
		fmt.Print(client.Setx(value0, value1))
		fmt.Print("\n")
		break
	case "mget":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "Mget requires 1 args")
			flag.Usage()
		}
		arg274 := flag.Arg(1)
		mbTrans275 := thrift.NewMemoryBufferLen(len(arg274))
		defer mbTrans275.Close()
		_, err276 := mbTrans275.WriteString(arg274)
		if err276 != nil {
			Usage()
			return
		}
		factory277 := thrift.NewSimpleJSONProtocolFactory()
		jsProt278 := factory277.GetProtocol(mbTrans275)
		argvalue0 := laser.NewLaserKeys()
		err279 := argvalue0.Read(jsProt278)
		if err279 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.Mget(value0))
		fmt.Print("\n")
		break
	case "mset":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "Mset requires 1 args")
			flag.Usage()
		}
		arg280 := flag.Arg(1)
		mbTrans281 := thrift.NewMemoryBufferLen(len(arg280))
		defer mbTrans281.Close()
		_, err282 := mbTrans281.WriteString(arg280)
		if err282 != nil {
			Usage()
			return
		}
		factory283 := thrift.NewSimpleJSONProtocolFactory()
		jsProt284 := factory283.GetProtocol(mbTrans281)
		argvalue0 := laser.NewLaserKVs()
		err285 := argvalue0.Read(jsProt284)
		if err285 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.Mset(value0))
		fmt.Print("\n")
		break
	case "mgetDetail":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "MgetDetail requires 1 args")
			flag.Usage()
		}
		arg286 := flag.Arg(1)
		mbTrans287 := thrift.NewMemoryBufferLen(len(arg286))
		defer mbTrans287.Close()
		_, err288 := mbTrans287.WriteString(arg286)
		if err288 != nil {
			Usage()
			return
		}
		factory289 := thrift.NewSimpleJSONProtocolFactory()
		jsProt290 := factory289.GetProtocol(mbTrans287)
		argvalue0 := laser.NewLaserKeys()
		err291 := argvalue0.Read(jsProt290)
		if err291 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.MgetDetail(value0))
		fmt.Print("\n")
		break
	case "msetDetail":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "MsetDetail requires 2 args")
			flag.Usage()
		}
		arg292 := flag.Arg(1)
		mbTrans293 := thrift.NewMemoryBufferLen(len(arg292))
		defer mbTrans293.Close()
		_, err294 := mbTrans293.WriteString(arg292)
		if err294 != nil {
			Usage()
			return
		}
		factory295 := thrift.NewSimpleJSONProtocolFactory()
		jsProt296 := factory295.GetProtocol(mbTrans293)
		argvalue0 := laser.NewLaserKVs()
		err297 := argvalue0.Read(jsProt296)
		if err297 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		arg298 := flag.Arg(2)
		mbTrans299 := thrift.NewMemoryBufferLen(len(arg298))
		defer mbTrans299.Close()
		_, err300 := mbTrans299.WriteString(arg298)
		if err300 != nil {
			Usage()
			return
		}
		factory301 := thrift.NewSimpleJSONProtocolFactory()
		jsProt302 := factory301.GetProtocol(mbTrans299)
		argvalue1 := laser.NewLaserSetOption()
		err303 := argvalue1.Read(jsProt302)
		if err303 != nil {
			Usage()
			return
		}
		value1 := argvalue1
		fmt.Print(client.MsetDetail(value0, value1))
		fmt.Print("\n")
		break
	case "mdel":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "Mdel requires 1 args")
			flag.Usage()
		}
		arg304 := flag.Arg(1)
		mbTrans305 := thrift.NewMemoryBufferLen(len(arg304))
		defer mbTrans305.Close()
		_, err306 := mbTrans305.WriteString(arg304)
		if err306 != nil {
			Usage()
			return
		}
		factory307 := thrift.NewSimpleJSONProtocolFactory()
		jsProt308 := factory307.GetProtocol(mbTrans305)
		argvalue0 := laser.NewLaserKeys()
		err309 := argvalue0.Read(jsProt308)
		if err309 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.Mdel(value0))
		fmt.Print("\n")
		break
	case "exist":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "Exist requires 1 args")
			flag.Usage()
		}
		arg310 := flag.Arg(1)
		mbTrans311 := thrift.NewMemoryBufferLen(len(arg310))
		defer mbTrans311.Close()
		_, err312 := mbTrans311.WriteString(arg310)
		if err312 != nil {
			Usage()
			return
		}
		factory313 := thrift.NewSimpleJSONProtocolFactory()
		jsProt314 := factory313.GetProtocol(mbTrans311)
		argvalue0 := laser.NewLaserKey()
		err315 := argvalue0.Read(jsProt314)
		if err315 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.Exist(value0))
		fmt.Print("\n")
		break
	case "decr":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "Decr requires 1 args")
			flag.Usage()
		}
		arg316 := flag.Arg(1)
		mbTrans317 := thrift.NewMemoryBufferLen(len(arg316))
		defer mbTrans317.Close()
		_, err318 := mbTrans317.WriteString(arg316)
		if err318 != nil {
			Usage()
			return
		}
		factory319 := thrift.NewSimpleJSONProtocolFactory()
		jsProt320 := factory319.GetProtocol(mbTrans317)
		argvalue0 := laser.NewLaserKey()
		err321 := argvalue0.Read(jsProt320)
		if err321 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.Decr(value0))
		fmt.Print("\n")
		break
	case "incr":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "Incr requires 1 args")
			flag.Usage()
		}
		arg322 := flag.Arg(1)
		mbTrans323 := thrift.NewMemoryBufferLen(len(arg322))
		defer mbTrans323.Close()
		_, err324 := mbTrans323.WriteString(arg322)
		if err324 != nil {
			Usage()
			return
		}
		factory325 := thrift.NewSimpleJSONProtocolFactory()
		jsProt326 := factory325.GetProtocol(mbTrans323)
		argvalue0 := laser.NewLaserKey()
		err327 := argvalue0.Read(jsProt326)
		if err327 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.Incr(value0))
		fmt.Print("\n")
		break
	case "decrBy":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "DecrBy requires 2 args")
			flag.Usage()
		}
		arg328 := flag.Arg(1)
		mbTrans329 := thrift.NewMemoryBufferLen(len(arg328))
		defer mbTrans329.Close()
		_, err330 := mbTrans329.WriteString(arg328)
		if err330 != nil {
			Usage()
			return
		}
		factory331 := thrift.NewSimpleJSONProtocolFactory()
		jsProt332 := factory331.GetProtocol(mbTrans329)
		argvalue0 := laser.NewLaserKey()
		err333 := argvalue0.Read(jsProt332)
		if err333 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		argvalue1, err334 := (strconv.ParseInt(flag.Arg(2), 10, 64))
		if err334 != nil {
			Usage()
			return
		}
		value1 := argvalue1
		fmt.Print(client.DecrBy(value0, value1))
		fmt.Print("\n")
		break
	case "incrBy":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "IncrBy requires 2 args")
			flag.Usage()
		}
		arg335 := flag.Arg(1)
		mbTrans336 := thrift.NewMemoryBufferLen(len(arg335))
		defer mbTrans336.Close()
		_, err337 := mbTrans336.WriteString(arg335)
		if err337 != nil {
			Usage()
			return
		}
		factory338 := thrift.NewSimpleJSONProtocolFactory()
		jsProt339 := factory338.GetProtocol(mbTrans336)
		argvalue0 := laser.NewLaserKey()
		err340 := argvalue0.Read(jsProt339)
		if err340 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		argvalue1, err341 := (strconv.ParseInt(flag.Arg(2), 10, 64))
		if err341 != nil {
			Usage()
			return
		}
		value1 := argvalue1
		fmt.Print(client.IncrBy(value0, value1))
		fmt.Print("\n")
		break
	case "hdel":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "Hdel requires 2 args")
			flag.Usage()
		}
		arg342 := flag.Arg(1)
		mbTrans343 := thrift.NewMemoryBufferLen(len(arg342))
		defer mbTrans343.Close()
		_, err344 := mbTrans343.WriteString(arg342)
		if err344 != nil {
			Usage()
			return
		}
		factory345 := thrift.NewSimpleJSONProtocolFactory()
		jsProt346 := factory345.GetProtocol(mbTrans343)
		argvalue0 := laser.NewLaserKey()
		err347 := argvalue0.Read(jsProt346)
		if err347 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.Hdel(value0, value1))
		fmt.Print("\n")
		break
	case "hexists":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "Hexists requires 2 args")
			flag.Usage()
		}
		arg349 := flag.Arg(1)
		mbTrans350 := thrift.NewMemoryBufferLen(len(arg349))
		defer mbTrans350.Close()
		_, err351 := mbTrans350.WriteString(arg349)
		if err351 != nil {
			Usage()
			return
		}
		factory352 := thrift.NewSimpleJSONProtocolFactory()
		jsProt353 := factory352.GetProtocol(mbTrans350)
		argvalue0 := laser.NewLaserKey()
		err354 := argvalue0.Read(jsProt353)
		if err354 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.Hexists(value0, value1))
		fmt.Print("\n")
		break
	case "hget":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "Hget requires 2 args")
			flag.Usage()
		}
		arg356 := flag.Arg(1)
		mbTrans357 := thrift.NewMemoryBufferLen(len(arg356))
		defer mbTrans357.Close()
		_, err358 := mbTrans357.WriteString(arg356)
		if err358 != nil {
			Usage()
			return
		}
		factory359 := thrift.NewSimpleJSONProtocolFactory()
		jsProt360 := factory359.GetProtocol(mbTrans357)
		argvalue0 := laser.NewLaserKey()
		err361 := argvalue0.Read(jsProt360)
		if err361 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.Hget(value0, value1))
		fmt.Print("\n")
		break
	case "hset":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "Hset requires 3 args")
			flag.Usage()
		}
		arg363 := flag.Arg(1)
		mbTrans364 := thrift.NewMemoryBufferLen(len(arg363))
		defer mbTrans364.Close()
		_, err365 := mbTrans364.WriteString(arg363)
		if err365 != nil {
			Usage()
			return
		}
		factory366 := thrift.NewSimpleJSONProtocolFactory()
		jsProt367 := factory366.GetProtocol(mbTrans364)
		argvalue0 := laser.NewLaserKey()
		err368 := argvalue0.Read(jsProt367)
		if err368 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		fmt.Print(client.Hset(value0, value1, value2))
		fmt.Print("\n")
		break
	case "hgetall":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "Hgetall requires 1 args")
			flag.Usage()
		}
		arg371 := flag.Arg(1)
		mbTrans372 := thrift.NewMemoryBufferLen(len(arg371))
		defer mbTrans372.Close()
		_, err373 := mbTrans372.WriteString(arg371)
		if err373 != nil {
			Usage()
			return
		}
		factory374 := thrift.NewSimpleJSONProtocolFactory()
		jsProt375 := factory374.GetProtocol(mbTrans372)
		argvalue0 := laser.NewLaserKey()
		err376 := argvalue0.Read(jsProt375)
		if err376 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.Hgetall(value0))
		fmt.Print("\n")
		break
	case "hkeys":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "Hkeys requires 1 args")
			flag.Usage()
		}
		arg377 := flag.Arg(1)
		mbTrans378 := thrift.NewMemoryBufferLen(len(arg377))
		defer mbTrans378.Close()
		_, err379 := mbTrans378.WriteString(arg377)
		if err379 != nil {
			Usage()
			return
		}
		factory380 := thrift.NewSimpleJSONProtocolFactory()
		jsProt381 := factory380.GetProtocol(mbTrans378)
		argvalue0 := laser.NewLaserKey()
		err382 := argvalue0.Read(jsProt381)
		if err382 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.Hkeys(value0))
		fmt.Print("\n")
		break
	case "hlen":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "Hlen requires 1 args")
			flag.Usage()
		}
		arg383 := flag.Arg(1)
		mbTrans384 := thrift.NewMemoryBufferLen(len(arg383))
		defer mbTrans384.Close()
		_, err385 := mbTrans384.WriteString(arg383)
		if err385 != nil {
			Usage()
			return
		}
		factory386 := thrift.NewSimpleJSONProtocolFactory()
		jsProt387 := factory386.GetProtocol(mbTrans384)
		argvalue0 := laser.NewLaserKey()
		err388 := argvalue0.Read(jsProt387)
		if err388 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.Hlen(value0))
		fmt.Print("\n")
		break
	case "hmget":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "Hmget requires 2 args")
			flag.Usage()
		}
		arg389 := flag.Arg(1)
		mbTrans390 := thrift.NewMemoryBufferLen(len(arg389))
		defer mbTrans390.Close()
		_, err391 := mbTrans390.WriteString(arg389)
		if err391 != nil {
			Usage()
			return
		}
		factory392 := thrift.NewSimpleJSONProtocolFactory()
		jsProt393 := factory392.GetProtocol(mbTrans390)
		argvalue0 := laser.NewLaserKey()
		err394 := argvalue0.Read(jsProt393)
		if err394 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		arg395 := flag.Arg(2)
		mbTrans396 := thrift.NewMemoryBufferLen(len(arg395))
		defer mbTrans396.Close()
		_, err397 := mbTrans396.WriteString(arg395)
		if err397 != nil {
			Usage()
			return
		}
		factory398 := thrift.NewSimpleJSONProtocolFactory()
		jsProt399 := factory398.GetProtocol(mbTrans396)
		containerStruct1 := laser.NewLaserServiceHmgetArgs()
		err400 := containerStruct1.ReadField2(jsProt399)
		if err400 != nil {
			Usage()
			return
		}
		argvalue1 := containerStruct1.Fields
		value1 := argvalue1
		fmt.Print(client.Hmget(value0, value1))
		fmt.Print("\n")
		break
	case "hmset":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "Hmset requires 2 args")
			flag.Usage()
		}
		arg401 := flag.Arg(1)
		mbTrans402 := thrift.NewMemoryBufferLen(len(arg401))
		defer mbTrans402.Close()
		_, err403 := mbTrans402.WriteString(arg401)
		if err403 != nil {
			Usage()
			return
		}
		factory404 := thrift.NewSimpleJSONProtocolFactory()
		jsProt405 := factory404.GetProtocol(mbTrans402)
		argvalue0 := laser.NewLaserKey()
		err406 := argvalue0.Read(jsProt405)
		if err406 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		arg407 := flag.Arg(2)
		mbTrans408 := thrift.NewMemoryBufferLen(len(arg407))
		defer mbTrans408.Close()
		_, err409 := mbTrans408.WriteString(arg407)
		if err409 != nil {
			Usage()
			return
		}
		factory410 := thrift.NewSimpleJSONProtocolFactory()
		jsProt411 := factory410.GetProtocol(mbTrans408)
		argvalue1 := laser.NewLaserValue()
		err412 := argvalue1.Read(jsProt411)
		if err412 != nil {
			Usage()
			return
		}
		value1 := argvalue1
		fmt.Print(client.Hmset(value0, value1))
		fmt.Print("\n")
		break
	case "lindex":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "Lindex requires 2 args")
			flag.Usage()
		}
		arg413 := flag.Arg(1)
		mbTrans414 := thrift.NewMemoryBufferLen(len(arg413))
		defer mbTrans414.Close()
		_, err415 := mbTrans414.WriteString(arg413)
		if err415 != nil {
			Usage()
			return
		}
		factory416 := thrift.NewSimpleJSONProtocolFactory()
		jsProt417 := factory416.GetProtocol(mbTrans414)
		argvalue0 := laser.NewLaserKey()
		err418 := argvalue0.Read(jsProt417)
		if err418 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		tmp1, err419 := (strconv.Atoi(flag.Arg(2)))
		if err419 != nil {
			Usage()
			return
		}
		argvalue1 := int32(tmp1)
		value1 := argvalue1
		fmt.Print(client.Lindex(value0, value1))
		fmt.Print("\n")
		break
	case "llen":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "Llen requires 1 args")
			flag.Usage()
		}
		arg420 := flag.Arg(1)
		mbTrans421 := thrift.NewMemoryBufferLen(len(arg420))
		defer mbTrans421.Close()
		_, err422 := mbTrans421.WriteString(arg420)
		if err422 != nil {
			Usage()
			return
		}
		factory423 := thrift.NewSimpleJSONProtocolFactory()
		jsProt424 := factory423.GetProtocol(mbTrans421)
		argvalue0 := laser.NewLaserKey()
		err425 := argvalue0.Read(jsProt424)
		if err425 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.Llen(value0))
		fmt.Print("\n")
		break
	case "lpop":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "Lpop requires 1 args")
			flag.Usage()
		}
		arg426 := flag.Arg(1)
		mbTrans427 := thrift.NewMemoryBufferLen(len(arg426))
		defer mbTrans427.Close()
		_, err428 := mbTrans427.WriteString(arg426)
		if err428 != nil {
			Usage()
			return
		}
		factory429 := thrift.NewSimpleJSONProtocolFactory()
		jsProt430 := factory429.GetProtocol(mbTrans427)
		argvalue0 := laser.NewLaserKey()
		err431 := argvalue0.Read(jsProt430)
		if err431 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.Lpop(value0))
		fmt.Print("\n")
		break
	case "lpush":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "Lpush requires 2 args")
			flag.Usage()
		}
		arg432 := flag.Arg(1)
		mbTrans433 := thrift.NewMemoryBufferLen(len(arg432))
		defer mbTrans433.Close()
		_, err434 := mbTrans433.WriteString(arg432)
		if err434 != nil {
			Usage()
			return
		}
		factory435 := thrift.NewSimpleJSONProtocolFactory()
		jsProt436 := factory435.GetProtocol(mbTrans433)
		argvalue0 := laser.NewLaserKey()
		err437 := argvalue0.Read(jsProt436)
		if err437 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.Lpush(value0, value1))
		fmt.Print("\n")
		break
	case "lrange":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "Lrange requires 3 args")
			flag.Usage()
		}
		arg439 := flag.Arg(1)
		mbTrans440 := thrift.NewMemoryBufferLen(len(arg439))
		defer mbTrans440.Close()
		_, err441 := mbTrans440.WriteString(arg439)
		if err441 != nil {
			Usage()
			return
		}
		factory442 := thrift.NewSimpleJSONProtocolFactory()
		jsProt443 := factory442.GetProtocol(mbTrans440)
		argvalue0 := laser.NewLaserKey()
		err444 := argvalue0.Read(jsProt443)
		if err444 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		tmp1, err445 := (strconv.Atoi(flag.Arg(2)))
		if err445 != nil {
			Usage()
			return
		}
		argvalue1 := int32(tmp1)
		value1 := argvalue1
		tmp2, err446 := (strconv.Atoi(flag.Arg(3)))
		if err446 != nil {
			Usage()
			return
		}
		argvalue2 := int32(tmp2)
		value2 := argvalue2
		fmt.Print(client.Lrange(value0, value1, value2))
		fmt.Print("\n")
		break
	case "rpop":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "Rpop requires 1 args")
			flag.Usage()
		}
		arg447 := flag.Arg(1)
		mbTrans448 := thrift.NewMemoryBufferLen(len(arg447))
		defer mbTrans448.Close()
		_, err449 := mbTrans448.WriteString(arg447)
		if err449 != nil {
			Usage()
			return
		}
		factory450 := thrift.NewSimpleJSONProtocolFactory()
		jsProt451 := factory450.GetProtocol(mbTrans448)
		argvalue0 := laser.NewLaserKey()
		err452 := argvalue0.Read(jsProt451)
		if err452 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.Rpop(value0))
		fmt.Print("\n")
		break
	case "rpush":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "Rpush requires 2 args")
			flag.Usage()
		}
		arg453 := flag.Arg(1)
		mbTrans454 := thrift.NewMemoryBufferLen(len(arg453))
		defer mbTrans454.Close()
		_, err455 := mbTrans454.WriteString(arg453)
		if err455 != nil {
			Usage()
			return
		}
		factory456 := thrift.NewSimpleJSONProtocolFactory()
		jsProt457 := factory456.GetProtocol(mbTrans454)
		argvalue0 := laser.NewLaserKey()
		err458 := argvalue0.Read(jsProt457)
		if err458 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.Rpush(value0, value1))
		fmt.Print("\n")
		break
	case "sadd":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "Sadd requires 2 args")
			flag.Usage()
		}
		arg460 := flag.Arg(1)
		mbTrans461 := thrift.NewMemoryBufferLen(len(arg460))
		defer mbTrans461.Close()
		_, err462 := mbTrans461.WriteString(arg460)
		if err462 != nil {
			Usage()
			return
		}
		factory463 := thrift.NewSimpleJSONProtocolFactory()
		jsProt464 := factory463.GetProtocol(mbTrans461)
		argvalue0 := laser.NewLaserKey()
		err465 := argvalue0.Read(jsProt464)
		if err465 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.Sadd(value0, value1))
		fmt.Print("\n")
		break
	case "scard":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "Scard requires 1 args")
			flag.Usage()
		}
		arg467 := flag.Arg(1)
		mbTrans468 := thrift.NewMemoryBufferLen(len(arg467))
		defer mbTrans468.Close()
		_, err469 := mbTrans468.WriteString(arg467)
		if err469 != nil {
			Usage()
			return
		}
		factory470 := thrift.NewSimpleJSONProtocolFactory()
		jsProt471 := factory470.GetProtocol(mbTrans468)
		argvalue0 := laser.NewLaserKey()
		err472 := argvalue0.Read(jsProt471)
		if err472 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.Scard(value0))
		fmt.Print("\n")
		break
	case "sismember":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "Sismember requires 2 args")
			flag.Usage()
		}
		arg473 := flag.Arg(1)
		mbTrans474 := thrift.NewMemoryBufferLen(len(arg473))
		defer mbTrans474.Close()
		_, err475 := mbTrans474.WriteString(arg473)
		if err475 != nil {
			Usage()
			return
		}
		factory476 := thrift.NewSimpleJSONProtocolFactory()
		jsProt477 := factory476.GetProtocol(mbTrans474)
		argvalue0 := laser.NewLaserKey()
		err478 := argvalue0.Read(jsProt477)
		if err478 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.Sismember(value0, value1))
		fmt.Print("\n")
		break
	case "sremove":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "Sremove requires 2 args")
			flag.Usage()
		}
		arg480 := flag.Arg(1)
		mbTrans481 := thrift.NewMemoryBufferLen(len(arg480))
		defer mbTrans481.Close()
		_, err482 := mbTrans481.WriteString(arg480)
		if err482 != nil {
			Usage()
			return
		}
		factory483 := thrift.NewSimpleJSONProtocolFactory()
		jsProt484 := factory483.GetProtocol(mbTrans481)
		argvalue0 := laser.NewLaserKey()
		err485 := argvalue0.Read(jsProt484)
		if err485 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.Sremove(value0, value1))
		fmt.Print("\n")
		break
	case "smembers":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "Smembers requires 1 args")
			flag.Usage()
		}
		arg487 := flag.Arg(1)
		mbTrans488 := thrift.NewMemoryBufferLen(len(arg487))
		defer mbTrans488.Close()
		_, err489 := mbTrans488.WriteString(arg487)
		if err489 != nil {
			Usage()
			return
		}
		factory490 := thrift.NewSimpleJSONProtocolFactory()
		jsProt491 := factory490.GetProtocol(mbTrans488)
		argvalue0 := laser.NewLaserKey()
		err492 := argvalue0.Read(jsProt491)
		if err492 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.Smembers(value0))
		fmt.Print("\n")
		break
	case "zadd":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "Zadd requires 2 args")
			flag.Usage()
		}
		arg493 := flag.Arg(1)
		mbTrans494 := thrift.NewMemoryBufferLen(len(arg493))
		defer mbTrans494.Close()
		_, err495 := mbTrans494.WriteString(arg493)
		if err495 != nil {
			Usage()
			return
		}
		factory496 := thrift.NewSimpleJSONProtocolFactory()
		jsProt497 := factory496.GetProtocol(mbTrans494)
		argvalue0 := laser.NewLaserKey()
		err498 := argvalue0.Read(jsProt497)
		if err498 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		arg499 := flag.Arg(2)
		mbTrans500 := thrift.NewMemoryBufferLen(len(arg499))
		defer mbTrans500.Close()
		_, err501 := mbTrans500.WriteString(arg499)
		if err501 != nil {
			Usage()
			return
		}
		factory502 := thrift.NewSimpleJSONProtocolFactory()
		jsProt503 := factory502.GetProtocol(mbTrans500)
		argvalue1 := laser.NewLaserValue()
		err504 := argvalue1.Read(jsProt503)
		if err504 != nil {
			Usage()
			return
		}
		value1 := argvalue1
		fmt.Print(client.Zadd(value0, value1))
		fmt.Print("\n")
		break
	case "zcard":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "Zcard requires 1 args")
			flag.Usage()
		}
		arg505 := flag.Arg(1)
		mbTrans506 := thrift.NewMemoryBufferLen(len(arg505))
		defer mbTrans506.Close()
		_, err507 := mbTrans506.WriteString(arg505)
		if err507 != nil {
			Usage()
			return
		}
		factory508 := thrift.NewSimpleJSONProtocolFactory()
		jsProt509 := factory508.GetProtocol(mbTrans506)
		argvalue0 := laser.NewLaserKey()
		err510 := argvalue0.Read(jsProt509)
		if err510 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.Zcard(value0))
		fmt.Print("\n")
		break
	case "zrank":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "Zrank requires 2 args")
			flag.Usage()
		}
		arg511 := flag.Arg(1)
		mbTrans512 := thrift.NewMemoryBufferLen(len(arg511))
		defer mbTrans512.Close()
		_, err513 := mbTrans512.WriteString(arg511)
		if err513 != nil {
			Usage()
			return
		}
		factory514 := thrift.NewSimpleJSONProtocolFactory()
		jsProt515 := factory514.GetProtocol(mbTrans512)
		argvalue0 := laser.NewLaserKey()
		err516 := argvalue0.Read(jsProt515)
		if err516 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.Zrank(value0, value1))
		fmt.Print("\n")
		break
	case "zscore":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "Zscore requires 2 args")
			flag.Usage()
		}
		arg518 := flag.Arg(1)
		mbTrans519 := thrift.NewMemoryBufferLen(len(arg518))
		defer mbTrans519.Close()
		_, err520 := mbTrans519.WriteString(arg518)
		if err520 != nil {
			Usage()
			return
		}
		factory521 := thrift.NewSimpleJSONProtocolFactory()
		jsProt522 := factory521.GetProtocol(mbTrans519)
		argvalue0 := laser.NewLaserKey()
		err523 := argvalue0.Read(jsProt522)
		if err523 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.Zscore(value0, value1))
		fmt.Print("\n")
		break
	case "zrem":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "Zrem requires 2 args")
			flag.Usage()
		}
		arg525 := flag.Arg(1)
		mbTrans526 := thrift.NewMemoryBufferLen(len(arg525))
		defer mbTrans526.Close()
		_, err527 := mbTrans526.WriteString(arg525)
		if err527 != nil {
			Usage()
			return
		}
		factory528 := thrift.NewSimpleJSONProtocolFactory()
		jsProt529 := factory528.GetProtocol(mbTrans526)
		argvalue0 := laser.NewLaserKey()
		err530 := argvalue0.Read(jsProt529)
		if err530 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.Zrem(value0, value1))
		fmt.Print("\n")
		break
	case "zrange":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "Zrange requires 3 args")
			flag.Usage()
		}
		arg532 := flag.Arg(1)
		mbTrans533 := thrift.NewMemoryBufferLen(len(arg532))
		defer mbTrans533.Close()
		_, err534 := mbTrans533.WriteString(arg532)
		if err534 != nil {
			Usage()
			return
		}
		factory535 := thrift.NewSimpleJSONProtocolFactory()
		jsProt536 := factory535.GetProtocol(mbTrans533)
		argvalue0 := laser.NewLaserKey()
		err537 := argvalue0.Read(jsProt536)
		if err537 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		argvalue1, err538 := (strconv.ParseInt(flag.Arg(2), 10, 64))
		if err538 != nil {
			Usage()
			return
		}
		value1 := argvalue1
		argvalue2, err539 := (strconv.ParseInt(flag.Arg(3), 10, 64))
		if err539 != nil {
			Usage()
			return
		}
		value2 := argvalue2
		fmt.Print(client.Zrange(value0, value1, value2))
		fmt.Print("\n")
		break
	case "zrangeByScore":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "ZrangeByScore requires 3 args")
			flag.Usage()
		}
		arg540 := flag.Arg(1)
		mbTrans541 := thrift.NewMemoryBufferLen(len(arg540))
		defer mbTrans541.Close()
		_, err542 := mbTrans541.WriteString(arg540)
		if err542 != nil {
			Usage()
			return
		}
		factory543 := thrift.NewSimpleJSONProtocolFactory()
		jsProt544 := factory543.GetProtocol(mbTrans541)
		argvalue0 := laser.NewLaserKey()
		err545 := argvalue0.Read(jsProt544)
		if err545 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		argvalue1, err546 := (strconv.ParseInt(flag.Arg(2), 10, 64))
		if err546 != nil {
			Usage()
			return
		}
		value1 := argvalue1
		argvalue2, err547 := (strconv.ParseInt(flag.Arg(3), 10, 64))
		if err547 != nil {
			Usage()
			return
		}
		value2 := argvalue2
		fmt.Print(client.ZrangeByScore(value0, value1, value2))
		fmt.Print("\n")
		break
	case "zremRangeByScore":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "ZremRangeByScore requires 3 args")
			flag.Usage()
		}
		arg548 := flag.Arg(1)
		mbTrans549 := thrift.NewMemoryBufferLen(len(arg548))
		defer mbTrans549.Close()
		_, err550 := mbTrans549.WriteString(arg548)
		if err550 != nil {
			Usage()
			return
		}
		factory551 := thrift.NewSimpleJSONProtocolFactory()
		jsProt552 := factory551.GetProtocol(mbTrans549)
		argvalue0 := laser.NewLaserKey()
		err553 := argvalue0.Read(jsProt552)
		if err553 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		argvalue1, err554 := (strconv.ParseInt(flag.Arg(2), 10, 64))
		if err554 != nil {
			Usage()
			return
		}
		value1 := argvalue1
		argvalue2, err555 := (strconv.ParseInt(flag.Arg(3), 10, 64))
		if err555 != nil {
			Usage()
			return
		}
		value2 := argvalue2
		fmt.Print(client.ZremRangeByScore(value0, value1, value2))
		fmt.Print("\n")
		break
	case "":
		Usage()
		break
	default:
		fmt.Fprintln(os.Stderr, "Invalid function ", cmd)
	}
}
