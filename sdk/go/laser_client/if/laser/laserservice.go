// Autogenerated by Thrift Compiler (facebook)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
// @generated

package laser

import (
	"bytes"
	"fmt"
	"math"
	"sync"

	"github.com/facebook/fbthrift/thrift/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = sync.Mutex{}
var _ = bytes.Equal

type LaserService interface {
	// Parameters:
	//  - Key
	Delkey(key *LaserKey) (r *LaserResponse, err error)
	// Parameters:
	//  - Key
	Exists(key *LaserKey) (r *LaserResponse, err error)
	// Parameters:
	//  - Key
	//  - Time
	Expire(key *LaserKey, time int64) (r *LaserResponse, err error)
	// Parameters:
	//  - Key
	//  - TimeAt
	ExpireAt(key *LaserKey, time_at int64) (r *LaserResponse, err error)
	// Parameters:
	//  - Key
	Ttl(key *LaserKey) (r *LaserResponse, err error)
	// Parameters:
	//  - Key
	//  - Value
	Append(key *LaserKey, value string) (r *LaserResponse, err error)
	// Parameters:
	//  - Key
	Get(key *LaserKey) (r *LaserResponse, err error)
	// Parameters:
	//  - Kv
	Sset(kv *LaserKV) (r *LaserResponse, err error)
	// Parameters:
	//  - Kv
	//  - Option
	Setx(kv *LaserKV, option *LaserSetOption) (r *LaserResponse, err error)
	// Parameters:
	//  - Keys
	Mget(keys *LaserKeys) (r *LaserResponse, err error)
	// Parameters:
	//  - Values
	Mset(values *LaserKVs) (r *LaserResponse, err error)
	// Parameters:
	//  - Keys
	MgetDetail(keys *LaserKeys) (r *LaserResponse, err error)
	// Parameters:
	//  - Values
	//  - Option
	MsetDetail(values *LaserKVs, option *LaserSetOption) (r *LaserResponse, err error)
	// Parameters:
	//  - Keys
	Mdel(keys *LaserKeys) (r *LaserResponse, err error)
	// Parameters:
	//  - Key
	Exist(key *LaserKey) (r *LaserResponse, err error)
	// Parameters:
	//  - Key
	Decr(key *LaserKey) (r *LaserResponse, err error)
	// Parameters:
	//  - Key
	Incr(key *LaserKey) (r *LaserResponse, err error)
	// Parameters:
	//  - Key
	//  - Step
	DecrBy(key *LaserKey, step int64) (r *LaserResponse, err error)
	// Parameters:
	//  - Key
	//  - Step
	IncrBy(key *LaserKey, step int64) (r *LaserResponse, err error)
	// Parameters:
	//  - Key
	//  - Field
	Hdel(key *LaserKey, field string) (r *LaserResponse, err error)
	// Parameters:
	//  - Key
	//  - Field
	Hexists(key *LaserKey, field string) (r *LaserResponse, err error)
	// Parameters:
	//  - Key
	//  - Field
	Hget(key *LaserKey, field string) (r *LaserResponse, err error)
	// Parameters:
	//  - Key
	//  - Field
	//  - Value
	Hset(key *LaserKey, field string, value string) (r *LaserResponse, err error)
	// Parameters:
	//  - Key
	Hgetall(key *LaserKey) (r *LaserResponse, err error)
	// Parameters:
	//  - Key
	Hkeys(key *LaserKey) (r *LaserResponse, err error)
	// Parameters:
	//  - Key
	Hlen(key *LaserKey) (r *LaserResponse, err error)
	// Parameters:
	//  - Key
	//  - Fields
	Hmget(key *LaserKey, fields []string) (r *LaserResponse, err error)
	// Parameters:
	//  - Key
	//  - Value
	Hmset(key *LaserKey, value *LaserValue) (r *LaserResponse, err error)
	// Parameters:
	//  - Key
	//  - Index
	Lindex(key *LaserKey, index int32) (r *LaserResponse, err error)
	// Parameters:
	//  - Key
	Llen(key *LaserKey) (r *LaserResponse, err error)
	// Parameters:
	//  - Key
	Lpop(key *LaserKey) (r *LaserResponse, err error)
	// Parameters:
	//  - Key
	//  - Value
	Lpush(key *LaserKey, value string) (r *LaserResponse, err error)
	// Parameters:
	//  - Key
	//  - Start
	//  - End
	Lrange(key *LaserKey, start int32, end int32) (r *LaserResponse, err error)
	// Parameters:
	//  - Key
	Rpop(key *LaserKey) (r *LaserResponse, err error)
	// Parameters:
	//  - Key
	//  - Value
	Rpush(key *LaserKey, value string) (r *LaserResponse, err error)
	// Parameters:
	//  - Key
	//  - Member
	Sadd(key *LaserKey, member string) (r *LaserResponse, err error)
	// Parameters:
	//  - Req
	Scard(req *LaserKey) (r *LaserResponse, err error)
	// Parameters:
	//  - Req
	//  - Member
	Sismember(req *LaserKey, member string) (r *LaserResponse, err error)
	// Parameters:
	//  - Req
	//  - Member
	Sremove(req *LaserKey, member string) (r *LaserResponse, err error)
	// Parameters:
	//  - Req
	Smembers(req *LaserKey) (r *LaserResponse, err error)
	// Parameters:
	//  - Key
	//  - MemberScore
	Zadd(key *LaserKey, member_score *LaserValue) (r *LaserResponse, err error)
	// Parameters:
	//  - Key
	Zcard(key *LaserKey) (r *LaserResponse, err error)
	// Parameters:
	//  - Key
	//  - Member
	Zrank(key *LaserKey, member string) (r *LaserResponse, err error)
	// Parameters:
	//  - Key
	//  - Member
	Zscore(key *LaserKey, member string) (r *LaserResponse, err error)
	// Parameters:
	//  - Key
	//  - Member
	Zrem(key *LaserKey, member string) (r *LaserResponse, err error)
	// Parameters:
	//  - Key
	//  - Start
	//  - Stop
	Zrange(key *LaserKey, start int64, stop int64) (r *LaserResponse, err error)
	// Parameters:
	//  - Key
	//  - Min
	//  - Max
	ZrangeByScore(key *LaserKey, min int64, max int64) (r *LaserResponse, err error)
	// Parameters:
	//  - Key
	//  - Min
	//  - Max
	ZremRangeByScore(key *LaserKey, min int64, max int64) (r *LaserResponse, err error)
}

type LaserServiceClient struct {
	Transport       thrift.Transport
	ProtocolFactory thrift.ProtocolFactory
	InputProtocol   thrift.Protocol
	OutputProtocol  thrift.Protocol
	SeqId           int32
}

func (client *LaserServiceClient) Close() error {
	return client.Transport.Close()
}

func NewLaserServiceClientFactory(t thrift.Transport, f thrift.ProtocolFactory) *LaserServiceClient {
	return &LaserServiceClient{Transport: t,
		ProtocolFactory: f,
		InputProtocol:   f.GetProtocol(t),
		OutputProtocol:  f.GetProtocol(t),
		SeqId:           0,
	}
}

func NewLaserServiceClient(t thrift.Transport, iprot thrift.Protocol, oprot thrift.Protocol) *LaserServiceClient {
	return &LaserServiceClient{Transport: t,
		ProtocolFactory: nil,
		InputProtocol:   iprot,
		OutputProtocol:  oprot,
		SeqId:           0,
	}
}

// Parameters:
//  - Key
func (p *LaserServiceClient) Delkey(key *LaserKey) (r *LaserResponse, err error) {
	if err = p.sendDelkey(key); err != nil {
		return
	}
	return p.recvDelkey()
}

func (p *LaserServiceClient) sendDelkey(key *LaserKey) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("delkey", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := LaserServiceDelkeyArgs{
		Key: key,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *LaserServiceClient) recvDelkey() (value *LaserResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "delkey" {
		err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "delkey failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "delkey failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error16 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error17 error
		error17, err = error16.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error17
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "delkey failed: invalid message type")
		return
	}
	result := LaserServiceDelkeyResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Key
func (p *LaserServiceClient) Exists(key *LaserKey) (r *LaserResponse, err error) {
	if err = p.sendExists(key); err != nil {
		return
	}
	return p.recvExists()
}

func (p *LaserServiceClient) sendExists(key *LaserKey) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("exists", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := LaserServiceExistsArgs{
		Key: key,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *LaserServiceClient) recvExists() (value *LaserResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "exists" {
		err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "exists failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "exists failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error18 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error19 error
		error19, err = error18.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error19
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "exists failed: invalid message type")
		return
	}
	result := LaserServiceExistsResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Key
//  - Time
func (p *LaserServiceClient) Expire(key *LaserKey, time int64) (r *LaserResponse, err error) {
	if err = p.sendExpire(key, time); err != nil {
		return
	}
	return p.recvExpire()
}

func (p *LaserServiceClient) sendExpire(key *LaserKey, time int64) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("expire", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := LaserServiceExpireArgs{
		Key:  key,
		Time: time,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *LaserServiceClient) recvExpire() (value *LaserResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "expire" {
		err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "expire failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "expire failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error20 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error21 error
		error21, err = error20.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error21
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "expire failed: invalid message type")
		return
	}
	result := LaserServiceExpireResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Key
//  - TimeAt
func (p *LaserServiceClient) ExpireAt(key *LaserKey, time_at int64) (r *LaserResponse, err error) {
	if err = p.sendExpireAt(key, time_at); err != nil {
		return
	}
	return p.recvExpireAt()
}

func (p *LaserServiceClient) sendExpireAt(key *LaserKey, time_at int64) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("expireAt", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := LaserServiceExpireAtArgs{
		Key:    key,
		TimeAt: time_at,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *LaserServiceClient) recvExpireAt() (value *LaserResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "expireAt" {
		err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "expireAt failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "expireAt failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error22 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error23 error
		error23, err = error22.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error23
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "expireAt failed: invalid message type")
		return
	}
	result := LaserServiceExpireAtResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Key
func (p *LaserServiceClient) Ttl(key *LaserKey) (r *LaserResponse, err error) {
	if err = p.sendTtl(key); err != nil {
		return
	}
	return p.recvTtl()
}

func (p *LaserServiceClient) sendTtl(key *LaserKey) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("ttl", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := LaserServiceTtlArgs{
		Key: key,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *LaserServiceClient) recvTtl() (value *LaserResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "ttl" {
		err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "ttl failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "ttl failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error24 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error25 error
		error25, err = error24.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error25
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "ttl failed: invalid message type")
		return
	}
	result := LaserServiceTtlResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Key
//  - Value
func (p *LaserServiceClient) Append(key *LaserKey, value string) (r *LaserResponse, err error) {
	if err = p.sendAppend(key, value); err != nil {
		return
	}
	return p.recvAppend()
}

func (p *LaserServiceClient) sendAppend(key *LaserKey, value string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("append", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := LaserServiceAppendArgs{
		Key:   key,
		Value: value,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *LaserServiceClient) recvAppend() (value *LaserResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "append" {
		err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "append failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "append failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error26 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error27 error
		error27, err = error26.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error27
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "append failed: invalid message type")
		return
	}
	result := LaserServiceAppendResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Key
func (p *LaserServiceClient) Get(key *LaserKey) (r *LaserResponse, err error) {
	if err = p.sendGet(key); err != nil {
		return
	}
	return p.recvGet()
}

func (p *LaserServiceClient) sendGet(key *LaserKey) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("get", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := LaserServiceGetArgs{
		Key: key,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *LaserServiceClient) recvGet() (value *LaserResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "get" {
		err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "get failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "get failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error28 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error29 error
		error29, err = error28.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error29
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "get failed: invalid message type")
		return
	}
	result := LaserServiceGetResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Kv
func (p *LaserServiceClient) Sset(kv *LaserKV) (r *LaserResponse, err error) {
	if err = p.sendSset(kv); err != nil {
		return
	}
	return p.recvSset()
}

func (p *LaserServiceClient) sendSset(kv *LaserKV) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("sset", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := LaserServiceSsetArgs{
		Kv: kv,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *LaserServiceClient) recvSset() (value *LaserResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "sset" {
		err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "sset failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "sset failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error30 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error31 error
		error31, err = error30.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error31
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "sset failed: invalid message type")
		return
	}
	result := LaserServiceSsetResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Kv
//  - Option
func (p *LaserServiceClient) Setx(kv *LaserKV, option *LaserSetOption) (r *LaserResponse, err error) {
	if err = p.sendSetx(kv, option); err != nil {
		return
	}
	return p.recvSetx()
}

func (p *LaserServiceClient) sendSetx(kv *LaserKV, option *LaserSetOption) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("setx", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := LaserServiceSetxArgs{
		Kv:     kv,
		Option: option,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *LaserServiceClient) recvSetx() (value *LaserResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "setx" {
		err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "setx failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "setx failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error32 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error33 error
		error33, err = error32.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error33
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "setx failed: invalid message type")
		return
	}
	result := LaserServiceSetxResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Keys
func (p *LaserServiceClient) Mget(keys *LaserKeys) (r *LaserResponse, err error) {
	if err = p.sendMget(keys); err != nil {
		return
	}
	return p.recvMget()
}

func (p *LaserServiceClient) sendMget(keys *LaserKeys) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("mget", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := LaserServiceMgetArgs{
		Keys: keys,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *LaserServiceClient) recvMget() (value *LaserResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "mget" {
		err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "mget failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "mget failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error34 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error35 error
		error35, err = error34.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error35
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "mget failed: invalid message type")
		return
	}
	result := LaserServiceMgetResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Values
func (p *LaserServiceClient) Mset(values *LaserKVs) (r *LaserResponse, err error) {
	if err = p.sendMset(values); err != nil {
		return
	}
	return p.recvMset()
}

func (p *LaserServiceClient) sendMset(values *LaserKVs) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("mset", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := LaserServiceMsetArgs{
		Values: values,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *LaserServiceClient) recvMset() (value *LaserResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "mset" {
		err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "mset failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "mset failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error36 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error37 error
		error37, err = error36.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error37
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "mset failed: invalid message type")
		return
	}
	result := LaserServiceMsetResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Keys
func (p *LaserServiceClient) MgetDetail(keys *LaserKeys) (r *LaserResponse, err error) {
	if err = p.sendMgetDetail(keys); err != nil {
		return
	}
	return p.recvMgetDetail()
}

func (p *LaserServiceClient) sendMgetDetail(keys *LaserKeys) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("mgetDetail", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := LaserServiceMgetDetailArgs{
		Keys: keys,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *LaserServiceClient) recvMgetDetail() (value *LaserResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "mgetDetail" {
		err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "mgetDetail failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "mgetDetail failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error38 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error39 error
		error39, err = error38.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error39
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "mgetDetail failed: invalid message type")
		return
	}
	result := LaserServiceMgetDetailResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Values
//  - Option
func (p *LaserServiceClient) MsetDetail(values *LaserKVs, option *LaserSetOption) (r *LaserResponse, err error) {
	if err = p.sendMsetDetail(values, option); err != nil {
		return
	}
	return p.recvMsetDetail()
}

func (p *LaserServiceClient) sendMsetDetail(values *LaserKVs, option *LaserSetOption) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("msetDetail", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := LaserServiceMsetDetailArgs{
		Values: values,
		Option: option,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *LaserServiceClient) recvMsetDetail() (value *LaserResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "msetDetail" {
		err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "msetDetail failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "msetDetail failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error40 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error41 error
		error41, err = error40.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error41
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "msetDetail failed: invalid message type")
		return
	}
	result := LaserServiceMsetDetailResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Keys
func (p *LaserServiceClient) Mdel(keys *LaserKeys) (r *LaserResponse, err error) {
	if err = p.sendMdel(keys); err != nil {
		return
	}
	return p.recvMdel()
}

func (p *LaserServiceClient) sendMdel(keys *LaserKeys) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("mdel", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := LaserServiceMdelArgs{
		Keys: keys,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *LaserServiceClient) recvMdel() (value *LaserResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "mdel" {
		err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "mdel failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "mdel failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error42 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error43 error
		error43, err = error42.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error43
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "mdel failed: invalid message type")
		return
	}
	result := LaserServiceMdelResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Key
func (p *LaserServiceClient) Exist(key *LaserKey) (r *LaserResponse, err error) {
	if err = p.sendExist(key); err != nil {
		return
	}
	return p.recvExist()
}

func (p *LaserServiceClient) sendExist(key *LaserKey) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("exist", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := LaserServiceExistArgs{
		Key: key,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *LaserServiceClient) recvExist() (value *LaserResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "exist" {
		err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "exist failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "exist failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error44 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error45 error
		error45, err = error44.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error45
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "exist failed: invalid message type")
		return
	}
	result := LaserServiceExistResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Key
func (p *LaserServiceClient) Decr(key *LaserKey) (r *LaserResponse, err error) {
	if err = p.sendDecr(key); err != nil {
		return
	}
	return p.recvDecr()
}

func (p *LaserServiceClient) sendDecr(key *LaserKey) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("decr", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := LaserServiceDecrArgs{
		Key: key,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *LaserServiceClient) recvDecr() (value *LaserResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "decr" {
		err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "decr failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "decr failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error46 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error47 error
		error47, err = error46.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error47
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "decr failed: invalid message type")
		return
	}
	result := LaserServiceDecrResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Key
func (p *LaserServiceClient) Incr(key *LaserKey) (r *LaserResponse, err error) {
	if err = p.sendIncr(key); err != nil {
		return
	}
	return p.recvIncr()
}

func (p *LaserServiceClient) sendIncr(key *LaserKey) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("incr", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := LaserServiceIncrArgs{
		Key: key,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *LaserServiceClient) recvIncr() (value *LaserResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "incr" {
		err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "incr failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "incr failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error48 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error49 error
		error49, err = error48.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error49
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "incr failed: invalid message type")
		return
	}
	result := LaserServiceIncrResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Key
//  - Step
func (p *LaserServiceClient) DecrBy(key *LaserKey, step int64) (r *LaserResponse, err error) {
	if err = p.sendDecrBy(key, step); err != nil {
		return
	}
	return p.recvDecrBy()
}

func (p *LaserServiceClient) sendDecrBy(key *LaserKey, step int64) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("decrBy", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := LaserServiceDecrByArgs{
		Key:  key,
		Step: step,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *LaserServiceClient) recvDecrBy() (value *LaserResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "decrBy" {
		err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "decrBy failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "decrBy failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error50 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error51 error
		error51, err = error50.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error51
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "decrBy failed: invalid message type")
		return
	}
	result := LaserServiceDecrByResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Key
//  - Step
func (p *LaserServiceClient) IncrBy(key *LaserKey, step int64) (r *LaserResponse, err error) {
	if err = p.sendIncrBy(key, step); err != nil {
		return
	}
	return p.recvIncrBy()
}

func (p *LaserServiceClient) sendIncrBy(key *LaserKey, step int64) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("incrBy", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := LaserServiceIncrByArgs{
		Key:  key,
		Step: step,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *LaserServiceClient) recvIncrBy() (value *LaserResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "incrBy" {
		err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "incrBy failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "incrBy failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error52 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error53 error
		error53, err = error52.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error53
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "incrBy failed: invalid message type")
		return
	}
	result := LaserServiceIncrByResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Key
//  - Field
func (p *LaserServiceClient) Hdel(key *LaserKey, field string) (r *LaserResponse, err error) {
	if err = p.sendHdel(key, field); err != nil {
		return
	}
	return p.recvHdel()
}

func (p *LaserServiceClient) sendHdel(key *LaserKey, field string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("hdel", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := LaserServiceHdelArgs{
		Key:   key,
		Field: field,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *LaserServiceClient) recvHdel() (value *LaserResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "hdel" {
		err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "hdel failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "hdel failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error54 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error55 error
		error55, err = error54.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error55
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "hdel failed: invalid message type")
		return
	}
	result := LaserServiceHdelResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Key
//  - Field
func (p *LaserServiceClient) Hexists(key *LaserKey, field string) (r *LaserResponse, err error) {
	if err = p.sendHexists(key, field); err != nil {
		return
	}
	return p.recvHexists()
}

func (p *LaserServiceClient) sendHexists(key *LaserKey, field string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("hexists", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := LaserServiceHexistsArgs{
		Key:   key,
		Field: field,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *LaserServiceClient) recvHexists() (value *LaserResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "hexists" {
		err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "hexists failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "hexists failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error56 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error57 error
		error57, err = error56.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error57
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "hexists failed: invalid message type")
		return
	}
	result := LaserServiceHexistsResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Key
//  - Field
func (p *LaserServiceClient) Hget(key *LaserKey, field string) (r *LaserResponse, err error) {
	if err = p.sendHget(key, field); err != nil {
		return
	}
	return p.recvHget()
}

func (p *LaserServiceClient) sendHget(key *LaserKey, field string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("hget", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := LaserServiceHgetArgs{
		Key:   key,
		Field: field,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *LaserServiceClient) recvHget() (value *LaserResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "hget" {
		err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "hget failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "hget failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error58 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error59 error
		error59, err = error58.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error59
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "hget failed: invalid message type")
		return
	}
	result := LaserServiceHgetResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Key
//  - Field
//  - Value
func (p *LaserServiceClient) Hset(key *LaserKey, field string, value string) (r *LaserResponse, err error) {
	if err = p.sendHset(key, field, value); err != nil {
		return
	}
	return p.recvHset()
}

func (p *LaserServiceClient) sendHset(key *LaserKey, field string, value string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("hset", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := LaserServiceHsetArgs{
		Key:   key,
		Field: field,
		Value: value,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *LaserServiceClient) recvHset() (value *LaserResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "hset" {
		err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "hset failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "hset failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error60 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error61 error
		error61, err = error60.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error61
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "hset failed: invalid message type")
		return
	}
	result := LaserServiceHsetResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Key
func (p *LaserServiceClient) Hgetall(key *LaserKey) (r *LaserResponse, err error) {
	if err = p.sendHgetall(key); err != nil {
		return
	}
	return p.recvHgetall()
}

func (p *LaserServiceClient) sendHgetall(key *LaserKey) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("hgetall", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := LaserServiceHgetallArgs{
		Key: key,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *LaserServiceClient) recvHgetall() (value *LaserResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "hgetall" {
		err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "hgetall failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "hgetall failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error62 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error63 error
		error63, err = error62.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error63
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "hgetall failed: invalid message type")
		return
	}
	result := LaserServiceHgetallResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Key
func (p *LaserServiceClient) Hkeys(key *LaserKey) (r *LaserResponse, err error) {
	if err = p.sendHkeys(key); err != nil {
		return
	}
	return p.recvHkeys()
}

func (p *LaserServiceClient) sendHkeys(key *LaserKey) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("hkeys", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := LaserServiceHkeysArgs{
		Key: key,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *LaserServiceClient) recvHkeys() (value *LaserResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "hkeys" {
		err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "hkeys failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "hkeys failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error64 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error65 error
		error65, err = error64.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error65
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "hkeys failed: invalid message type")
		return
	}
	result := LaserServiceHkeysResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Key
func (p *LaserServiceClient) Hlen(key *LaserKey) (r *LaserResponse, err error) {
	if err = p.sendHlen(key); err != nil {
		return
	}
	return p.recvHlen()
}

func (p *LaserServiceClient) sendHlen(key *LaserKey) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("hlen", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := LaserServiceHlenArgs{
		Key: key,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *LaserServiceClient) recvHlen() (value *LaserResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "hlen" {
		err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "hlen failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "hlen failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error66 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error67 error
		error67, err = error66.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error67
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "hlen failed: invalid message type")
		return
	}
	result := LaserServiceHlenResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Key
//  - Fields
func (p *LaserServiceClient) Hmget(key *LaserKey, fields []string) (r *LaserResponse, err error) {
	if err = p.sendHmget(key, fields); err != nil {
		return
	}
	return p.recvHmget()
}

func (p *LaserServiceClient) sendHmget(key *LaserKey, fields []string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("hmget", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := LaserServiceHmgetArgs{
		Key:    key,
		Fields: fields,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *LaserServiceClient) recvHmget() (value *LaserResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "hmget" {
		err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "hmget failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "hmget failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error68 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error69 error
		error69, err = error68.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error69
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "hmget failed: invalid message type")
		return
	}
	result := LaserServiceHmgetResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Key
//  - Value
func (p *LaserServiceClient) Hmset(key *LaserKey, value *LaserValue) (r *LaserResponse, err error) {
	if err = p.sendHmset(key, value); err != nil {
		return
	}
	return p.recvHmset()
}

func (p *LaserServiceClient) sendHmset(key *LaserKey, value *LaserValue) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("hmset", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := LaserServiceHmsetArgs{
		Key:   key,
		Value: value,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *LaserServiceClient) recvHmset() (value *LaserResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "hmset" {
		err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "hmset failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "hmset failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error70 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error71 error
		error71, err = error70.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error71
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "hmset failed: invalid message type")
		return
	}
	result := LaserServiceHmsetResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Key
//  - Index
func (p *LaserServiceClient) Lindex(key *LaserKey, index int32) (r *LaserResponse, err error) {
	if err = p.sendLindex(key, index); err != nil {
		return
	}
	return p.recvLindex()
}

func (p *LaserServiceClient) sendLindex(key *LaserKey, index int32) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("lindex", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := LaserServiceLindexArgs{
		Key:   key,
		Index: index,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *LaserServiceClient) recvLindex() (value *LaserResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "lindex" {
		err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "lindex failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "lindex failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error72 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error73 error
		error73, err = error72.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error73
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "lindex failed: invalid message type")
		return
	}
	result := LaserServiceLindexResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Key
func (p *LaserServiceClient) Llen(key *LaserKey) (r *LaserResponse, err error) {
	if err = p.sendLlen(key); err != nil {
		return
	}
	return p.recvLlen()
}

func (p *LaserServiceClient) sendLlen(key *LaserKey) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("llen", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := LaserServiceLlenArgs{
		Key: key,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *LaserServiceClient) recvLlen() (value *LaserResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "llen" {
		err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "llen failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "llen failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error74 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error75 error
		error75, err = error74.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error75
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "llen failed: invalid message type")
		return
	}
	result := LaserServiceLlenResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Key
func (p *LaserServiceClient) Lpop(key *LaserKey) (r *LaserResponse, err error) {
	if err = p.sendLpop(key); err != nil {
		return
	}
	return p.recvLpop()
}

func (p *LaserServiceClient) sendLpop(key *LaserKey) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("lpop", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := LaserServiceLpopArgs{
		Key: key,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *LaserServiceClient) recvLpop() (value *LaserResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "lpop" {
		err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "lpop failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "lpop failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error76 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error77 error
		error77, err = error76.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error77
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "lpop failed: invalid message type")
		return
	}
	result := LaserServiceLpopResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Key
//  - Value
func (p *LaserServiceClient) Lpush(key *LaserKey, value string) (r *LaserResponse, err error) {
	if err = p.sendLpush(key, value); err != nil {
		return
	}
	return p.recvLpush()
}

func (p *LaserServiceClient) sendLpush(key *LaserKey, value string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("lpush", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := LaserServiceLpushArgs{
		Key:   key,
		Value: value,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *LaserServiceClient) recvLpush() (value *LaserResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "lpush" {
		err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "lpush failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "lpush failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error78 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error79 error
		error79, err = error78.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error79
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "lpush failed: invalid message type")
		return
	}
	result := LaserServiceLpushResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Key
//  - Start
//  - End
func (p *LaserServiceClient) Lrange(key *LaserKey, start int32, end int32) (r *LaserResponse, err error) {
	if err = p.sendLrange(key, start, end); err != nil {
		return
	}
	return p.recvLrange()
}

func (p *LaserServiceClient) sendLrange(key *LaserKey, start int32, end int32) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("lrange", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := LaserServiceLrangeArgs{
		Key:   key,
		Start: start,
		End:   end,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *LaserServiceClient) recvLrange() (value *LaserResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "lrange" {
		err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "lrange failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "lrange failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error80 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error81 error
		error81, err = error80.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error81
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "lrange failed: invalid message type")
		return
	}
	result := LaserServiceLrangeResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Key
func (p *LaserServiceClient) Rpop(key *LaserKey) (r *LaserResponse, err error) {
	if err = p.sendRpop(key); err != nil {
		return
	}
	return p.recvRpop()
}

func (p *LaserServiceClient) sendRpop(key *LaserKey) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("rpop", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := LaserServiceRpopArgs{
		Key: key,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *LaserServiceClient) recvRpop() (value *LaserResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "rpop" {
		err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "rpop failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "rpop failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error82 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error83 error
		error83, err = error82.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error83
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "rpop failed: invalid message type")
		return
	}
	result := LaserServiceRpopResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Key
//  - Value
func (p *LaserServiceClient) Rpush(key *LaserKey, value string) (r *LaserResponse, err error) {
	if err = p.sendRpush(key, value); err != nil {
		return
	}
	return p.recvRpush()
}

func (p *LaserServiceClient) sendRpush(key *LaserKey, value string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("rpush", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := LaserServiceRpushArgs{
		Key:   key,
		Value: value,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *LaserServiceClient) recvRpush() (value *LaserResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "rpush" {
		err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "rpush failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "rpush failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error84 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error85 error
		error85, err = error84.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error85
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "rpush failed: invalid message type")
		return
	}
	result := LaserServiceRpushResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Key
//  - Member
func (p *LaserServiceClient) Sadd(key *LaserKey, member string) (r *LaserResponse, err error) {
	if err = p.sendSadd(key, member); err != nil {
		return
	}
	return p.recvSadd()
}

func (p *LaserServiceClient) sendSadd(key *LaserKey, member string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("sadd", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := LaserServiceSaddArgs{
		Key:    key,
		Member: member,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *LaserServiceClient) recvSadd() (value *LaserResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "sadd" {
		err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "sadd failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "sadd failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error86 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error87 error
		error87, err = error86.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error87
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "sadd failed: invalid message type")
		return
	}
	result := LaserServiceSaddResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Req
func (p *LaserServiceClient) Scard(req *LaserKey) (r *LaserResponse, err error) {
	if err = p.sendScard(req); err != nil {
		return
	}
	return p.recvScard()
}

func (p *LaserServiceClient) sendScard(req *LaserKey) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("scard", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := LaserServiceScardArgs{
		Req: req,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *LaserServiceClient) recvScard() (value *LaserResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "scard" {
		err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "scard failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "scard failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error88 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error89 error
		error89, err = error88.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error89
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "scard failed: invalid message type")
		return
	}
	result := LaserServiceScardResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Req
//  - Member
func (p *LaserServiceClient) Sismember(req *LaserKey, member string) (r *LaserResponse, err error) {
	if err = p.sendSismember(req, member); err != nil {
		return
	}
	return p.recvSismember()
}

func (p *LaserServiceClient) sendSismember(req *LaserKey, member string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("sismember", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := LaserServiceSismemberArgs{
		Req:    req,
		Member: member,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *LaserServiceClient) recvSismember() (value *LaserResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "sismember" {
		err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "sismember failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "sismember failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error90 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error91 error
		error91, err = error90.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error91
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "sismember failed: invalid message type")
		return
	}
	result := LaserServiceSismemberResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Req
//  - Member
func (p *LaserServiceClient) Sremove(req *LaserKey, member string) (r *LaserResponse, err error) {
	if err = p.sendSremove(req, member); err != nil {
		return
	}
	return p.recvSremove()
}

func (p *LaserServiceClient) sendSremove(req *LaserKey, member string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("sremove", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := LaserServiceSremoveArgs{
		Req:    req,
		Member: member,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *LaserServiceClient) recvSremove() (value *LaserResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "sremove" {
		err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "sremove failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "sremove failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error92 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error93 error
		error93, err = error92.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error93
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "sremove failed: invalid message type")
		return
	}
	result := LaserServiceSremoveResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Req
func (p *LaserServiceClient) Smembers(req *LaserKey) (r *LaserResponse, err error) {
	if err = p.sendSmembers(req); err != nil {
		return
	}
	return p.recvSmembers()
}

func (p *LaserServiceClient) sendSmembers(req *LaserKey) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("smembers", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := LaserServiceSmembersArgs{
		Req: req,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *LaserServiceClient) recvSmembers() (value *LaserResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "smembers" {
		err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "smembers failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "smembers failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error94 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error95 error
		error95, err = error94.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error95
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "smembers failed: invalid message type")
		return
	}
	result := LaserServiceSmembersResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Key
//  - MemberScore
func (p *LaserServiceClient) getMaxIntScore(num float64) int64 {
	var LASER_FLOAT_AMPLIFICATION_FACTOR int64 = 10000
	int64_max := int64(math.MaxInt64)
	var ret int64
	zoom_score := num * float64(LASER_FLOAT_AMPLIFICATION_FACTOR)
	if zoom_score > float64(int64_max) {
		ret = int64_max
	} else {
		ret = int64(zoom_score)
	}

	return ret
}

func (p *LaserServiceClient) getMinIntScore(num float64) int64 {
	var LASER_FLOAT_AMPLIFICATION_FACTOR int64 = 10000
	int64_min := int64(math.MinInt64)
	var ret int64
	zoom_score := num * float64(LASER_FLOAT_AMPLIFICATION_FACTOR)
	if zoom_score < float64(int64_min) {
		ret = int64_min
	} else {
		ret = int64(zoom_score)
	}

	return ret
}

// Parameters:
//  - Key
//  - MemberScore
func (p *LaserServiceClient) Zadd(key *LaserKey, member_score map[string]float64) (r *LaserResponse, err error) {
	int_member_score := make(map[string]int64, 0)
	for member, score := range member_score {
		int_score := p.getMaxIntScore(score)
		int_member_score[member] = int_score
	}
	var laser_value LaserValue
	laser_value.MemberScoreValue = int_member_score

	if err = p.sendZadd(key, &laser_value); err != nil {
		return
	}
	return p.recvZadd()
}

func (p *LaserServiceClient) sendZadd(key *LaserKey, member_score *LaserValue) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("zadd", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := LaserServiceZaddArgs{
		Key:         key,
		MemberScore: member_score,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *LaserServiceClient) recvZadd() (value *LaserResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "zadd" {
		err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "zadd failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "zadd failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error96 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error97 error
		error97, err = error96.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error97
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "zadd failed: invalid message type")
		return
	}
	result := LaserServiceZaddResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Key
func (p *LaserServiceClient) Zcard(key *LaserKey) (r *LaserResponse, err error) {
	if err = p.sendZcard(key); err != nil {
		return
	}
	return p.recvZcard()
}

func (p *LaserServiceClient) sendZcard(key *LaserKey) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("zcard", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := LaserServiceZcardArgs{
		Key: key,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *LaserServiceClient) recvZcard() (value *LaserResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "zcard" {
		err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "zcard failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "zcard failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error98 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error99 error
		error99, err = error98.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error99
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "zcard failed: invalid message type")
		return
	}
	result := LaserServiceZcardResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Key
//  - Member
func (p *LaserServiceClient) Zrank(key *LaserKey, member string) (r *LaserResponse, err error) {
	if err = p.sendZrank(key, member); err != nil {
		return
	}
	return p.recvZrank()
}

func (p *LaserServiceClient) sendZrank(key *LaserKey, member string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("zrank", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := LaserServiceZrankArgs{
		Key:    key,
		Member: member,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *LaserServiceClient) recvZrank() (value *LaserResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "zrank" {
		err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "zrank failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "zrank failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error100 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error101 error
		error101, err = error100.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error101
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "zrank failed: invalid message type")
		return
	}
	result := LaserServiceZrankResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Key
//  - Member
func (p *LaserServiceClient) Zscore(key *LaserKey, member string) (r *LaserResponse, err error) {
	if err = p.sendZscore(key, member); err != nil {
		return
	}
	return p.recvZscore()
}

func (p *LaserServiceClient) sendZscore(key *LaserKey, member string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("zscore", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := LaserServiceZscoreArgs{
		Key:    key,
		Member: member,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *LaserServiceClient) recvZscore() (value *LaserResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "zscore" {
		err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "zscore failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "zscore failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error102 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error103 error
		error103, err = error102.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error103
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "zscore failed: invalid message type")
		return
	}
	result := LaserServiceZscoreResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Key
//  - Member
func (p *LaserServiceClient) Zrem(key *LaserKey, member string) (r *LaserResponse, err error) {
	if err = p.sendZrem(key, member); err != nil {
		return
	}
	return p.recvZrem()
}

func (p *LaserServiceClient) sendZrem(key *LaserKey, member string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("zrem", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := LaserServiceZremArgs{
		Key:    key,
		Member: member,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *LaserServiceClient) recvZrem() (value *LaserResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "zrem" {
		err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "zrem failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "zrem failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error104 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error105 error
		error105, err = error104.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error105
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "zrem failed: invalid message type")
		return
	}
	result := LaserServiceZremResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Key
//  - Start
//  - Stop
func (p *LaserServiceClient) Zrange(key *LaserKey, start int64, stop int64) (r *LaserResponse, err error) {
	if err = p.sendZrange(key, start, stop); err != nil {
		return
	}
	return p.recvZrange()
}

func (p *LaserServiceClient) sendZrange(key *LaserKey, start int64, stop int64) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("zrange", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := LaserServiceZrangeArgs{
		Key:   key,
		Start: start,
		Stop:  stop,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *LaserServiceClient) recvZrange() (value *LaserResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "zrange" {
		err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "zrange failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "zrange failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error106 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error107 error
		error107, err = error106.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error107
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "zrange failed: invalid message type")
		return
	}
	result := LaserServiceZrangeResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Key
//  - Min
//  - Max
func (p *LaserServiceClient) ZrangeByScore(key *LaserKey, min float64, max float64) (r *LaserResponse, err error) {
	int_min := p.getMinIntScore(min)
	int_max := p.getMaxIntScore(max)
	if err = p.sendZrangeByScore(key, int_min, int_max); err != nil {
		return
	}
	return p.recvZrangeByScore()
}

func (p *LaserServiceClient) sendZrangeByScore(key *LaserKey, min int64, max int64) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("zrangeByScore", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := LaserServiceZrangeByScoreArgs{
		Key: key,
		Min: min,
		Max: max,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *LaserServiceClient) recvZrangeByScore() (value *LaserResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "zrangeByScore" {
		err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "zrangeByScore failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "zrangeByScore failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error108 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error109 error
		error109, err = error108.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error109
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "zrangeByScore failed: invalid message type")
		return
	}
	result := LaserServiceZrangeByScoreResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Key
//  - Min
//  - Max
func (p *LaserServiceClient) ZremRangeByScore(key *LaserKey, min int64, max int64) (r *LaserResponse, err error) {
	if err = p.sendZremRangeByScore(key, min, max); err != nil {
		return
	}
	return p.recvZremRangeByScore()
}

func (p *LaserServiceClient) sendZremRangeByScore(key *LaserKey, min int64, max int64) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("zremRangeByScore", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := LaserServiceZremRangeByScoreArgs{
		Key: key,
		Min: min,
		Max: max,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *LaserServiceClient) recvZremRangeByScore() (value *LaserResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "zremRangeByScore" {
		err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "zremRangeByScore failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "zremRangeByScore failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error110 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error111 error
		error111, err = error110.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error111
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "zremRangeByScore failed: invalid message type")
		return
	}
	result := LaserServiceZremRangeByScoreResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

type LaserServiceThreadsafeClient struct {
	Transport       thrift.Transport
	ProtocolFactory thrift.ProtocolFactory
	InputProtocol   thrift.Protocol
	OutputProtocol  thrift.Protocol
	SeqId           int32
	Mu              sync.Mutex
}

func NewLaserServiceThreadsafeClientFactory(t thrift.Transport, f thrift.ProtocolFactory) *LaserServiceThreadsafeClient {
	return &LaserServiceThreadsafeClient{Transport: t,
		ProtocolFactory: f,
		InputProtocol:   f.GetProtocol(t),
		OutputProtocol:  f.GetProtocol(t),
		SeqId:           0,
	}
}

func NewLaserServiceThreadsafeClient(t thrift.Transport, iprot thrift.Protocol, oprot thrift.Protocol) *LaserServiceThreadsafeClient {
	return &LaserServiceThreadsafeClient{Transport: t,
		ProtocolFactory: nil,
		InputProtocol:   iprot,
		OutputProtocol:  oprot,
		SeqId:           0,
	}
}

func (p *LaserServiceThreadsafeClient) Threadsafe() {}

// Parameters:
//  - Key
func (p *LaserServiceThreadsafeClient) Delkey(key *LaserKey) (r *LaserResponse, err error) {
	p.Mu.Lock()
	defer p.Mu.Unlock()
	if err = p.sendDelkey(key); err != nil {
		return
	}
	return p.recvDelkey()
}

func (p *LaserServiceThreadsafeClient) sendDelkey(key *LaserKey) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("delkey", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := LaserServiceDelkeyArgs{
		Key: key,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *LaserServiceThreadsafeClient) recvDelkey() (value *LaserResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "delkey" {
		err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "delkey failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "delkey failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error112 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error113 error
		error113, err = error112.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error113
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "delkey failed: invalid message type")
		return
	}
	result := LaserServiceDelkeyResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Key
func (p *LaserServiceThreadsafeClient) Exists(key *LaserKey) (r *LaserResponse, err error) {
	p.Mu.Lock()
	defer p.Mu.Unlock()
	if err = p.sendExists(key); err != nil {
		return
	}
	return p.recvExists()
}

func (p *LaserServiceThreadsafeClient) sendExists(key *LaserKey) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("exists", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := LaserServiceExistsArgs{
		Key: key,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *LaserServiceThreadsafeClient) recvExists() (value *LaserResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "exists" {
		err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "exists failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "exists failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error114 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error115 error
		error115, err = error114.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error115
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "exists failed: invalid message type")
		return
	}
	result := LaserServiceExistsResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Key
//  - Time
func (p *LaserServiceThreadsafeClient) Expire(key *LaserKey, time int64) (r *LaserResponse, err error) {
	p.Mu.Lock()
	defer p.Mu.Unlock()
	if err = p.sendExpire(key, time); err != nil {
		return
	}
	return p.recvExpire()
}

func (p *LaserServiceThreadsafeClient) sendExpire(key *LaserKey, time int64) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("expire", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := LaserServiceExpireArgs{
		Key:  key,
		Time: time,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *LaserServiceThreadsafeClient) recvExpire() (value *LaserResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "expire" {
		err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "expire failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "expire failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error116 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error117 error
		error117, err = error116.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error117
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "expire failed: invalid message type")
		return
	}
	result := LaserServiceExpireResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Key
//  - TimeAt
func (p *LaserServiceThreadsafeClient) ExpireAt(key *LaserKey, time_at int64) (r *LaserResponse, err error) {
	p.Mu.Lock()
	defer p.Mu.Unlock()
	if err = p.sendExpireAt(key, time_at); err != nil {
		return
	}
	return p.recvExpireAt()
}

func (p *LaserServiceThreadsafeClient) sendExpireAt(key *LaserKey, time_at int64) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("expireAt", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := LaserServiceExpireAtArgs{
		Key:    key,
		TimeAt: time_at,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *LaserServiceThreadsafeClient) recvExpireAt() (value *LaserResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "expireAt" {
		err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "expireAt failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "expireAt failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error118 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error119 error
		error119, err = error118.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error119
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "expireAt failed: invalid message type")
		return
	}
	result := LaserServiceExpireAtResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Key
func (p *LaserServiceThreadsafeClient) Ttl(key *LaserKey) (r *LaserResponse, err error) {
	p.Mu.Lock()
	defer p.Mu.Unlock()
	if err = p.sendTtl(key); err != nil {
		return
	}
	return p.recvTtl()
}

func (p *LaserServiceThreadsafeClient) sendTtl(key *LaserKey) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("ttl", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := LaserServiceTtlArgs{
		Key: key,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *LaserServiceThreadsafeClient) recvTtl() (value *LaserResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "ttl" {
		err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "ttl failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "ttl failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error120 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error121 error
		error121, err = error120.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error121
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "ttl failed: invalid message type")
		return
	}
	result := LaserServiceTtlResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Key
//  - Value
func (p *LaserServiceThreadsafeClient) Append(key *LaserKey, value string) (r *LaserResponse, err error) {
	p.Mu.Lock()
	defer p.Mu.Unlock()
	if err = p.sendAppend(key, value); err != nil {
		return
	}
	return p.recvAppend()
}

func (p *LaserServiceThreadsafeClient) sendAppend(key *LaserKey, value string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("append", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := LaserServiceAppendArgs{
		Key:   key,
		Value: value,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *LaserServiceThreadsafeClient) recvAppend() (value *LaserResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "append" {
		err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "append failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "append failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error122 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error123 error
		error123, err = error122.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error123
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "append failed: invalid message type")
		return
	}
	result := LaserServiceAppendResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Key
func (p *LaserServiceThreadsafeClient) Get(key *LaserKey) (r *LaserResponse, err error) {
	p.Mu.Lock()
	defer p.Mu.Unlock()
	if err = p.sendGet(key); err != nil {
		return
	}
	return p.recvGet()
}

func (p *LaserServiceThreadsafeClient) sendGet(key *LaserKey) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("get", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := LaserServiceGetArgs{
		Key: key,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *LaserServiceThreadsafeClient) recvGet() (value *LaserResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "get" {
		err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "get failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "get failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error124 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error125 error
		error125, err = error124.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error125
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "get failed: invalid message type")
		return
	}
	result := LaserServiceGetResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Kv
func (p *LaserServiceThreadsafeClient) Sset(kv *LaserKV) (r *LaserResponse, err error) {
	p.Mu.Lock()
	defer p.Mu.Unlock()
	if err = p.sendSset(kv); err != nil {
		return
	}
	return p.recvSset()
}

func (p *LaserServiceThreadsafeClient) sendSset(kv *LaserKV) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("sset", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := LaserServiceSsetArgs{
		Kv: kv,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *LaserServiceThreadsafeClient) recvSset() (value *LaserResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "sset" {
		err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "sset failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "sset failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error126 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error127 error
		error127, err = error126.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error127
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "sset failed: invalid message type")
		return
	}
	result := LaserServiceSsetResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Kv
//  - Option
func (p *LaserServiceThreadsafeClient) Setx(kv *LaserKV, option *LaserSetOption) (r *LaserResponse, err error) {
	p.Mu.Lock()
	defer p.Mu.Unlock()
	if err = p.sendSetx(kv, option); err != nil {
		return
	}
	return p.recvSetx()
}

func (p *LaserServiceThreadsafeClient) sendSetx(kv *LaserKV, option *LaserSetOption) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("setx", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := LaserServiceSetxArgs{
		Kv:     kv,
		Option: option,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *LaserServiceThreadsafeClient) recvSetx() (value *LaserResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "setx" {
		err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "setx failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "setx failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error128 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error129 error
		error129, err = error128.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error129
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "setx failed: invalid message type")
		return
	}
	result := LaserServiceSetxResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Keys
func (p *LaserServiceThreadsafeClient) Mget(keys *LaserKeys) (r *LaserResponse, err error) {
	p.Mu.Lock()
	defer p.Mu.Unlock()
	if err = p.sendMget(keys); err != nil {
		return
	}
	return p.recvMget()
}

func (p *LaserServiceThreadsafeClient) sendMget(keys *LaserKeys) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("mget", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := LaserServiceMgetArgs{
		Keys: keys,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *LaserServiceThreadsafeClient) recvMget() (value *LaserResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "mget" {
		err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "mget failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "mget failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error130 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error131 error
		error131, err = error130.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error131
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "mget failed: invalid message type")
		return
	}
	result := LaserServiceMgetResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Values
func (p *LaserServiceThreadsafeClient) Mset(values *LaserKVs) (r *LaserResponse, err error) {
	p.Mu.Lock()
	defer p.Mu.Unlock()
	if err = p.sendMset(values); err != nil {
		return
	}
	return p.recvMset()
}

func (p *LaserServiceThreadsafeClient) sendMset(values *LaserKVs) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("mset", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := LaserServiceMsetArgs{
		Values: values,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *LaserServiceThreadsafeClient) recvMset() (value *LaserResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "mset" {
		err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "mset failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "mset failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error132 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error133 error
		error133, err = error132.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error133
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "mset failed: invalid message type")
		return
	}
	result := LaserServiceMsetResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Keys
func (p *LaserServiceThreadsafeClient) MgetDetail(keys *LaserKeys) (r *LaserResponse, err error) {
	p.Mu.Lock()
	defer p.Mu.Unlock()
	if err = p.sendMgetDetail(keys); err != nil {
		return
	}
	return p.recvMgetDetail()
}

func (p *LaserServiceThreadsafeClient) sendMgetDetail(keys *LaserKeys) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("mgetDetail", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := LaserServiceMgetDetailArgs{
		Keys: keys,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *LaserServiceThreadsafeClient) recvMgetDetail() (value *LaserResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "mgetDetail" {
		err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "mgetDetail failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "mgetDetail failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error134 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error135 error
		error135, err = error134.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error135
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "mgetDetail failed: invalid message type")
		return
	}
	result := LaserServiceMgetDetailResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Values
//  - Option
func (p *LaserServiceThreadsafeClient) MsetDetail(values *LaserKVs, option *LaserSetOption) (r *LaserResponse, err error) {
	p.Mu.Lock()
	defer p.Mu.Unlock()
	if err = p.sendMsetDetail(values, option); err != nil {
		return
	}
	return p.recvMsetDetail()
}

func (p *LaserServiceThreadsafeClient) sendMsetDetail(values *LaserKVs, option *LaserSetOption) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("msetDetail", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := LaserServiceMsetDetailArgs{
		Values: values,
		Option: option,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *LaserServiceThreadsafeClient) recvMsetDetail() (value *LaserResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "msetDetail" {
		err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "msetDetail failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "msetDetail failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error136 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error137 error
		error137, err = error136.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error137
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "msetDetail failed: invalid message type")
		return
	}
	result := LaserServiceMsetDetailResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Keys
func (p *LaserServiceThreadsafeClient) Mdel(keys *LaserKeys) (r *LaserResponse, err error) {
	p.Mu.Lock()
	defer p.Mu.Unlock()
	if err = p.sendMdel(keys); err != nil {
		return
	}
	return p.recvMdel()
}

func (p *LaserServiceThreadsafeClient) sendMdel(keys *LaserKeys) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("mdel", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := LaserServiceMdelArgs{
		Keys: keys,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *LaserServiceThreadsafeClient) recvMdel() (value *LaserResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "mdel" {
		err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "mdel failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "mdel failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error138 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error139 error
		error139, err = error138.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error139
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "mdel failed: invalid message type")
		return
	}
	result := LaserServiceMdelResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Key
func (p *LaserServiceThreadsafeClient) Exist(key *LaserKey) (r *LaserResponse, err error) {
	p.Mu.Lock()
	defer p.Mu.Unlock()
	if err = p.sendExist(key); err != nil {
		return
	}
	return p.recvExist()
}

func (p *LaserServiceThreadsafeClient) sendExist(key *LaserKey) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("exist", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := LaserServiceExistArgs{
		Key: key,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *LaserServiceThreadsafeClient) recvExist() (value *LaserResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "exist" {
		err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "exist failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "exist failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error140 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error141 error
		error141, err = error140.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error141
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "exist failed: invalid message type")
		return
	}
	result := LaserServiceExistResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Key
func (p *LaserServiceThreadsafeClient) Decr(key *LaserKey) (r *LaserResponse, err error) {
	p.Mu.Lock()
	defer p.Mu.Unlock()
	if err = p.sendDecr(key); err != nil {
		return
	}
	return p.recvDecr()
}

func (p *LaserServiceThreadsafeClient) sendDecr(key *LaserKey) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("decr", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := LaserServiceDecrArgs{
		Key: key,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *LaserServiceThreadsafeClient) recvDecr() (value *LaserResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "decr" {
		err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "decr failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "decr failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error142 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error143 error
		error143, err = error142.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error143
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "decr failed: invalid message type")
		return
	}
	result := LaserServiceDecrResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Key
func (p *LaserServiceThreadsafeClient) Incr(key *LaserKey) (r *LaserResponse, err error) {
	p.Mu.Lock()
	defer p.Mu.Unlock()
	if err = p.sendIncr(key); err != nil {
		return
	}
	return p.recvIncr()
}

func (p *LaserServiceThreadsafeClient) sendIncr(key *LaserKey) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("incr", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := LaserServiceIncrArgs{
		Key: key,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *LaserServiceThreadsafeClient) recvIncr() (value *LaserResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "incr" {
		err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "incr failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "incr failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error144 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error145 error
		error145, err = error144.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error145
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "incr failed: invalid message type")
		return
	}
	result := LaserServiceIncrResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Key
//  - Step
func (p *LaserServiceThreadsafeClient) DecrBy(key *LaserKey, step int64) (r *LaserResponse, err error) {
	p.Mu.Lock()
	defer p.Mu.Unlock()
	if err = p.sendDecrBy(key, step); err != nil {
		return
	}
	return p.recvDecrBy()
}

func (p *LaserServiceThreadsafeClient) sendDecrBy(key *LaserKey, step int64) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("decrBy", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := LaserServiceDecrByArgs{
		Key:  key,
		Step: step,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *LaserServiceThreadsafeClient) recvDecrBy() (value *LaserResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "decrBy" {
		err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "decrBy failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "decrBy failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error146 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error147 error
		error147, err = error146.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error147
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "decrBy failed: invalid message type")
		return
	}
	result := LaserServiceDecrByResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Key
//  - Step
func (p *LaserServiceThreadsafeClient) IncrBy(key *LaserKey, step int64) (r *LaserResponse, err error) {
	p.Mu.Lock()
	defer p.Mu.Unlock()
	if err = p.sendIncrBy(key, step); err != nil {
		return
	}
	return p.recvIncrBy()
}

func (p *LaserServiceThreadsafeClient) sendIncrBy(key *LaserKey, step int64) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("incrBy", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := LaserServiceIncrByArgs{
		Key:  key,
		Step: step,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *LaserServiceThreadsafeClient) recvIncrBy() (value *LaserResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "incrBy" {
		err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "incrBy failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "incrBy failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error148 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error149 error
		error149, err = error148.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error149
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "incrBy failed: invalid message type")
		return
	}
	result := LaserServiceIncrByResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Key
//  - Field
func (p *LaserServiceThreadsafeClient) Hdel(key *LaserKey, field string) (r *LaserResponse, err error) {
	p.Mu.Lock()
	defer p.Mu.Unlock()
	if err = p.sendHdel(key, field); err != nil {
		return
	}
	return p.recvHdel()
}

func (p *LaserServiceThreadsafeClient) sendHdel(key *LaserKey, field string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("hdel", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := LaserServiceHdelArgs{
		Key:   key,
		Field: field,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *LaserServiceThreadsafeClient) recvHdel() (value *LaserResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "hdel" {
		err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "hdel failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "hdel failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error150 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error151 error
		error151, err = error150.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error151
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "hdel failed: invalid message type")
		return
	}
	result := LaserServiceHdelResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Key
//  - Field
func (p *LaserServiceThreadsafeClient) Hexists(key *LaserKey, field string) (r *LaserResponse, err error) {
	p.Mu.Lock()
	defer p.Mu.Unlock()
	if err = p.sendHexists(key, field); err != nil {
		return
	}
	return p.recvHexists()
}

func (p *LaserServiceThreadsafeClient) sendHexists(key *LaserKey, field string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("hexists", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := LaserServiceHexistsArgs{
		Key:   key,
		Field: field,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *LaserServiceThreadsafeClient) recvHexists() (value *LaserResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "hexists" {
		err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "hexists failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "hexists failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error152 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error153 error
		error153, err = error152.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error153
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "hexists failed: invalid message type")
		return
	}
	result := LaserServiceHexistsResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Key
//  - Field
func (p *LaserServiceThreadsafeClient) Hget(key *LaserKey, field string) (r *LaserResponse, err error) {
	p.Mu.Lock()
	defer p.Mu.Unlock()
	if err = p.sendHget(key, field); err != nil {
		return
	}
	return p.recvHget()
}

func (p *LaserServiceThreadsafeClient) sendHget(key *LaserKey, field string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("hget", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := LaserServiceHgetArgs{
		Key:   key,
		Field: field,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *LaserServiceThreadsafeClient) recvHget() (value *LaserResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "hget" {
		err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "hget failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "hget failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error154 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error155 error
		error155, err = error154.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error155
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "hget failed: invalid message type")
		return
	}
	result := LaserServiceHgetResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Key
//  - Field
//  - Value
func (p *LaserServiceThreadsafeClient) Hset(key *LaserKey, field string, value string) (r *LaserResponse, err error) {
	p.Mu.Lock()
	defer p.Mu.Unlock()
	if err = p.sendHset(key, field, value); err != nil {
		return
	}
	return p.recvHset()
}

func (p *LaserServiceThreadsafeClient) sendHset(key *LaserKey, field string, value string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("hset", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := LaserServiceHsetArgs{
		Key:   key,
		Field: field,
		Value: value,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *LaserServiceThreadsafeClient) recvHset() (value *LaserResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "hset" {
		err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "hset failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "hset failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error156 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error157 error
		error157, err = error156.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error157
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "hset failed: invalid message type")
		return
	}
	result := LaserServiceHsetResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Key
func (p *LaserServiceThreadsafeClient) Hgetall(key *LaserKey) (r *LaserResponse, err error) {
	p.Mu.Lock()
	defer p.Mu.Unlock()
	if err = p.sendHgetall(key); err != nil {
		return
	}
	return p.recvHgetall()
}

func (p *LaserServiceThreadsafeClient) sendHgetall(key *LaserKey) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("hgetall", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := LaserServiceHgetallArgs{
		Key: key,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *LaserServiceThreadsafeClient) recvHgetall() (value *LaserResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "hgetall" {
		err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "hgetall failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "hgetall failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error158 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error159 error
		error159, err = error158.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error159
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "hgetall failed: invalid message type")
		return
	}
	result := LaserServiceHgetallResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Key
func (p *LaserServiceThreadsafeClient) Hkeys(key *LaserKey) (r *LaserResponse, err error) {
	p.Mu.Lock()
	defer p.Mu.Unlock()
	if err = p.sendHkeys(key); err != nil {
		return
	}
	return p.recvHkeys()
}

func (p *LaserServiceThreadsafeClient) sendHkeys(key *LaserKey) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("hkeys", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := LaserServiceHkeysArgs{
		Key: key,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *LaserServiceThreadsafeClient) recvHkeys() (value *LaserResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "hkeys" {
		err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "hkeys failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "hkeys failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error160 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error161 error
		error161, err = error160.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error161
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "hkeys failed: invalid message type")
		return
	}
	result := LaserServiceHkeysResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Key
func (p *LaserServiceThreadsafeClient) Hlen(key *LaserKey) (r *LaserResponse, err error) {
	p.Mu.Lock()
	defer p.Mu.Unlock()
	if err = p.sendHlen(key); err != nil {
		return
	}
	return p.recvHlen()
}

func (p *LaserServiceThreadsafeClient) sendHlen(key *LaserKey) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("hlen", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := LaserServiceHlenArgs{
		Key: key,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *LaserServiceThreadsafeClient) recvHlen() (value *LaserResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "hlen" {
		err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "hlen failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "hlen failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error162 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error163 error
		error163, err = error162.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error163
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "hlen failed: invalid message type")
		return
	}
	result := LaserServiceHlenResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Key
//  - Fields
func (p *LaserServiceThreadsafeClient) Hmget(key *LaserKey, fields []string) (r *LaserResponse, err error) {
	p.Mu.Lock()
	defer p.Mu.Unlock()
	if err = p.sendHmget(key, fields); err != nil {
		return
	}
	return p.recvHmget()
}

func (p *LaserServiceThreadsafeClient) sendHmget(key *LaserKey, fields []string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("hmget", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := LaserServiceHmgetArgs{
		Key:    key,
		Fields: fields,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *LaserServiceThreadsafeClient) recvHmget() (value *LaserResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "hmget" {
		err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "hmget failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "hmget failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error164 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error165 error
		error165, err = error164.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error165
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "hmget failed: invalid message type")
		return
	}
	result := LaserServiceHmgetResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Key
//  - Value
func (p *LaserServiceThreadsafeClient) Hmset(key *LaserKey, value *LaserValue) (r *LaserResponse, err error) {
	p.Mu.Lock()
	defer p.Mu.Unlock()
	if err = p.sendHmset(key, value); err != nil {
		return
	}
	return p.recvHmset()
}

func (p *LaserServiceThreadsafeClient) sendHmset(key *LaserKey, value *LaserValue) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("hmset", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := LaserServiceHmsetArgs{
		Key:   key,
		Value: value,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *LaserServiceThreadsafeClient) recvHmset() (value *LaserResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "hmset" {
		err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "hmset failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "hmset failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error166 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error167 error
		error167, err = error166.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error167
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "hmset failed: invalid message type")
		return
	}
	result := LaserServiceHmsetResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Key
//  - Index
func (p *LaserServiceThreadsafeClient) Lindex(key *LaserKey, index int32) (r *LaserResponse, err error) {
	p.Mu.Lock()
	defer p.Mu.Unlock()
	if err = p.sendLindex(key, index); err != nil {
		return
	}
	return p.recvLindex()
}

func (p *LaserServiceThreadsafeClient) sendLindex(key *LaserKey, index int32) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("lindex", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := LaserServiceLindexArgs{
		Key:   key,
		Index: index,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *LaserServiceThreadsafeClient) recvLindex() (value *LaserResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "lindex" {
		err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "lindex failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "lindex failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error168 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error169 error
		error169, err = error168.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error169
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "lindex failed: invalid message type")
		return
	}
	result := LaserServiceLindexResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Key
func (p *LaserServiceThreadsafeClient) Llen(key *LaserKey) (r *LaserResponse, err error) {
	p.Mu.Lock()
	defer p.Mu.Unlock()
	if err = p.sendLlen(key); err != nil {
		return
	}
	return p.recvLlen()
}

func (p *LaserServiceThreadsafeClient) sendLlen(key *LaserKey) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("llen", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := LaserServiceLlenArgs{
		Key: key,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *LaserServiceThreadsafeClient) recvLlen() (value *LaserResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "llen" {
		err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "llen failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "llen failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error170 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error171 error
		error171, err = error170.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error171
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "llen failed: invalid message type")
		return
	}
	result := LaserServiceLlenResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Key
func (p *LaserServiceThreadsafeClient) Lpop(key *LaserKey) (r *LaserResponse, err error) {
	p.Mu.Lock()
	defer p.Mu.Unlock()
	if err = p.sendLpop(key); err != nil {
		return
	}
	return p.recvLpop()
}

func (p *LaserServiceThreadsafeClient) sendLpop(key *LaserKey) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("lpop", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := LaserServiceLpopArgs{
		Key: key,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *LaserServiceThreadsafeClient) recvLpop() (value *LaserResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "lpop" {
		err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "lpop failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "lpop failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error172 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error173 error
		error173, err = error172.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error173
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "lpop failed: invalid message type")
		return
	}
	result := LaserServiceLpopResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Key
//  - Value
func (p *LaserServiceThreadsafeClient) Lpush(key *LaserKey, value string) (r *LaserResponse, err error) {
	p.Mu.Lock()
	defer p.Mu.Unlock()
	if err = p.sendLpush(key, value); err != nil {
		return
	}
	return p.recvLpush()
}

func (p *LaserServiceThreadsafeClient) sendLpush(key *LaserKey, value string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("lpush", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := LaserServiceLpushArgs{
		Key:   key,
		Value: value,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *LaserServiceThreadsafeClient) recvLpush() (value *LaserResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "lpush" {
		err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "lpush failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "lpush failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error174 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error175 error
		error175, err = error174.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error175
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "lpush failed: invalid message type")
		return
	}
	result := LaserServiceLpushResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Key
//  - Start
//  - End
func (p *LaserServiceThreadsafeClient) Lrange(key *LaserKey, start int32, end int32) (r *LaserResponse, err error) {
	p.Mu.Lock()
	defer p.Mu.Unlock()
	if err = p.sendLrange(key, start, end); err != nil {
		return
	}
	return p.recvLrange()
}

func (p *LaserServiceThreadsafeClient) sendLrange(key *LaserKey, start int32, end int32) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("lrange", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := LaserServiceLrangeArgs{
		Key:   key,
		Start: start,
		End:   end,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *LaserServiceThreadsafeClient) recvLrange() (value *LaserResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "lrange" {
		err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "lrange failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "lrange failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error176 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error177 error
		error177, err = error176.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error177
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "lrange failed: invalid message type")
		return
	}
	result := LaserServiceLrangeResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Key
func (p *LaserServiceThreadsafeClient) Rpop(key *LaserKey) (r *LaserResponse, err error) {
	p.Mu.Lock()
	defer p.Mu.Unlock()
	if err = p.sendRpop(key); err != nil {
		return
	}
	return p.recvRpop()
}

func (p *LaserServiceThreadsafeClient) sendRpop(key *LaserKey) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("rpop", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := LaserServiceRpopArgs{
		Key: key,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *LaserServiceThreadsafeClient) recvRpop() (value *LaserResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "rpop" {
		err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "rpop failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "rpop failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error178 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error179 error
		error179, err = error178.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error179
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "rpop failed: invalid message type")
		return
	}
	result := LaserServiceRpopResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Key
//  - Value
func (p *LaserServiceThreadsafeClient) Rpush(key *LaserKey, value string) (r *LaserResponse, err error) {
	p.Mu.Lock()
	defer p.Mu.Unlock()
	if err = p.sendRpush(key, value); err != nil {
		return
	}
	return p.recvRpush()
}

func (p *LaserServiceThreadsafeClient) sendRpush(key *LaserKey, value string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("rpush", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := LaserServiceRpushArgs{
		Key:   key,
		Value: value,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *LaserServiceThreadsafeClient) recvRpush() (value *LaserResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "rpush" {
		err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "rpush failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "rpush failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error180 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error181 error
		error181, err = error180.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error181
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "rpush failed: invalid message type")
		return
	}
	result := LaserServiceRpushResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Key
//  - Member
func (p *LaserServiceThreadsafeClient) Sadd(key *LaserKey, member string) (r *LaserResponse, err error) {
	p.Mu.Lock()
	defer p.Mu.Unlock()
	if err = p.sendSadd(key, member); err != nil {
		return
	}
	return p.recvSadd()
}

func (p *LaserServiceThreadsafeClient) sendSadd(key *LaserKey, member string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("sadd", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := LaserServiceSaddArgs{
		Key:    key,
		Member: member,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *LaserServiceThreadsafeClient) recvSadd() (value *LaserResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "sadd" {
		err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "sadd failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "sadd failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error182 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error183 error
		error183, err = error182.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error183
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "sadd failed: invalid message type")
		return
	}
	result := LaserServiceSaddResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Req
func (p *LaserServiceThreadsafeClient) Scard(req *LaserKey) (r *LaserResponse, err error) {
	p.Mu.Lock()
	defer p.Mu.Unlock()
	if err = p.sendScard(req); err != nil {
		return
	}
	return p.recvScard()
}

func (p *LaserServiceThreadsafeClient) sendScard(req *LaserKey) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("scard", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := LaserServiceScardArgs{
		Req: req,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *LaserServiceThreadsafeClient) recvScard() (value *LaserResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "scard" {
		err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "scard failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "scard failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error184 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error185 error
		error185, err = error184.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error185
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "scard failed: invalid message type")
		return
	}
	result := LaserServiceScardResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Req
//  - Member
func (p *LaserServiceThreadsafeClient) Sismember(req *LaserKey, member string) (r *LaserResponse, err error) {
	p.Mu.Lock()
	defer p.Mu.Unlock()
	if err = p.sendSismember(req, member); err != nil {
		return
	}
	return p.recvSismember()
}

func (p *LaserServiceThreadsafeClient) sendSismember(req *LaserKey, member string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("sismember", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := LaserServiceSismemberArgs{
		Req:    req,
		Member: member,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *LaserServiceThreadsafeClient) recvSismember() (value *LaserResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "sismember" {
		err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "sismember failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "sismember failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error186 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error187 error
		error187, err = error186.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error187
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "sismember failed: invalid message type")
		return
	}
	result := LaserServiceSismemberResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Req
//  - Member
func (p *LaserServiceThreadsafeClient) Sremove(req *LaserKey, member string) (r *LaserResponse, err error) {
	p.Mu.Lock()
	defer p.Mu.Unlock()
	if err = p.sendSremove(req, member); err != nil {
		return
	}
	return p.recvSremove()
}

func (p *LaserServiceThreadsafeClient) sendSremove(req *LaserKey, member string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("sremove", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := LaserServiceSremoveArgs{
		Req:    req,
		Member: member,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *LaserServiceThreadsafeClient) recvSremove() (value *LaserResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "sremove" {
		err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "sremove failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "sremove failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error188 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error189 error
		error189, err = error188.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error189
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "sremove failed: invalid message type")
		return
	}
	result := LaserServiceSremoveResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Req
func (p *LaserServiceThreadsafeClient) Smembers(req *LaserKey) (r *LaserResponse, err error) {
	p.Mu.Lock()
	defer p.Mu.Unlock()
	if err = p.sendSmembers(req); err != nil {
		return
	}
	return p.recvSmembers()
}

func (p *LaserServiceThreadsafeClient) sendSmembers(req *LaserKey) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("smembers", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := LaserServiceSmembersArgs{
		Req: req,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *LaserServiceThreadsafeClient) recvSmembers() (value *LaserResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "smembers" {
		err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "smembers failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "smembers failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error190 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error191 error
		error191, err = error190.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error191
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "smembers failed: invalid message type")
		return
	}
	result := LaserServiceSmembersResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Key
//  - MemberScore
func (p *LaserServiceThreadsafeClient) Zadd(key *LaserKey, member_score *LaserValue) (r *LaserResponse, err error) {
	p.Mu.Lock()
	defer p.Mu.Unlock()
	if err = p.sendZadd(key, member_score); err != nil {
		return
	}
	return p.recvZadd()
}

func (p *LaserServiceThreadsafeClient) sendZadd(key *LaserKey, member_score *LaserValue) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("zadd", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := LaserServiceZaddArgs{
		Key:         key,
		MemberScore: member_score,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *LaserServiceThreadsafeClient) recvZadd() (value *LaserResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "zadd" {
		err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "zadd failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "zadd failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error192 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error193 error
		error193, err = error192.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error193
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "zadd failed: invalid message type")
		return
	}
	result := LaserServiceZaddResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Key
func (p *LaserServiceThreadsafeClient) Zcard(key *LaserKey) (r *LaserResponse, err error) {
	p.Mu.Lock()
	defer p.Mu.Unlock()
	if err = p.sendZcard(key); err != nil {
		return
	}
	return p.recvZcard()
}

func (p *LaserServiceThreadsafeClient) sendZcard(key *LaserKey) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("zcard", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := LaserServiceZcardArgs{
		Key: key,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *LaserServiceThreadsafeClient) recvZcard() (value *LaserResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "zcard" {
		err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "zcard failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "zcard failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error194 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error195 error
		error195, err = error194.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error195
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "zcard failed: invalid message type")
		return
	}
	result := LaserServiceZcardResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Key
//  - Member
func (p *LaserServiceThreadsafeClient) Zrank(key *LaserKey, member string) (r *LaserResponse, err error) {
	p.Mu.Lock()
	defer p.Mu.Unlock()
	if err = p.sendZrank(key, member); err != nil {
		return
	}
	return p.recvZrank()
}

func (p *LaserServiceThreadsafeClient) sendZrank(key *LaserKey, member string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("zrank", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := LaserServiceZrankArgs{
		Key:    key,
		Member: member,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *LaserServiceThreadsafeClient) recvZrank() (value *LaserResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "zrank" {
		err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "zrank failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "zrank failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error196 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error197 error
		error197, err = error196.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error197
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "zrank failed: invalid message type")
		return
	}
	result := LaserServiceZrankResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Key
//  - Member
func (p *LaserServiceThreadsafeClient) Zscore(key *LaserKey, member string) (r *LaserResponse, err error) {
	p.Mu.Lock()
	defer p.Mu.Unlock()
	if err = p.sendZscore(key, member); err != nil {
		return
	}
	return p.recvZscore()
}

func (p *LaserServiceThreadsafeClient) sendZscore(key *LaserKey, member string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("zscore", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := LaserServiceZscoreArgs{
		Key:    key,
		Member: member,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *LaserServiceThreadsafeClient) recvZscore() (value *LaserResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "zscore" {
		err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "zscore failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "zscore failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error198 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error199 error
		error199, err = error198.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error199
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "zscore failed: invalid message type")
		return
	}
	result := LaserServiceZscoreResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Key
//  - Member
func (p *LaserServiceThreadsafeClient) Zrem(key *LaserKey, member string) (r *LaserResponse, err error) {
	p.Mu.Lock()
	defer p.Mu.Unlock()
	if err = p.sendZrem(key, member); err != nil {
		return
	}
	return p.recvZrem()
}

func (p *LaserServiceThreadsafeClient) sendZrem(key *LaserKey, member string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("zrem", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := LaserServiceZremArgs{
		Key:    key,
		Member: member,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *LaserServiceThreadsafeClient) recvZrem() (value *LaserResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "zrem" {
		err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "zrem failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "zrem failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error200 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error201 error
		error201, err = error200.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error201
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "zrem failed: invalid message type")
		return
	}
	result := LaserServiceZremResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Key
//  - Start
//  - Stop
func (p *LaserServiceThreadsafeClient) Zrange(key *LaserKey, start int64, stop int64) (r *LaserResponse, err error) {
	p.Mu.Lock()
	defer p.Mu.Unlock()
	if err = p.sendZrange(key, start, stop); err != nil {
		return
	}
	return p.recvZrange()
}

func (p *LaserServiceThreadsafeClient) sendZrange(key *LaserKey, start int64, stop int64) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("zrange", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := LaserServiceZrangeArgs{
		Key:   key,
		Start: start,
		Stop:  stop,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *LaserServiceThreadsafeClient) recvZrange() (value *LaserResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "zrange" {
		err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "zrange failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "zrange failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error202 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error203 error
		error203, err = error202.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error203
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "zrange failed: invalid message type")
		return
	}
	result := LaserServiceZrangeResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Key
//  - Min
//  - Max
func (p *LaserServiceThreadsafeClient) ZrangeByScore(key *LaserKey, min int64, max int64) (r *LaserResponse, err error) {
	p.Mu.Lock()
	defer p.Mu.Unlock()
	if err = p.sendZrangeByScore(key, min, max); err != nil {
		return
	}
	return p.recvZrangeByScore()
}

func (p *LaserServiceThreadsafeClient) sendZrangeByScore(key *LaserKey, min int64, max int64) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("zrangeByScore", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := LaserServiceZrangeByScoreArgs{
		Key: key,
		Min: min,
		Max: max,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *LaserServiceThreadsafeClient) recvZrangeByScore() (value *LaserResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "zrangeByScore" {
		err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "zrangeByScore failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "zrangeByScore failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error204 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error205 error
		error205, err = error204.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error205
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "zrangeByScore failed: invalid message type")
		return
	}
	result := LaserServiceZrangeByScoreResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Key
//  - Min
//  - Max
func (p *LaserServiceThreadsafeClient) ZremRangeByScore(key *LaserKey, min int64, max int64) (r *LaserResponse, err error) {
	p.Mu.Lock()
	defer p.Mu.Unlock()
	if err = p.sendZremRangeByScore(key, min, max); err != nil {
		return
	}
	return p.recvZremRangeByScore()
}

func (p *LaserServiceThreadsafeClient) sendZremRangeByScore(key *LaserKey, min int64, max int64) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("zremRangeByScore", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := LaserServiceZremRangeByScoreArgs{
		Key: key,
		Min: min,
		Max: max,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *LaserServiceThreadsafeClient) recvZremRangeByScore() (value *LaserResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "zremRangeByScore" {
		err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "zremRangeByScore failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "zremRangeByScore failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error206 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error207 error
		error207, err = error206.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error207
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "zremRangeByScore failed: invalid message type")
		return
	}
	result := LaserServiceZremRangeByScoreResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

type LaserServiceProcessor struct {
	processorMap map[string]thrift.ProcessorFunction
	handler      LaserService
}

func (p *LaserServiceProcessor) AddToProcessorMap(key string, processor thrift.ProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *LaserServiceProcessor) GetProcessorFunction(key string) (processor thrift.ProcessorFunction, err error) {
	if processor, ok := p.processorMap[key]; ok {
		return processor, nil
	}
	return nil, nil // generic error message will be sent
}

func (p *LaserServiceProcessor) ProcessorMap() map[string]thrift.ProcessorFunction {
	return p.processorMap
}

func NewLaserServiceProcessor(handler LaserService) *LaserServiceProcessor {
	self208 := &LaserServiceProcessor{handler: handler, processorMap: make(map[string]thrift.ProcessorFunction)}
	self208.processorMap["delkey"] = &laserServiceProcessorDelkey{handler: handler}
	self208.processorMap["exists"] = &laserServiceProcessorExists{handler: handler}
	self208.processorMap["expire"] = &laserServiceProcessorExpire{handler: handler}
	self208.processorMap["expireAt"] = &laserServiceProcessorExpireAt{handler: handler}
	self208.processorMap["ttl"] = &laserServiceProcessorTtl{handler: handler}
	self208.processorMap["append"] = &laserServiceProcessorAppend{handler: handler}
	self208.processorMap["get"] = &laserServiceProcessorGet{handler: handler}
	self208.processorMap["sset"] = &laserServiceProcessorSset{handler: handler}
	self208.processorMap["setx"] = &laserServiceProcessorSetx{handler: handler}
	self208.processorMap["mget"] = &laserServiceProcessorMget{handler: handler}
	self208.processorMap["mset"] = &laserServiceProcessorMset{handler: handler}
	self208.processorMap["mgetDetail"] = &laserServiceProcessorMgetDetail{handler: handler}
	self208.processorMap["msetDetail"] = &laserServiceProcessorMsetDetail{handler: handler}
	self208.processorMap["mdel"] = &laserServiceProcessorMdel{handler: handler}
	self208.processorMap["exist"] = &laserServiceProcessorExist{handler: handler}
	self208.processorMap["decr"] = &laserServiceProcessorDecr{handler: handler}
	self208.processorMap["incr"] = &laserServiceProcessorIncr{handler: handler}
	self208.processorMap["decrBy"] = &laserServiceProcessorDecrBy{handler: handler}
	self208.processorMap["incrBy"] = &laserServiceProcessorIncrBy{handler: handler}
	self208.processorMap["hdel"] = &laserServiceProcessorHdel{handler: handler}
	self208.processorMap["hexists"] = &laserServiceProcessorHexists{handler: handler}
	self208.processorMap["hget"] = &laserServiceProcessorHget{handler: handler}
	self208.processorMap["hset"] = &laserServiceProcessorHset{handler: handler}
	self208.processorMap["hgetall"] = &laserServiceProcessorHgetall{handler: handler}
	self208.processorMap["hkeys"] = &laserServiceProcessorHkeys{handler: handler}
	self208.processorMap["hlen"] = &laserServiceProcessorHlen{handler: handler}
	self208.processorMap["hmget"] = &laserServiceProcessorHmget{handler: handler}
	self208.processorMap["hmset"] = &laserServiceProcessorHmset{handler: handler}
	self208.processorMap["lindex"] = &laserServiceProcessorLindex{handler: handler}
	self208.processorMap["llen"] = &laserServiceProcessorLlen{handler: handler}
	self208.processorMap["lpop"] = &laserServiceProcessorLpop{handler: handler}
	self208.processorMap["lpush"] = &laserServiceProcessorLpush{handler: handler}
	self208.processorMap["lrange"] = &laserServiceProcessorLrange{handler: handler}
	self208.processorMap["rpop"] = &laserServiceProcessorRpop{handler: handler}
	self208.processorMap["rpush"] = &laserServiceProcessorRpush{handler: handler}
	self208.processorMap["sadd"] = &laserServiceProcessorSadd{handler: handler}
	self208.processorMap["scard"] = &laserServiceProcessorScard{handler: handler}
	self208.processorMap["sismember"] = &laserServiceProcessorSismember{handler: handler}
	self208.processorMap["sremove"] = &laserServiceProcessorSremove{handler: handler}
	self208.processorMap["smembers"] = &laserServiceProcessorSmembers{handler: handler}
	self208.processorMap["zadd"] = &laserServiceProcessorZadd{handler: handler}
	self208.processorMap["zcard"] = &laserServiceProcessorZcard{handler: handler}
	self208.processorMap["zrank"] = &laserServiceProcessorZrank{handler: handler}
	self208.processorMap["zscore"] = &laserServiceProcessorZscore{handler: handler}
	self208.processorMap["zrem"] = &laserServiceProcessorZrem{handler: handler}
	self208.processorMap["zrange"] = &laserServiceProcessorZrange{handler: handler}
	self208.processorMap["zrangeByScore"] = &laserServiceProcessorZrangeByScore{handler: handler}
	self208.processorMap["zremRangeByScore"] = &laserServiceProcessorZremRangeByScore{handler: handler}
	return self208
}

type laserServiceProcessorDelkey struct {
	handler LaserService
}

func (p *laserServiceProcessorDelkey) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
	args := LaserServiceDelkeyArgs{}
	if err := args.Read(iprot); err != nil {
		return nil, err
	}
	iprot.ReadMessageEnd()
	return &args, nil
}

func (p *laserServiceProcessorDelkey) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
	var err2 error
	messageType := thrift.REPLY
	switch v := result.(type) {
	case *LaserException:
		msg := LaserServiceDelkeyResult{E: v}
		result = &msg
	case thrift.ApplicationException:
		messageType = thrift.EXCEPTION
	}
	if err2 = oprot.WriteMessageBegin("delkey", messageType, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	return err
}

func (p *laserServiceProcessorDelkey) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
	args := argStruct.(*LaserServiceDelkeyArgs)
	var result LaserServiceDelkeyResult
	if retval, err := p.handler.Delkey(args.Key); err != nil {
		switch v := err.(type) {
		case *LaserException:
			result.E = v
		default:
			x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing delkey: "+err.Error())
			return x, x
		}
	} else {
		result.Success = retval
	}
	return &result, nil
}

type laserServiceProcessorExists struct {
	handler LaserService
}

func (p *laserServiceProcessorExists) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
	args := LaserServiceExistsArgs{}
	if err := args.Read(iprot); err != nil {
		return nil, err
	}
	iprot.ReadMessageEnd()
	return &args, nil
}

func (p *laserServiceProcessorExists) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
	var err2 error
	messageType := thrift.REPLY
	switch v := result.(type) {
	case *LaserException:
		msg := LaserServiceExistsResult{E: v}
		result = &msg
	case thrift.ApplicationException:
		messageType = thrift.EXCEPTION
	}
	if err2 = oprot.WriteMessageBegin("exists", messageType, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	return err
}

func (p *laserServiceProcessorExists) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
	args := argStruct.(*LaserServiceExistsArgs)
	var result LaserServiceExistsResult
	if retval, err := p.handler.Exists(args.Key); err != nil {
		switch v := err.(type) {
		case *LaserException:
			result.E = v
		default:
			x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing exists: "+err.Error())
			return x, x
		}
	} else {
		result.Success = retval
	}
	return &result, nil
}

type laserServiceProcessorExpire struct {
	handler LaserService
}

func (p *laserServiceProcessorExpire) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
	args := LaserServiceExpireArgs{}
	if err := args.Read(iprot); err != nil {
		return nil, err
	}
	iprot.ReadMessageEnd()
	return &args, nil
}

func (p *laserServiceProcessorExpire) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
	var err2 error
	messageType := thrift.REPLY
	switch v := result.(type) {
	case *LaserException:
		msg := LaserServiceExpireResult{E: v}
		result = &msg
	case thrift.ApplicationException:
		messageType = thrift.EXCEPTION
	}
	if err2 = oprot.WriteMessageBegin("expire", messageType, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	return err
}

func (p *laserServiceProcessorExpire) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
	args := argStruct.(*LaserServiceExpireArgs)
	var result LaserServiceExpireResult
	if retval, err := p.handler.Expire(args.Key, args.Time); err != nil {
		switch v := err.(type) {
		case *LaserException:
			result.E = v
		default:
			x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing expire: "+err.Error())
			return x, x
		}
	} else {
		result.Success = retval
	}
	return &result, nil
}

type laserServiceProcessorExpireAt struct {
	handler LaserService
}

func (p *laserServiceProcessorExpireAt) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
	args := LaserServiceExpireAtArgs{}
	if err := args.Read(iprot); err != nil {
		return nil, err
	}
	iprot.ReadMessageEnd()
	return &args, nil
}

func (p *laserServiceProcessorExpireAt) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
	var err2 error
	messageType := thrift.REPLY
	switch v := result.(type) {
	case *LaserException:
		msg := LaserServiceExpireAtResult{E: v}
		result = &msg
	case thrift.ApplicationException:
		messageType = thrift.EXCEPTION
	}
	if err2 = oprot.WriteMessageBegin("expireAt", messageType, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	return err
}

func (p *laserServiceProcessorExpireAt) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
	args := argStruct.(*LaserServiceExpireAtArgs)
	var result LaserServiceExpireAtResult
	if retval, err := p.handler.ExpireAt(args.Key, args.TimeAt); err != nil {
		switch v := err.(type) {
		case *LaserException:
			result.E = v
		default:
			x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing expireAt: "+err.Error())
			return x, x
		}
	} else {
		result.Success = retval
	}
	return &result, nil
}

type laserServiceProcessorTtl struct {
	handler LaserService
}

func (p *laserServiceProcessorTtl) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
	args := LaserServiceTtlArgs{}
	if err := args.Read(iprot); err != nil {
		return nil, err
	}
	iprot.ReadMessageEnd()
	return &args, nil
}

func (p *laserServiceProcessorTtl) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
	var err2 error
	messageType := thrift.REPLY
	switch v := result.(type) {
	case *LaserException:
		msg := LaserServiceTtlResult{E: v}
		result = &msg
	case thrift.ApplicationException:
		messageType = thrift.EXCEPTION
	}
	if err2 = oprot.WriteMessageBegin("ttl", messageType, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	return err
}

func (p *laserServiceProcessorTtl) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
	args := argStruct.(*LaserServiceTtlArgs)
	var result LaserServiceTtlResult
	if retval, err := p.handler.Ttl(args.Key); err != nil {
		switch v := err.(type) {
		case *LaserException:
			result.E = v
		default:
			x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ttl: "+err.Error())
			return x, x
		}
	} else {
		result.Success = retval
	}
	return &result, nil
}

type laserServiceProcessorAppend struct {
	handler LaserService
}

func (p *laserServiceProcessorAppend) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
	args := LaserServiceAppendArgs{}
	if err := args.Read(iprot); err != nil {
		return nil, err
	}
	iprot.ReadMessageEnd()
	return &args, nil
}

func (p *laserServiceProcessorAppend) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
	var err2 error
	messageType := thrift.REPLY
	switch v := result.(type) {
	case *LaserException:
		msg := LaserServiceAppendResult{E: v}
		result = &msg
	case thrift.ApplicationException:
		messageType = thrift.EXCEPTION
	}
	if err2 = oprot.WriteMessageBegin("append", messageType, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	return err
}

func (p *laserServiceProcessorAppend) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
	args := argStruct.(*LaserServiceAppendArgs)
	var result LaserServiceAppendResult
	if retval, err := p.handler.Append(args.Key, args.Value); err != nil {
		switch v := err.(type) {
		case *LaserException:
			result.E = v
		default:
			x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing append: "+err.Error())
			return x, x
		}
	} else {
		result.Success = retval
	}
	return &result, nil
}

type laserServiceProcessorGet struct {
	handler LaserService
}

func (p *laserServiceProcessorGet) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
	args := LaserServiceGetArgs{}
	if err := args.Read(iprot); err != nil {
		return nil, err
	}
	iprot.ReadMessageEnd()
	return &args, nil
}

func (p *laserServiceProcessorGet) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
	var err2 error
	messageType := thrift.REPLY
	switch v := result.(type) {
	case *LaserException:
		msg := LaserServiceGetResult{E: v}
		result = &msg
	case thrift.ApplicationException:
		messageType = thrift.EXCEPTION
	}
	if err2 = oprot.WriteMessageBegin("get", messageType, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	return err
}

func (p *laserServiceProcessorGet) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
	args := argStruct.(*LaserServiceGetArgs)
	var result LaserServiceGetResult
	if retval, err := p.handler.Get(args.Key); err != nil {
		switch v := err.(type) {
		case *LaserException:
			result.E = v
		default:
			x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get: "+err.Error())
			return x, x
		}
	} else {
		result.Success = retval
	}
	return &result, nil
}

type laserServiceProcessorSset struct {
	handler LaserService
}

func (p *laserServiceProcessorSset) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
	args := LaserServiceSsetArgs{}
	if err := args.Read(iprot); err != nil {
		return nil, err
	}
	iprot.ReadMessageEnd()
	return &args, nil
}

func (p *laserServiceProcessorSset) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
	var err2 error
	messageType := thrift.REPLY
	switch v := result.(type) {
	case *LaserException:
		msg := LaserServiceSsetResult{E: v}
		result = &msg
	case thrift.ApplicationException:
		messageType = thrift.EXCEPTION
	}
	if err2 = oprot.WriteMessageBegin("sset", messageType, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	return err
}

func (p *laserServiceProcessorSset) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
	args := argStruct.(*LaserServiceSsetArgs)
	var result LaserServiceSsetResult
	if retval, err := p.handler.Sset(args.Kv); err != nil {
		switch v := err.(type) {
		case *LaserException:
			result.E = v
		default:
			x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing sset: "+err.Error())
			return x, x
		}
	} else {
		result.Success = retval
	}
	return &result, nil
}

type laserServiceProcessorSetx struct {
	handler LaserService
}

func (p *laserServiceProcessorSetx) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
	args := LaserServiceSetxArgs{}
	if err := args.Read(iprot); err != nil {
		return nil, err
	}
	iprot.ReadMessageEnd()
	return &args, nil
}

func (p *laserServiceProcessorSetx) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
	var err2 error
	messageType := thrift.REPLY
	switch v := result.(type) {
	case *LaserException:
		msg := LaserServiceSetxResult{E: v}
		result = &msg
	case thrift.ApplicationException:
		messageType = thrift.EXCEPTION
	}
	if err2 = oprot.WriteMessageBegin("setx", messageType, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	return err
}

func (p *laserServiceProcessorSetx) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
	args := argStruct.(*LaserServiceSetxArgs)
	var result LaserServiceSetxResult
	if retval, err := p.handler.Setx(args.Kv, args.Option); err != nil {
		switch v := err.(type) {
		case *LaserException:
			result.E = v
		default:
			x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing setx: "+err.Error())
			return x, x
		}
	} else {
		result.Success = retval
	}
	return &result, nil
}

type laserServiceProcessorMget struct {
	handler LaserService
}

func (p *laserServiceProcessorMget) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
	args := LaserServiceMgetArgs{}
	if err := args.Read(iprot); err != nil {
		return nil, err
	}
	iprot.ReadMessageEnd()
	return &args, nil
}

func (p *laserServiceProcessorMget) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
	var err2 error
	messageType := thrift.REPLY
	switch v := result.(type) {
	case *LaserException:
		msg := LaserServiceMgetResult{E: v}
		result = &msg
	case thrift.ApplicationException:
		messageType = thrift.EXCEPTION
	}
	if err2 = oprot.WriteMessageBegin("mget", messageType, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	return err
}

func (p *laserServiceProcessorMget) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
	args := argStruct.(*LaserServiceMgetArgs)
	var result LaserServiceMgetResult
	if retval, err := p.handler.Mget(args.Keys); err != nil {
		switch v := err.(type) {
		case *LaserException:
			result.E = v
		default:
			x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing mget: "+err.Error())
			return x, x
		}
	} else {
		result.Success = retval
	}
	return &result, nil
}

type laserServiceProcessorMset struct {
	handler LaserService
}

func (p *laserServiceProcessorMset) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
	args := LaserServiceMsetArgs{}
	if err := args.Read(iprot); err != nil {
		return nil, err
	}
	iprot.ReadMessageEnd()
	return &args, nil
}

func (p *laserServiceProcessorMset) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
	var err2 error
	messageType := thrift.REPLY
	switch v := result.(type) {
	case *LaserException:
		msg := LaserServiceMsetResult{E: v}
		result = &msg
	case thrift.ApplicationException:
		messageType = thrift.EXCEPTION
	}
	if err2 = oprot.WriteMessageBegin("mset", messageType, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	return err
}

func (p *laserServiceProcessorMset) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
	args := argStruct.(*LaserServiceMsetArgs)
	var result LaserServiceMsetResult
	if retval, err := p.handler.Mset(args.Values); err != nil {
		switch v := err.(type) {
		case *LaserException:
			result.E = v
		default:
			x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing mset: "+err.Error())
			return x, x
		}
	} else {
		result.Success = retval
	}
	return &result, nil
}

type laserServiceProcessorMgetDetail struct {
	handler LaserService
}

func (p *laserServiceProcessorMgetDetail) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
	args := LaserServiceMgetDetailArgs{}
	if err := args.Read(iprot); err != nil {
		return nil, err
	}
	iprot.ReadMessageEnd()
	return &args, nil
}

func (p *laserServiceProcessorMgetDetail) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
	var err2 error
	messageType := thrift.REPLY
	switch v := result.(type) {
	case *LaserException:
		msg := LaserServiceMgetDetailResult{E: v}
		result = &msg
	case thrift.ApplicationException:
		messageType = thrift.EXCEPTION
	}
	if err2 = oprot.WriteMessageBegin("mgetDetail", messageType, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	return err
}

func (p *laserServiceProcessorMgetDetail) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
	args := argStruct.(*LaserServiceMgetDetailArgs)
	var result LaserServiceMgetDetailResult
	if retval, err := p.handler.MgetDetail(args.Keys); err != nil {
		switch v := err.(type) {
		case *LaserException:
			result.E = v
		default:
			x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing mgetDetail: "+err.Error())
			return x, x
		}
	} else {
		result.Success = retval
	}
	return &result, nil
}

type laserServiceProcessorMsetDetail struct {
	handler LaserService
}

func (p *laserServiceProcessorMsetDetail) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
	args := LaserServiceMsetDetailArgs{}
	if err := args.Read(iprot); err != nil {
		return nil, err
	}
	iprot.ReadMessageEnd()
	return &args, nil
}

func (p *laserServiceProcessorMsetDetail) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
	var err2 error
	messageType := thrift.REPLY
	switch v := result.(type) {
	case *LaserException:
		msg := LaserServiceMsetDetailResult{E: v}
		result = &msg
	case thrift.ApplicationException:
		messageType = thrift.EXCEPTION
	}
	if err2 = oprot.WriteMessageBegin("msetDetail", messageType, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	return err
}

func (p *laserServiceProcessorMsetDetail) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
	args := argStruct.(*LaserServiceMsetDetailArgs)
	var result LaserServiceMsetDetailResult
	if retval, err := p.handler.MsetDetail(args.Values, args.Option); err != nil {
		switch v := err.(type) {
		case *LaserException:
			result.E = v
		default:
			x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing msetDetail: "+err.Error())
			return x, x
		}
	} else {
		result.Success = retval
	}
	return &result, nil
}

type laserServiceProcessorMdel struct {
	handler LaserService
}

func (p *laserServiceProcessorMdel) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
	args := LaserServiceMdelArgs{}
	if err := args.Read(iprot); err != nil {
		return nil, err
	}
	iprot.ReadMessageEnd()
	return &args, nil
}

func (p *laserServiceProcessorMdel) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
	var err2 error
	messageType := thrift.REPLY
	switch v := result.(type) {
	case *LaserException:
		msg := LaserServiceMdelResult{E: v}
		result = &msg
	case thrift.ApplicationException:
		messageType = thrift.EXCEPTION
	}
	if err2 = oprot.WriteMessageBegin("mdel", messageType, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	return err
}

func (p *laserServiceProcessorMdel) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
	args := argStruct.(*LaserServiceMdelArgs)
	var result LaserServiceMdelResult
	if retval, err := p.handler.Mdel(args.Keys); err != nil {
		switch v := err.(type) {
		case *LaserException:
			result.E = v
		default:
			x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing mdel: "+err.Error())
			return x, x
		}
	} else {
		result.Success = retval
	}
	return &result, nil
}

type laserServiceProcessorExist struct {
	handler LaserService
}

func (p *laserServiceProcessorExist) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
	args := LaserServiceExistArgs{}
	if err := args.Read(iprot); err != nil {
		return nil, err
	}
	iprot.ReadMessageEnd()
	return &args, nil
}

func (p *laserServiceProcessorExist) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
	var err2 error
	messageType := thrift.REPLY
	switch v := result.(type) {
	case *LaserException:
		msg := LaserServiceExistResult{E: v}
		result = &msg
	case thrift.ApplicationException:
		messageType = thrift.EXCEPTION
	}
	if err2 = oprot.WriteMessageBegin("exist", messageType, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	return err
}

func (p *laserServiceProcessorExist) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
	args := argStruct.(*LaserServiceExistArgs)
	var result LaserServiceExistResult
	if retval, err := p.handler.Exist(args.Key); err != nil {
		switch v := err.(type) {
		case *LaserException:
			result.E = v
		default:
			x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing exist: "+err.Error())
			return x, x
		}
	} else {
		result.Success = retval
	}
	return &result, nil
}

type laserServiceProcessorDecr struct {
	handler LaserService
}

func (p *laserServiceProcessorDecr) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
	args := LaserServiceDecrArgs{}
	if err := args.Read(iprot); err != nil {
		return nil, err
	}
	iprot.ReadMessageEnd()
	return &args, nil
}

func (p *laserServiceProcessorDecr) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
	var err2 error
	messageType := thrift.REPLY
	switch v := result.(type) {
	case *LaserException:
		msg := LaserServiceDecrResult{E: v}
		result = &msg
	case thrift.ApplicationException:
		messageType = thrift.EXCEPTION
	}
	if err2 = oprot.WriteMessageBegin("decr", messageType, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	return err
}

func (p *laserServiceProcessorDecr) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
	args := argStruct.(*LaserServiceDecrArgs)
	var result LaserServiceDecrResult
	if retval, err := p.handler.Decr(args.Key); err != nil {
		switch v := err.(type) {
		case *LaserException:
			result.E = v
		default:
			x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing decr: "+err.Error())
			return x, x
		}
	} else {
		result.Success = retval
	}
	return &result, nil
}

type laserServiceProcessorIncr struct {
	handler LaserService
}

func (p *laserServiceProcessorIncr) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
	args := LaserServiceIncrArgs{}
	if err := args.Read(iprot); err != nil {
		return nil, err
	}
	iprot.ReadMessageEnd()
	return &args, nil
}

func (p *laserServiceProcessorIncr) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
	var err2 error
	messageType := thrift.REPLY
	switch v := result.(type) {
	case *LaserException:
		msg := LaserServiceIncrResult{E: v}
		result = &msg
	case thrift.ApplicationException:
		messageType = thrift.EXCEPTION
	}
	if err2 = oprot.WriteMessageBegin("incr", messageType, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	return err
}

func (p *laserServiceProcessorIncr) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
	args := argStruct.(*LaserServiceIncrArgs)
	var result LaserServiceIncrResult
	if retval, err := p.handler.Incr(args.Key); err != nil {
		switch v := err.(type) {
		case *LaserException:
			result.E = v
		default:
			x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing incr: "+err.Error())
			return x, x
		}
	} else {
		result.Success = retval
	}
	return &result, nil
}

type laserServiceProcessorDecrBy struct {
	handler LaserService
}

func (p *laserServiceProcessorDecrBy) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
	args := LaserServiceDecrByArgs{}
	if err := args.Read(iprot); err != nil {
		return nil, err
	}
	iprot.ReadMessageEnd()
	return &args, nil
}

func (p *laserServiceProcessorDecrBy) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
	var err2 error
	messageType := thrift.REPLY
	switch v := result.(type) {
	case *LaserException:
		msg := LaserServiceDecrByResult{E: v}
		result = &msg
	case thrift.ApplicationException:
		messageType = thrift.EXCEPTION
	}
	if err2 = oprot.WriteMessageBegin("decrBy", messageType, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	return err
}

func (p *laserServiceProcessorDecrBy) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
	args := argStruct.(*LaserServiceDecrByArgs)
	var result LaserServiceDecrByResult
	if retval, err := p.handler.DecrBy(args.Key, args.Step); err != nil {
		switch v := err.(type) {
		case *LaserException:
			result.E = v
		default:
			x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing decrBy: "+err.Error())
			return x, x
		}
	} else {
		result.Success = retval
	}
	return &result, nil
}

type laserServiceProcessorIncrBy struct {
	handler LaserService
}

func (p *laserServiceProcessorIncrBy) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
	args := LaserServiceIncrByArgs{}
	if err := args.Read(iprot); err != nil {
		return nil, err
	}
	iprot.ReadMessageEnd()
	return &args, nil
}

func (p *laserServiceProcessorIncrBy) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
	var err2 error
	messageType := thrift.REPLY
	switch v := result.(type) {
	case *LaserException:
		msg := LaserServiceIncrByResult{E: v}
		result = &msg
	case thrift.ApplicationException:
		messageType = thrift.EXCEPTION
	}
	if err2 = oprot.WriteMessageBegin("incrBy", messageType, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	return err
}

func (p *laserServiceProcessorIncrBy) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
	args := argStruct.(*LaserServiceIncrByArgs)
	var result LaserServiceIncrByResult
	if retval, err := p.handler.IncrBy(args.Key, args.Step); err != nil {
		switch v := err.(type) {
		case *LaserException:
			result.E = v
		default:
			x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing incrBy: "+err.Error())
			return x, x
		}
	} else {
		result.Success = retval
	}
	return &result, nil
}

type laserServiceProcessorHdel struct {
	handler LaserService
}

func (p *laserServiceProcessorHdel) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
	args := LaserServiceHdelArgs{}
	if err := args.Read(iprot); err != nil {
		return nil, err
	}
	iprot.ReadMessageEnd()
	return &args, nil
}

func (p *laserServiceProcessorHdel) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
	var err2 error
	messageType := thrift.REPLY
	switch v := result.(type) {
	case *LaserException:
		msg := LaserServiceHdelResult{E: v}
		result = &msg
	case thrift.ApplicationException:
		messageType = thrift.EXCEPTION
	}
	if err2 = oprot.WriteMessageBegin("hdel", messageType, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	return err
}

func (p *laserServiceProcessorHdel) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
	args := argStruct.(*LaserServiceHdelArgs)
	var result LaserServiceHdelResult
	if retval, err := p.handler.Hdel(args.Key, args.Field); err != nil {
		switch v := err.(type) {
		case *LaserException:
			result.E = v
		default:
			x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing hdel: "+err.Error())
			return x, x
		}
	} else {
		result.Success = retval
	}
	return &result, nil
}

type laserServiceProcessorHexists struct {
	handler LaserService
}

func (p *laserServiceProcessorHexists) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
	args := LaserServiceHexistsArgs{}
	if err := args.Read(iprot); err != nil {
		return nil, err
	}
	iprot.ReadMessageEnd()
	return &args, nil
}

func (p *laserServiceProcessorHexists) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
	var err2 error
	messageType := thrift.REPLY
	switch v := result.(type) {
	case *LaserException:
		msg := LaserServiceHexistsResult{E: v}
		result = &msg
	case thrift.ApplicationException:
		messageType = thrift.EXCEPTION
	}
	if err2 = oprot.WriteMessageBegin("hexists", messageType, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	return err
}

func (p *laserServiceProcessorHexists) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
	args := argStruct.(*LaserServiceHexistsArgs)
	var result LaserServiceHexistsResult
	if retval, err := p.handler.Hexists(args.Key, args.Field); err != nil {
		switch v := err.(type) {
		case *LaserException:
			result.E = v
		default:
			x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing hexists: "+err.Error())
			return x, x
		}
	} else {
		result.Success = retval
	}
	return &result, nil
}

type laserServiceProcessorHget struct {
	handler LaserService
}

func (p *laserServiceProcessorHget) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
	args := LaserServiceHgetArgs{}
	if err := args.Read(iprot); err != nil {
		return nil, err
	}
	iprot.ReadMessageEnd()
	return &args, nil
}

func (p *laserServiceProcessorHget) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
	var err2 error
	messageType := thrift.REPLY
	switch v := result.(type) {
	case *LaserException:
		msg := LaserServiceHgetResult{E: v}
		result = &msg
	case thrift.ApplicationException:
		messageType = thrift.EXCEPTION
	}
	if err2 = oprot.WriteMessageBegin("hget", messageType, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	return err
}

func (p *laserServiceProcessorHget) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
	args := argStruct.(*LaserServiceHgetArgs)
	var result LaserServiceHgetResult
	if retval, err := p.handler.Hget(args.Key, args.Field); err != nil {
		switch v := err.(type) {
		case *LaserException:
			result.E = v
		default:
			x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing hget: "+err.Error())
			return x, x
		}
	} else {
		result.Success = retval
	}
	return &result, nil
}

type laserServiceProcessorHset struct {
	handler LaserService
}

func (p *laserServiceProcessorHset) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
	args := LaserServiceHsetArgs{}
	if err := args.Read(iprot); err != nil {
		return nil, err
	}
	iprot.ReadMessageEnd()
	return &args, nil
}

func (p *laserServiceProcessorHset) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
	var err2 error
	messageType := thrift.REPLY
	switch v := result.(type) {
	case *LaserException:
		msg := LaserServiceHsetResult{E: v}
		result = &msg
	case thrift.ApplicationException:
		messageType = thrift.EXCEPTION
	}
	if err2 = oprot.WriteMessageBegin("hset", messageType, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	return err
}

func (p *laserServiceProcessorHset) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
	args := argStruct.(*LaserServiceHsetArgs)
	var result LaserServiceHsetResult
	if retval, err := p.handler.Hset(args.Key, args.Field, args.Value); err != nil {
		switch v := err.(type) {
		case *LaserException:
			result.E = v
		default:
			x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing hset: "+err.Error())
			return x, x
		}
	} else {
		result.Success = retval
	}
	return &result, nil
}

type laserServiceProcessorHgetall struct {
	handler LaserService
}

func (p *laserServiceProcessorHgetall) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
	args := LaserServiceHgetallArgs{}
	if err := args.Read(iprot); err != nil {
		return nil, err
	}
	iprot.ReadMessageEnd()
	return &args, nil
}

func (p *laserServiceProcessorHgetall) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
	var err2 error
	messageType := thrift.REPLY
	switch v := result.(type) {
	case *LaserException:
		msg := LaserServiceHgetallResult{E: v}
		result = &msg
	case thrift.ApplicationException:
		messageType = thrift.EXCEPTION
	}
	if err2 = oprot.WriteMessageBegin("hgetall", messageType, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	return err
}

func (p *laserServiceProcessorHgetall) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
	args := argStruct.(*LaserServiceHgetallArgs)
	var result LaserServiceHgetallResult
	if retval, err := p.handler.Hgetall(args.Key); err != nil {
		switch v := err.(type) {
		case *LaserException:
			result.E = v
		default:
			x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing hgetall: "+err.Error())
			return x, x
		}
	} else {
		result.Success = retval
	}
	return &result, nil
}

type laserServiceProcessorHkeys struct {
	handler LaserService
}

func (p *laserServiceProcessorHkeys) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
	args := LaserServiceHkeysArgs{}
	if err := args.Read(iprot); err != nil {
		return nil, err
	}
	iprot.ReadMessageEnd()
	return &args, nil
}

func (p *laserServiceProcessorHkeys) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
	var err2 error
	messageType := thrift.REPLY
	switch v := result.(type) {
	case *LaserException:
		msg := LaserServiceHkeysResult{E: v}
		result = &msg
	case thrift.ApplicationException:
		messageType = thrift.EXCEPTION
	}
	if err2 = oprot.WriteMessageBegin("hkeys", messageType, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	return err
}

func (p *laserServiceProcessorHkeys) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
	args := argStruct.(*LaserServiceHkeysArgs)
	var result LaserServiceHkeysResult
	if retval, err := p.handler.Hkeys(args.Key); err != nil {
		switch v := err.(type) {
		case *LaserException:
			result.E = v
		default:
			x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing hkeys: "+err.Error())
			return x, x
		}
	} else {
		result.Success = retval
	}
	return &result, nil
}

type laserServiceProcessorHlen struct {
	handler LaserService
}

func (p *laserServiceProcessorHlen) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
	args := LaserServiceHlenArgs{}
	if err := args.Read(iprot); err != nil {
		return nil, err
	}
	iprot.ReadMessageEnd()
	return &args, nil
}

func (p *laserServiceProcessorHlen) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
	var err2 error
	messageType := thrift.REPLY
	switch v := result.(type) {
	case *LaserException:
		msg := LaserServiceHlenResult{E: v}
		result = &msg
	case thrift.ApplicationException:
		messageType = thrift.EXCEPTION
	}
	if err2 = oprot.WriteMessageBegin("hlen", messageType, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	return err
}

func (p *laserServiceProcessorHlen) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
	args := argStruct.(*LaserServiceHlenArgs)
	var result LaserServiceHlenResult
	if retval, err := p.handler.Hlen(args.Key); err != nil {
		switch v := err.(type) {
		case *LaserException:
			result.E = v
		default:
			x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing hlen: "+err.Error())
			return x, x
		}
	} else {
		result.Success = retval
	}
	return &result, nil
}

type laserServiceProcessorHmget struct {
	handler LaserService
}

func (p *laserServiceProcessorHmget) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
	args := LaserServiceHmgetArgs{}
	if err := args.Read(iprot); err != nil {
		return nil, err
	}
	iprot.ReadMessageEnd()
	return &args, nil
}

func (p *laserServiceProcessorHmget) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
	var err2 error
	messageType := thrift.REPLY
	switch v := result.(type) {
	case *LaserException:
		msg := LaserServiceHmgetResult{E: v}
		result = &msg
	case thrift.ApplicationException:
		messageType = thrift.EXCEPTION
	}
	if err2 = oprot.WriteMessageBegin("hmget", messageType, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	return err
}

func (p *laserServiceProcessorHmget) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
	args := argStruct.(*LaserServiceHmgetArgs)
	var result LaserServiceHmgetResult
	if retval, err := p.handler.Hmget(args.Key, args.Fields); err != nil {
		switch v := err.(type) {
		case *LaserException:
			result.E = v
		default:
			x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing hmget: "+err.Error())
			return x, x
		}
	} else {
		result.Success = retval
	}
	return &result, nil
}

type laserServiceProcessorHmset struct {
	handler LaserService
}

func (p *laserServiceProcessorHmset) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
	args := LaserServiceHmsetArgs{}
	if err := args.Read(iprot); err != nil {
		return nil, err
	}
	iprot.ReadMessageEnd()
	return &args, nil
}

func (p *laserServiceProcessorHmset) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
	var err2 error
	messageType := thrift.REPLY
	switch v := result.(type) {
	case *LaserException:
		msg := LaserServiceHmsetResult{E: v}
		result = &msg
	case thrift.ApplicationException:
		messageType = thrift.EXCEPTION
	}
	if err2 = oprot.WriteMessageBegin("hmset", messageType, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	return err
}

func (p *laserServiceProcessorHmset) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
	args := argStruct.(*LaserServiceHmsetArgs)
	var result LaserServiceHmsetResult
	if retval, err := p.handler.Hmset(args.Key, args.Value); err != nil {
		switch v := err.(type) {
		case *LaserException:
			result.E = v
		default:
			x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing hmset: "+err.Error())
			return x, x
		}
	} else {
		result.Success = retval
	}
	return &result, nil
}

type laserServiceProcessorLindex struct {
	handler LaserService
}

func (p *laserServiceProcessorLindex) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
	args := LaserServiceLindexArgs{}
	if err := args.Read(iprot); err != nil {
		return nil, err
	}
	iprot.ReadMessageEnd()
	return &args, nil
}

func (p *laserServiceProcessorLindex) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
	var err2 error
	messageType := thrift.REPLY
	switch v := result.(type) {
	case *LaserException:
		msg := LaserServiceLindexResult{E: v}
		result = &msg
	case thrift.ApplicationException:
		messageType = thrift.EXCEPTION
	}
	if err2 = oprot.WriteMessageBegin("lindex", messageType, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	return err
}

func (p *laserServiceProcessorLindex) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
	args := argStruct.(*LaserServiceLindexArgs)
	var result LaserServiceLindexResult
	if retval, err := p.handler.Lindex(args.Key, args.Index); err != nil {
		switch v := err.(type) {
		case *LaserException:
			result.E = v
		default:
			x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing lindex: "+err.Error())
			return x, x
		}
	} else {
		result.Success = retval
	}
	return &result, nil
}

type laserServiceProcessorLlen struct {
	handler LaserService
}

func (p *laserServiceProcessorLlen) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
	args := LaserServiceLlenArgs{}
	if err := args.Read(iprot); err != nil {
		return nil, err
	}
	iprot.ReadMessageEnd()
	return &args, nil
}

func (p *laserServiceProcessorLlen) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
	var err2 error
	messageType := thrift.REPLY
	switch v := result.(type) {
	case *LaserException:
		msg := LaserServiceLlenResult{E: v}
		result = &msg
	case thrift.ApplicationException:
		messageType = thrift.EXCEPTION
	}
	if err2 = oprot.WriteMessageBegin("llen", messageType, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	return err
}

func (p *laserServiceProcessorLlen) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
	args := argStruct.(*LaserServiceLlenArgs)
	var result LaserServiceLlenResult
	if retval, err := p.handler.Llen(args.Key); err != nil {
		switch v := err.(type) {
		case *LaserException:
			result.E = v
		default:
			x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing llen: "+err.Error())
			return x, x
		}
	} else {
		result.Success = retval
	}
	return &result, nil
}

type laserServiceProcessorLpop struct {
	handler LaserService
}

func (p *laserServiceProcessorLpop) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
	args := LaserServiceLpopArgs{}
	if err := args.Read(iprot); err != nil {
		return nil, err
	}
	iprot.ReadMessageEnd()
	return &args, nil
}

func (p *laserServiceProcessorLpop) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
	var err2 error
	messageType := thrift.REPLY
	switch v := result.(type) {
	case *LaserException:
		msg := LaserServiceLpopResult{E: v}
		result = &msg
	case thrift.ApplicationException:
		messageType = thrift.EXCEPTION
	}
	if err2 = oprot.WriteMessageBegin("lpop", messageType, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	return err
}

func (p *laserServiceProcessorLpop) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
	args := argStruct.(*LaserServiceLpopArgs)
	var result LaserServiceLpopResult
	if retval, err := p.handler.Lpop(args.Key); err != nil {
		switch v := err.(type) {
		case *LaserException:
			result.E = v
		default:
			x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing lpop: "+err.Error())
			return x, x
		}
	} else {
		result.Success = retval
	}
	return &result, nil
}

type laserServiceProcessorLpush struct {
	handler LaserService
}

func (p *laserServiceProcessorLpush) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
	args := LaserServiceLpushArgs{}
	if err := args.Read(iprot); err != nil {
		return nil, err
	}
	iprot.ReadMessageEnd()
	return &args, nil
}

func (p *laserServiceProcessorLpush) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
	var err2 error
	messageType := thrift.REPLY
	switch v := result.(type) {
	case *LaserException:
		msg := LaserServiceLpushResult{E: v}
		result = &msg
	case thrift.ApplicationException:
		messageType = thrift.EXCEPTION
	}
	if err2 = oprot.WriteMessageBegin("lpush", messageType, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	return err
}

func (p *laserServiceProcessorLpush) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
	args := argStruct.(*LaserServiceLpushArgs)
	var result LaserServiceLpushResult
	if retval, err := p.handler.Lpush(args.Key, args.Value); err != nil {
		switch v := err.(type) {
		case *LaserException:
			result.E = v
		default:
			x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing lpush: "+err.Error())
			return x, x
		}
	} else {
		result.Success = retval
	}
	return &result, nil
}

type laserServiceProcessorLrange struct {
	handler LaserService
}

func (p *laserServiceProcessorLrange) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
	args := LaserServiceLrangeArgs{}
	if err := args.Read(iprot); err != nil {
		return nil, err
	}
	iprot.ReadMessageEnd()
	return &args, nil
}

func (p *laserServiceProcessorLrange) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
	var err2 error
	messageType := thrift.REPLY
	switch v := result.(type) {
	case *LaserException:
		msg := LaserServiceLrangeResult{E: v}
		result = &msg
	case thrift.ApplicationException:
		messageType = thrift.EXCEPTION
	}
	if err2 = oprot.WriteMessageBegin("lrange", messageType, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	return err
}

func (p *laserServiceProcessorLrange) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
	args := argStruct.(*LaserServiceLrangeArgs)
	var result LaserServiceLrangeResult
	if retval, err := p.handler.Lrange(args.Key, args.Start, args.End); err != nil {
		switch v := err.(type) {
		case *LaserException:
			result.E = v
		default:
			x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing lrange: "+err.Error())
			return x, x
		}
	} else {
		result.Success = retval
	}
	return &result, nil
}

type laserServiceProcessorRpop struct {
	handler LaserService
}

func (p *laserServiceProcessorRpop) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
	args := LaserServiceRpopArgs{}
	if err := args.Read(iprot); err != nil {
		return nil, err
	}
	iprot.ReadMessageEnd()
	return &args, nil
}

func (p *laserServiceProcessorRpop) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
	var err2 error
	messageType := thrift.REPLY
	switch v := result.(type) {
	case *LaserException:
		msg := LaserServiceRpopResult{E: v}
		result = &msg
	case thrift.ApplicationException:
		messageType = thrift.EXCEPTION
	}
	if err2 = oprot.WriteMessageBegin("rpop", messageType, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	return err
}

func (p *laserServiceProcessorRpop) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
	args := argStruct.(*LaserServiceRpopArgs)
	var result LaserServiceRpopResult
	if retval, err := p.handler.Rpop(args.Key); err != nil {
		switch v := err.(type) {
		case *LaserException:
			result.E = v
		default:
			x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing rpop: "+err.Error())
			return x, x
		}
	} else {
		result.Success = retval
	}
	return &result, nil
}

type laserServiceProcessorRpush struct {
	handler LaserService
}

func (p *laserServiceProcessorRpush) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
	args := LaserServiceRpushArgs{}
	if err := args.Read(iprot); err != nil {
		return nil, err
	}
	iprot.ReadMessageEnd()
	return &args, nil
}

func (p *laserServiceProcessorRpush) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
	var err2 error
	messageType := thrift.REPLY
	switch v := result.(type) {
	case *LaserException:
		msg := LaserServiceRpushResult{E: v}
		result = &msg
	case thrift.ApplicationException:
		messageType = thrift.EXCEPTION
	}
	if err2 = oprot.WriteMessageBegin("rpush", messageType, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	return err
}

func (p *laserServiceProcessorRpush) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
	args := argStruct.(*LaserServiceRpushArgs)
	var result LaserServiceRpushResult
	if retval, err := p.handler.Rpush(args.Key, args.Value); err != nil {
		switch v := err.(type) {
		case *LaserException:
			result.E = v
		default:
			x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing rpush: "+err.Error())
			return x, x
		}
	} else {
		result.Success = retval
	}
	return &result, nil
}

type laserServiceProcessorSadd struct {
	handler LaserService
}

func (p *laserServiceProcessorSadd) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
	args := LaserServiceSaddArgs{}
	if err := args.Read(iprot); err != nil {
		return nil, err
	}
	iprot.ReadMessageEnd()
	return &args, nil
}

func (p *laserServiceProcessorSadd) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
	var err2 error
	messageType := thrift.REPLY
	switch v := result.(type) {
	case *LaserException:
		msg := LaserServiceSaddResult{E: v}
		result = &msg
	case thrift.ApplicationException:
		messageType = thrift.EXCEPTION
	}
	if err2 = oprot.WriteMessageBegin("sadd", messageType, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	return err
}

func (p *laserServiceProcessorSadd) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
	args := argStruct.(*LaserServiceSaddArgs)
	var result LaserServiceSaddResult
	if retval, err := p.handler.Sadd(args.Key, args.Member); err != nil {
		switch v := err.(type) {
		case *LaserException:
			result.E = v
		default:
			x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing sadd: "+err.Error())
			return x, x
		}
	} else {
		result.Success = retval
	}
	return &result, nil
}

type laserServiceProcessorScard struct {
	handler LaserService
}

func (p *laserServiceProcessorScard) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
	args := LaserServiceScardArgs{}
	if err := args.Read(iprot); err != nil {
		return nil, err
	}
	iprot.ReadMessageEnd()
	return &args, nil
}

func (p *laserServiceProcessorScard) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
	var err2 error
	messageType := thrift.REPLY
	switch v := result.(type) {
	case *LaserException:
		msg := LaserServiceScardResult{E: v}
		result = &msg
	case thrift.ApplicationException:
		messageType = thrift.EXCEPTION
	}
	if err2 = oprot.WriteMessageBegin("scard", messageType, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	return err
}

func (p *laserServiceProcessorScard) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
	args := argStruct.(*LaserServiceScardArgs)
	var result LaserServiceScardResult
	if retval, err := p.handler.Scard(args.Req); err != nil {
		switch v := err.(type) {
		case *LaserException:
			result.E = v
		default:
			x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing scard: "+err.Error())
			return x, x
		}
	} else {
		result.Success = retval
	}
	return &result, nil
}

type laserServiceProcessorSismember struct {
	handler LaserService
}

func (p *laserServiceProcessorSismember) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
	args := LaserServiceSismemberArgs{}
	if err := args.Read(iprot); err != nil {
		return nil, err
	}
	iprot.ReadMessageEnd()
	return &args, nil
}

func (p *laserServiceProcessorSismember) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
	var err2 error
	messageType := thrift.REPLY
	switch v := result.(type) {
	case *LaserException:
		msg := LaserServiceSismemberResult{E: v}
		result = &msg
	case thrift.ApplicationException:
		messageType = thrift.EXCEPTION
	}
	if err2 = oprot.WriteMessageBegin("sismember", messageType, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	return err
}

func (p *laserServiceProcessorSismember) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
	args := argStruct.(*LaserServiceSismemberArgs)
	var result LaserServiceSismemberResult
	if retval, err := p.handler.Sismember(args.Req, args.Member); err != nil {
		switch v := err.(type) {
		case *LaserException:
			result.E = v
		default:
			x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing sismember: "+err.Error())
			return x, x
		}
	} else {
		result.Success = retval
	}
	return &result, nil
}

type laserServiceProcessorSremove struct {
	handler LaserService
}

func (p *laserServiceProcessorSremove) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
	args := LaserServiceSremoveArgs{}
	if err := args.Read(iprot); err != nil {
		return nil, err
	}
	iprot.ReadMessageEnd()
	return &args, nil
}

func (p *laserServiceProcessorSremove) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
	var err2 error
	messageType := thrift.REPLY
	switch v := result.(type) {
	case *LaserException:
		msg := LaserServiceSremoveResult{E: v}
		result = &msg
	case thrift.ApplicationException:
		messageType = thrift.EXCEPTION
	}
	if err2 = oprot.WriteMessageBegin("sremove", messageType, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	return err
}

func (p *laserServiceProcessorSremove) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
	args := argStruct.(*LaserServiceSremoveArgs)
	var result LaserServiceSremoveResult
	if retval, err := p.handler.Sremove(args.Req, args.Member); err != nil {
		switch v := err.(type) {
		case *LaserException:
			result.E = v
		default:
			x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing sremove: "+err.Error())
			return x, x
		}
	} else {
		result.Success = retval
	}
	return &result, nil
}

type laserServiceProcessorSmembers struct {
	handler LaserService
}

func (p *laserServiceProcessorSmembers) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
	args := LaserServiceSmembersArgs{}
	if err := args.Read(iprot); err != nil {
		return nil, err
	}
	iprot.ReadMessageEnd()
	return &args, nil
}

func (p *laserServiceProcessorSmembers) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
	var err2 error
	messageType := thrift.REPLY
	switch v := result.(type) {
	case *LaserException:
		msg := LaserServiceSmembersResult{E: v}
		result = &msg
	case thrift.ApplicationException:
		messageType = thrift.EXCEPTION
	}
	if err2 = oprot.WriteMessageBegin("smembers", messageType, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	return err
}

func (p *laserServiceProcessorSmembers) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
	args := argStruct.(*LaserServiceSmembersArgs)
	var result LaserServiceSmembersResult
	if retval, err := p.handler.Smembers(args.Req); err != nil {
		switch v := err.(type) {
		case *LaserException:
			result.E = v
		default:
			x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing smembers: "+err.Error())
			return x, x
		}
	} else {
		result.Success = retval
	}
	return &result, nil
}

type laserServiceProcessorZadd struct {
	handler LaserService
}

func (p *laserServiceProcessorZadd) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
	args := LaserServiceZaddArgs{}
	if err := args.Read(iprot); err != nil {
		return nil, err
	}
	iprot.ReadMessageEnd()
	return &args, nil
}

func (p *laserServiceProcessorZadd) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
	var err2 error
	messageType := thrift.REPLY
	switch v := result.(type) {
	case *LaserException:
		msg := LaserServiceZaddResult{E: v}
		result = &msg
	case thrift.ApplicationException:
		messageType = thrift.EXCEPTION
	}
	if err2 = oprot.WriteMessageBegin("zadd", messageType, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	return err
}

func (p *laserServiceProcessorZadd) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
	args := argStruct.(*LaserServiceZaddArgs)
	var result LaserServiceZaddResult
	if retval, err := p.handler.Zadd(args.Key, args.MemberScore); err != nil {
		switch v := err.(type) {
		case *LaserException:
			result.E = v
		default:
			x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing zadd: "+err.Error())
			return x, x
		}
	} else {
		result.Success = retval
	}
	return &result, nil
}

type laserServiceProcessorZcard struct {
	handler LaserService
}

func (p *laserServiceProcessorZcard) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
	args := LaserServiceZcardArgs{}
	if err := args.Read(iprot); err != nil {
		return nil, err
	}
	iprot.ReadMessageEnd()
	return &args, nil
}

func (p *laserServiceProcessorZcard) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
	var err2 error
	messageType := thrift.REPLY
	switch v := result.(type) {
	case *LaserException:
		msg := LaserServiceZcardResult{E: v}
		result = &msg
	case thrift.ApplicationException:
		messageType = thrift.EXCEPTION
	}
	if err2 = oprot.WriteMessageBegin("zcard", messageType, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	return err
}

func (p *laserServiceProcessorZcard) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
	args := argStruct.(*LaserServiceZcardArgs)
	var result LaserServiceZcardResult
	if retval, err := p.handler.Zcard(args.Key); err != nil {
		switch v := err.(type) {
		case *LaserException:
			result.E = v
		default:
			x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing zcard: "+err.Error())
			return x, x
		}
	} else {
		result.Success = retval
	}
	return &result, nil
}

type laserServiceProcessorZrank struct {
	handler LaserService
}

func (p *laserServiceProcessorZrank) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
	args := LaserServiceZrankArgs{}
	if err := args.Read(iprot); err != nil {
		return nil, err
	}
	iprot.ReadMessageEnd()
	return &args, nil
}

func (p *laserServiceProcessorZrank) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
	var err2 error
	messageType := thrift.REPLY
	switch v := result.(type) {
	case *LaserException:
		msg := LaserServiceZrankResult{E: v}
		result = &msg
	case thrift.ApplicationException:
		messageType = thrift.EXCEPTION
	}
	if err2 = oprot.WriteMessageBegin("zrank", messageType, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	return err
}

func (p *laserServiceProcessorZrank) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
	args := argStruct.(*LaserServiceZrankArgs)
	var result LaserServiceZrankResult
	if retval, err := p.handler.Zrank(args.Key, args.Member); err != nil {
		switch v := err.(type) {
		case *LaserException:
			result.E = v
		default:
			x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing zrank: "+err.Error())
			return x, x
		}
	} else {
		result.Success = retval
	}
	return &result, nil
}

type laserServiceProcessorZscore struct {
	handler LaserService
}

func (p *laserServiceProcessorZscore) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
	args := LaserServiceZscoreArgs{}
	if err := args.Read(iprot); err != nil {
		return nil, err
	}
	iprot.ReadMessageEnd()
	return &args, nil
}

func (p *laserServiceProcessorZscore) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
	var err2 error
	messageType := thrift.REPLY
	switch v := result.(type) {
	case *LaserException:
		msg := LaserServiceZscoreResult{E: v}
		result = &msg
	case thrift.ApplicationException:
		messageType = thrift.EXCEPTION
	}
	if err2 = oprot.WriteMessageBegin("zscore", messageType, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	return err
}

func (p *laserServiceProcessorZscore) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
	args := argStruct.(*LaserServiceZscoreArgs)
	var result LaserServiceZscoreResult
	if retval, err := p.handler.Zscore(args.Key, args.Member); err != nil {
		switch v := err.(type) {
		case *LaserException:
			result.E = v
		default:
			x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing zscore: "+err.Error())
			return x, x
		}
	} else {
		result.Success = retval
	}
	return &result, nil
}

type laserServiceProcessorZrem struct {
	handler LaserService
}

func (p *laserServiceProcessorZrem) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
	args := LaserServiceZremArgs{}
	if err := args.Read(iprot); err != nil {
		return nil, err
	}
	iprot.ReadMessageEnd()
	return &args, nil
}

func (p *laserServiceProcessorZrem) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
	var err2 error
	messageType := thrift.REPLY
	switch v := result.(type) {
	case *LaserException:
		msg := LaserServiceZremResult{E: v}
		result = &msg
	case thrift.ApplicationException:
		messageType = thrift.EXCEPTION
	}
	if err2 = oprot.WriteMessageBegin("zrem", messageType, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	return err
}

func (p *laserServiceProcessorZrem) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
	args := argStruct.(*LaserServiceZremArgs)
	var result LaserServiceZremResult
	if retval, err := p.handler.Zrem(args.Key, args.Member); err != nil {
		switch v := err.(type) {
		case *LaserException:
			result.E = v
		default:
			x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing zrem: "+err.Error())
			return x, x
		}
	} else {
		result.Success = retval
	}
	return &result, nil
}

type laserServiceProcessorZrange struct {
	handler LaserService
}

func (p *laserServiceProcessorZrange) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
	args := LaserServiceZrangeArgs{}
	if err := args.Read(iprot); err != nil {
		return nil, err
	}
	iprot.ReadMessageEnd()
	return &args, nil
}

func (p *laserServiceProcessorZrange) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
	var err2 error
	messageType := thrift.REPLY
	switch v := result.(type) {
	case *LaserException:
		msg := LaserServiceZrangeResult{E: v}
		result = &msg
	case thrift.ApplicationException:
		messageType = thrift.EXCEPTION
	}
	if err2 = oprot.WriteMessageBegin("zrange", messageType, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	return err
}

func (p *laserServiceProcessorZrange) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
	args := argStruct.(*LaserServiceZrangeArgs)
	var result LaserServiceZrangeResult
	if retval, err := p.handler.Zrange(args.Key, args.Start, args.Stop); err != nil {
		switch v := err.(type) {
		case *LaserException:
			result.E = v
		default:
			x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing zrange: "+err.Error())
			return x, x
		}
	} else {
		result.Success = retval
	}
	return &result, nil
}

type laserServiceProcessorZrangeByScore struct {
	handler LaserService
}

func (p *laserServiceProcessorZrangeByScore) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
	args := LaserServiceZrangeByScoreArgs{}
	if err := args.Read(iprot); err != nil {
		return nil, err
	}
	iprot.ReadMessageEnd()
	return &args, nil
}

func (p *laserServiceProcessorZrangeByScore) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
	var err2 error
	messageType := thrift.REPLY
	switch v := result.(type) {
	case *LaserException:
		msg := LaserServiceZrangeByScoreResult{E: v}
		result = &msg
	case thrift.ApplicationException:
		messageType = thrift.EXCEPTION
	}
	if err2 = oprot.WriteMessageBegin("zrangeByScore", messageType, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	return err
}

func (p *laserServiceProcessorZrangeByScore) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
	args := argStruct.(*LaserServiceZrangeByScoreArgs)
	var result LaserServiceZrangeByScoreResult
	if retval, err := p.handler.ZrangeByScore(args.Key, args.Min, args.Max); err != nil {
		switch v := err.(type) {
		case *LaserException:
			result.E = v
		default:
			x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing zrangeByScore: "+err.Error())
			return x, x
		}
	} else {
		result.Success = retval
	}
	return &result, nil
}

type laserServiceProcessorZremRangeByScore struct {
	handler LaserService
}

func (p *laserServiceProcessorZremRangeByScore) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
	args := LaserServiceZremRangeByScoreArgs{}
	if err := args.Read(iprot); err != nil {
		return nil, err
	}
	iprot.ReadMessageEnd()
	return &args, nil
}

func (p *laserServiceProcessorZremRangeByScore) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
	var err2 error
	messageType := thrift.REPLY
	switch v := result.(type) {
	case *LaserException:
		msg := LaserServiceZremRangeByScoreResult{E: v}
		result = &msg
	case thrift.ApplicationException:
		messageType = thrift.EXCEPTION
	}
	if err2 = oprot.WriteMessageBegin("zremRangeByScore", messageType, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	return err
}

func (p *laserServiceProcessorZremRangeByScore) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
	args := argStruct.(*LaserServiceZremRangeByScoreArgs)
	var result LaserServiceZremRangeByScoreResult
	if retval, err := p.handler.ZremRangeByScore(args.Key, args.Min, args.Max); err != nil {
		switch v := err.(type) {
		case *LaserException:
			result.E = v
		default:
			x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing zremRangeByScore: "+err.Error())
			return x, x
		}
	} else {
		result.Success = retval
	}
	return &result, nil
}

// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Key
type LaserServiceDelkeyArgs struct {
	Key *LaserKey `thrift:"key,1" db:"key" json:"key"`
}

func NewLaserServiceDelkeyArgs() *LaserServiceDelkeyArgs {
	return &LaserServiceDelkeyArgs{}
}

var LaserServiceDelkeyArgs_Key_DEFAULT *LaserKey

func (p *LaserServiceDelkeyArgs) GetKey() *LaserKey {
	if !p.IsSetKey() {
		return LaserServiceDelkeyArgs_Key_DEFAULT
	}
	return p.Key
}
func (p *LaserServiceDelkeyArgs) IsSetKey() bool {
	return p.Key != nil
}

func (p *LaserServiceDelkeyArgs) Read(iprot thrift.Protocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *LaserServiceDelkeyArgs) ReadField1(iprot thrift.Protocol) error {
	p.Key = NewLaserKey()
	if err := p.Key.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Key), err)
	}
	return nil
}

func (p *LaserServiceDelkeyArgs) Write(oprot thrift.Protocol) error {
	if err := oprot.WriteStructBegin("delkey_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *LaserServiceDelkeyArgs) writeField1(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("key", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:key: ", p), err)
	}
	if err := p.Key.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Key), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:key: ", p), err)
	}
	return err
}

func (p *LaserServiceDelkeyArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LaserServiceDelkeyArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type LaserServiceDelkeyResult struct {
	Success *LaserResponse  `thrift:"success,0" db:"success" json:"success,omitempty"`
	E       *LaserException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewLaserServiceDelkeyResult() *LaserServiceDelkeyResult {
	return &LaserServiceDelkeyResult{}
}

var LaserServiceDelkeyResult_Success_DEFAULT *LaserResponse

func (p *LaserServiceDelkeyResult) GetSuccess() *LaserResponse {
	if !p.IsSetSuccess() {
		return LaserServiceDelkeyResult_Success_DEFAULT
	}
	return p.Success
}

var LaserServiceDelkeyResult_E_DEFAULT *LaserException

func (p *LaserServiceDelkeyResult) GetE() *LaserException {
	if !p.IsSetE() {
		return LaserServiceDelkeyResult_E_DEFAULT
	}
	return p.E
}
func (p *LaserServiceDelkeyResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *LaserServiceDelkeyResult) IsSetE() bool {
	return p.E != nil
}

func (p *LaserServiceDelkeyResult) Read(iprot thrift.Protocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *LaserServiceDelkeyResult) ReadField0(iprot thrift.Protocol) error {
	p.Success = NewLaserResponse()
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *LaserServiceDelkeyResult) ReadField1(iprot thrift.Protocol) error {
	p.E = NewLaserException()
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *LaserServiceDelkeyResult) Write(oprot thrift.Protocol) error {
	if err := oprot.WriteStructBegin("delkey_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *LaserServiceDelkeyResult) writeField0(oprot thrift.Protocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *LaserServiceDelkeyResult) writeField1(oprot thrift.Protocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *LaserServiceDelkeyResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LaserServiceDelkeyResult(%+v)", *p)
}

// Attributes:
//  - Key
type LaserServiceExistsArgs struct {
	Key *LaserKey `thrift:"key,1" db:"key" json:"key"`
}

func NewLaserServiceExistsArgs() *LaserServiceExistsArgs {
	return &LaserServiceExistsArgs{}
}

var LaserServiceExistsArgs_Key_DEFAULT *LaserKey

func (p *LaserServiceExistsArgs) GetKey() *LaserKey {
	if !p.IsSetKey() {
		return LaserServiceExistsArgs_Key_DEFAULT
	}
	return p.Key
}
func (p *LaserServiceExistsArgs) IsSetKey() bool {
	return p.Key != nil
}

func (p *LaserServiceExistsArgs) Read(iprot thrift.Protocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *LaserServiceExistsArgs) ReadField1(iprot thrift.Protocol) error {
	p.Key = NewLaserKey()
	if err := p.Key.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Key), err)
	}
	return nil
}

func (p *LaserServiceExistsArgs) Write(oprot thrift.Protocol) error {
	if err := oprot.WriteStructBegin("exists_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *LaserServiceExistsArgs) writeField1(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("key", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:key: ", p), err)
	}
	if err := p.Key.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Key), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:key: ", p), err)
	}
	return err
}

func (p *LaserServiceExistsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LaserServiceExistsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type LaserServiceExistsResult struct {
	Success *LaserResponse  `thrift:"success,0" db:"success" json:"success,omitempty"`
	E       *LaserException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewLaserServiceExistsResult() *LaserServiceExistsResult {
	return &LaserServiceExistsResult{}
}

var LaserServiceExistsResult_Success_DEFAULT *LaserResponse

func (p *LaserServiceExistsResult) GetSuccess() *LaserResponse {
	if !p.IsSetSuccess() {
		return LaserServiceExistsResult_Success_DEFAULT
	}
	return p.Success
}

var LaserServiceExistsResult_E_DEFAULT *LaserException

func (p *LaserServiceExistsResult) GetE() *LaserException {
	if !p.IsSetE() {
		return LaserServiceExistsResult_E_DEFAULT
	}
	return p.E
}
func (p *LaserServiceExistsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *LaserServiceExistsResult) IsSetE() bool {
	return p.E != nil
}

func (p *LaserServiceExistsResult) Read(iprot thrift.Protocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *LaserServiceExistsResult) ReadField0(iprot thrift.Protocol) error {
	p.Success = NewLaserResponse()
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *LaserServiceExistsResult) ReadField1(iprot thrift.Protocol) error {
	p.E = NewLaserException()
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *LaserServiceExistsResult) Write(oprot thrift.Protocol) error {
	if err := oprot.WriteStructBegin("exists_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *LaserServiceExistsResult) writeField0(oprot thrift.Protocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *LaserServiceExistsResult) writeField1(oprot thrift.Protocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *LaserServiceExistsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LaserServiceExistsResult(%+v)", *p)
}

// Attributes:
//  - Key
//  - Time
type LaserServiceExpireArgs struct {
	Key  *LaserKey `thrift:"key,1" db:"key" json:"key"`
	Time int64     `thrift:"time,2" db:"time" json:"time"`
}

func NewLaserServiceExpireArgs() *LaserServiceExpireArgs {
	return &LaserServiceExpireArgs{}
}

var LaserServiceExpireArgs_Key_DEFAULT *LaserKey

func (p *LaserServiceExpireArgs) GetKey() *LaserKey {
	if !p.IsSetKey() {
		return LaserServiceExpireArgs_Key_DEFAULT
	}
	return p.Key
}

func (p *LaserServiceExpireArgs) GetTime() int64 {
	return p.Time
}
func (p *LaserServiceExpireArgs) IsSetKey() bool {
	return p.Key != nil
}

func (p *LaserServiceExpireArgs) Read(iprot thrift.Protocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *LaserServiceExpireArgs) ReadField1(iprot thrift.Protocol) error {
	p.Key = NewLaserKey()
	if err := p.Key.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Key), err)
	}
	return nil
}

func (p *LaserServiceExpireArgs) ReadField2(iprot thrift.Protocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Time = v
	}
	return nil
}

func (p *LaserServiceExpireArgs) Write(oprot thrift.Protocol) error {
	if err := oprot.WriteStructBegin("expire_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *LaserServiceExpireArgs) writeField1(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("key", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:key: ", p), err)
	}
	if err := p.Key.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Key), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:key: ", p), err)
	}
	return err
}

func (p *LaserServiceExpireArgs) writeField2(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("time", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:time: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.Time)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.time (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:time: ", p), err)
	}
	return err
}

func (p *LaserServiceExpireArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LaserServiceExpireArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type LaserServiceExpireResult struct {
	Success *LaserResponse  `thrift:"success,0" db:"success" json:"success,omitempty"`
	E       *LaserException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewLaserServiceExpireResult() *LaserServiceExpireResult {
	return &LaserServiceExpireResult{}
}

var LaserServiceExpireResult_Success_DEFAULT *LaserResponse

func (p *LaserServiceExpireResult) GetSuccess() *LaserResponse {
	if !p.IsSetSuccess() {
		return LaserServiceExpireResult_Success_DEFAULT
	}
	return p.Success
}

var LaserServiceExpireResult_E_DEFAULT *LaserException

func (p *LaserServiceExpireResult) GetE() *LaserException {
	if !p.IsSetE() {
		return LaserServiceExpireResult_E_DEFAULT
	}
	return p.E
}
func (p *LaserServiceExpireResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *LaserServiceExpireResult) IsSetE() bool {
	return p.E != nil
}

func (p *LaserServiceExpireResult) Read(iprot thrift.Protocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *LaserServiceExpireResult) ReadField0(iprot thrift.Protocol) error {
	p.Success = NewLaserResponse()
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *LaserServiceExpireResult) ReadField1(iprot thrift.Protocol) error {
	p.E = NewLaserException()
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *LaserServiceExpireResult) Write(oprot thrift.Protocol) error {
	if err := oprot.WriteStructBegin("expire_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *LaserServiceExpireResult) writeField0(oprot thrift.Protocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *LaserServiceExpireResult) writeField1(oprot thrift.Protocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *LaserServiceExpireResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LaserServiceExpireResult(%+v)", *p)
}

// Attributes:
//  - Key
//  - TimeAt
type LaserServiceExpireAtArgs struct {
	Key    *LaserKey `thrift:"key,1" db:"key" json:"key"`
	TimeAt int64     `thrift:"time_at,2" db:"time_at" json:"time_at"`
}

func NewLaserServiceExpireAtArgs() *LaserServiceExpireAtArgs {
	return &LaserServiceExpireAtArgs{}
}

var LaserServiceExpireAtArgs_Key_DEFAULT *LaserKey

func (p *LaserServiceExpireAtArgs) GetKey() *LaserKey {
	if !p.IsSetKey() {
		return LaserServiceExpireAtArgs_Key_DEFAULT
	}
	return p.Key
}

func (p *LaserServiceExpireAtArgs) GetTimeAt() int64 {
	return p.TimeAt
}
func (p *LaserServiceExpireAtArgs) IsSetKey() bool {
	return p.Key != nil
}

func (p *LaserServiceExpireAtArgs) Read(iprot thrift.Protocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *LaserServiceExpireAtArgs) ReadField1(iprot thrift.Protocol) error {
	p.Key = NewLaserKey()
	if err := p.Key.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Key), err)
	}
	return nil
}

func (p *LaserServiceExpireAtArgs) ReadField2(iprot thrift.Protocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.TimeAt = v
	}
	return nil
}

func (p *LaserServiceExpireAtArgs) Write(oprot thrift.Protocol) error {
	if err := oprot.WriteStructBegin("expireAt_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *LaserServiceExpireAtArgs) writeField1(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("key", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:key: ", p), err)
	}
	if err := p.Key.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Key), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:key: ", p), err)
	}
	return err
}

func (p *LaserServiceExpireAtArgs) writeField2(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("time_at", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:time_at: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.TimeAt)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.time_at (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:time_at: ", p), err)
	}
	return err
}

func (p *LaserServiceExpireAtArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LaserServiceExpireAtArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type LaserServiceExpireAtResult struct {
	Success *LaserResponse  `thrift:"success,0" db:"success" json:"success,omitempty"`
	E       *LaserException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewLaserServiceExpireAtResult() *LaserServiceExpireAtResult {
	return &LaserServiceExpireAtResult{}
}

var LaserServiceExpireAtResult_Success_DEFAULT *LaserResponse

func (p *LaserServiceExpireAtResult) GetSuccess() *LaserResponse {
	if !p.IsSetSuccess() {
		return LaserServiceExpireAtResult_Success_DEFAULT
	}
	return p.Success
}

var LaserServiceExpireAtResult_E_DEFAULT *LaserException

func (p *LaserServiceExpireAtResult) GetE() *LaserException {
	if !p.IsSetE() {
		return LaserServiceExpireAtResult_E_DEFAULT
	}
	return p.E
}
func (p *LaserServiceExpireAtResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *LaserServiceExpireAtResult) IsSetE() bool {
	return p.E != nil
}

func (p *LaserServiceExpireAtResult) Read(iprot thrift.Protocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *LaserServiceExpireAtResult) ReadField0(iprot thrift.Protocol) error {
	p.Success = NewLaserResponse()
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *LaserServiceExpireAtResult) ReadField1(iprot thrift.Protocol) error {
	p.E = NewLaserException()
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *LaserServiceExpireAtResult) Write(oprot thrift.Protocol) error {
	if err := oprot.WriteStructBegin("expireAt_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *LaserServiceExpireAtResult) writeField0(oprot thrift.Protocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *LaserServiceExpireAtResult) writeField1(oprot thrift.Protocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *LaserServiceExpireAtResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LaserServiceExpireAtResult(%+v)", *p)
}

// Attributes:
//  - Key
type LaserServiceTtlArgs struct {
	Key *LaserKey `thrift:"key,1" db:"key" json:"key"`
}

func NewLaserServiceTtlArgs() *LaserServiceTtlArgs {
	return &LaserServiceTtlArgs{}
}

var LaserServiceTtlArgs_Key_DEFAULT *LaserKey

func (p *LaserServiceTtlArgs) GetKey() *LaserKey {
	if !p.IsSetKey() {
		return LaserServiceTtlArgs_Key_DEFAULT
	}
	return p.Key
}
func (p *LaserServiceTtlArgs) IsSetKey() bool {
	return p.Key != nil
}

func (p *LaserServiceTtlArgs) Read(iprot thrift.Protocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *LaserServiceTtlArgs) ReadField1(iprot thrift.Protocol) error {
	p.Key = NewLaserKey()
	if err := p.Key.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Key), err)
	}
	return nil
}

func (p *LaserServiceTtlArgs) Write(oprot thrift.Protocol) error {
	if err := oprot.WriteStructBegin("ttl_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *LaserServiceTtlArgs) writeField1(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("key", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:key: ", p), err)
	}
	if err := p.Key.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Key), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:key: ", p), err)
	}
	return err
}

func (p *LaserServiceTtlArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LaserServiceTtlArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type LaserServiceTtlResult struct {
	Success *LaserResponse  `thrift:"success,0" db:"success" json:"success,omitempty"`
	E       *LaserException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewLaserServiceTtlResult() *LaserServiceTtlResult {
	return &LaserServiceTtlResult{}
}

var LaserServiceTtlResult_Success_DEFAULT *LaserResponse

func (p *LaserServiceTtlResult) GetSuccess() *LaserResponse {
	if !p.IsSetSuccess() {
		return LaserServiceTtlResult_Success_DEFAULT
	}
	return p.Success
}

var LaserServiceTtlResult_E_DEFAULT *LaserException

func (p *LaserServiceTtlResult) GetE() *LaserException {
	if !p.IsSetE() {
		return LaserServiceTtlResult_E_DEFAULT
	}
	return p.E
}
func (p *LaserServiceTtlResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *LaserServiceTtlResult) IsSetE() bool {
	return p.E != nil
}

func (p *LaserServiceTtlResult) Read(iprot thrift.Protocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *LaserServiceTtlResult) ReadField0(iprot thrift.Protocol) error {
	p.Success = NewLaserResponse()
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *LaserServiceTtlResult) ReadField1(iprot thrift.Protocol) error {
	p.E = NewLaserException()
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *LaserServiceTtlResult) Write(oprot thrift.Protocol) error {
	if err := oprot.WriteStructBegin("ttl_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *LaserServiceTtlResult) writeField0(oprot thrift.Protocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *LaserServiceTtlResult) writeField1(oprot thrift.Protocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *LaserServiceTtlResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LaserServiceTtlResult(%+v)", *p)
}

// Attributes:
//  - Key
//  - Value
type LaserServiceAppendArgs struct {
	Key   *LaserKey `thrift:"key,1" db:"key" json:"key"`
	Value string    `thrift:"value,2" db:"value" json:"value"`
}

func NewLaserServiceAppendArgs() *LaserServiceAppendArgs {
	return &LaserServiceAppendArgs{}
}

var LaserServiceAppendArgs_Key_DEFAULT *LaserKey

func (p *LaserServiceAppendArgs) GetKey() *LaserKey {
	if !p.IsSetKey() {
		return LaserServiceAppendArgs_Key_DEFAULT
	}
	return p.Key
}

func (p *LaserServiceAppendArgs) GetValue() string {
	return p.Value
}
func (p *LaserServiceAppendArgs) IsSetKey() bool {
	return p.Key != nil
}

func (p *LaserServiceAppendArgs) Read(iprot thrift.Protocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *LaserServiceAppendArgs) ReadField1(iprot thrift.Protocol) error {
	p.Key = NewLaserKey()
	if err := p.Key.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Key), err)
	}
	return nil
}

func (p *LaserServiceAppendArgs) ReadField2(iprot thrift.Protocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Value = v
	}
	return nil
}

func (p *LaserServiceAppendArgs) Write(oprot thrift.Protocol) error {
	if err := oprot.WriteStructBegin("append_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *LaserServiceAppendArgs) writeField1(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("key", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:key: ", p), err)
	}
	if err := p.Key.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Key), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:key: ", p), err)
	}
	return err
}

func (p *LaserServiceAppendArgs) writeField2(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("value", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:value: ", p), err)
	}
	if err := oprot.WriteString(string(p.Value)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.value (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:value: ", p), err)
	}
	return err
}

func (p *LaserServiceAppendArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LaserServiceAppendArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type LaserServiceAppendResult struct {
	Success *LaserResponse  `thrift:"success,0" db:"success" json:"success,omitempty"`
	E       *LaserException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewLaserServiceAppendResult() *LaserServiceAppendResult {
	return &LaserServiceAppendResult{}
}

var LaserServiceAppendResult_Success_DEFAULT *LaserResponse

func (p *LaserServiceAppendResult) GetSuccess() *LaserResponse {
	if !p.IsSetSuccess() {
		return LaserServiceAppendResult_Success_DEFAULT
	}
	return p.Success
}

var LaserServiceAppendResult_E_DEFAULT *LaserException

func (p *LaserServiceAppendResult) GetE() *LaserException {
	if !p.IsSetE() {
		return LaserServiceAppendResult_E_DEFAULT
	}
	return p.E
}
func (p *LaserServiceAppendResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *LaserServiceAppendResult) IsSetE() bool {
	return p.E != nil
}

func (p *LaserServiceAppendResult) Read(iprot thrift.Protocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *LaserServiceAppendResult) ReadField0(iprot thrift.Protocol) error {
	p.Success = NewLaserResponse()
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *LaserServiceAppendResult) ReadField1(iprot thrift.Protocol) error {
	p.E = NewLaserException()
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *LaserServiceAppendResult) Write(oprot thrift.Protocol) error {
	if err := oprot.WriteStructBegin("append_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *LaserServiceAppendResult) writeField0(oprot thrift.Protocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *LaserServiceAppendResult) writeField1(oprot thrift.Protocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *LaserServiceAppendResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LaserServiceAppendResult(%+v)", *p)
}

// Attributes:
//  - Key
type LaserServiceGetArgs struct {
	Key *LaserKey `thrift:"key,1" db:"key" json:"key"`
}

func NewLaserServiceGetArgs() *LaserServiceGetArgs {
	return &LaserServiceGetArgs{}
}

var LaserServiceGetArgs_Key_DEFAULT *LaserKey

func (p *LaserServiceGetArgs) GetKey() *LaserKey {
	if !p.IsSetKey() {
		return LaserServiceGetArgs_Key_DEFAULT
	}
	return p.Key
}
func (p *LaserServiceGetArgs) IsSetKey() bool {
	return p.Key != nil
}

func (p *LaserServiceGetArgs) Read(iprot thrift.Protocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *LaserServiceGetArgs) ReadField1(iprot thrift.Protocol) error {
	p.Key = NewLaserKey()
	if err := p.Key.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Key), err)
	}
	return nil
}

func (p *LaserServiceGetArgs) Write(oprot thrift.Protocol) error {
	if err := oprot.WriteStructBegin("get_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *LaserServiceGetArgs) writeField1(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("key", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:key: ", p), err)
	}
	if err := p.Key.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Key), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:key: ", p), err)
	}
	return err
}

func (p *LaserServiceGetArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LaserServiceGetArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type LaserServiceGetResult struct {
	Success *LaserResponse  `thrift:"success,0" db:"success" json:"success,omitempty"`
	E       *LaserException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewLaserServiceGetResult() *LaserServiceGetResult {
	return &LaserServiceGetResult{}
}

var LaserServiceGetResult_Success_DEFAULT *LaserResponse

func (p *LaserServiceGetResult) GetSuccess() *LaserResponse {
	if !p.IsSetSuccess() {
		return LaserServiceGetResult_Success_DEFAULT
	}
	return p.Success
}

var LaserServiceGetResult_E_DEFAULT *LaserException

func (p *LaserServiceGetResult) GetE() *LaserException {
	if !p.IsSetE() {
		return LaserServiceGetResult_E_DEFAULT
	}
	return p.E
}
func (p *LaserServiceGetResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *LaserServiceGetResult) IsSetE() bool {
	return p.E != nil
}

func (p *LaserServiceGetResult) Read(iprot thrift.Protocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *LaserServiceGetResult) ReadField0(iprot thrift.Protocol) error {
	p.Success = NewLaserResponse()
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *LaserServiceGetResult) ReadField1(iprot thrift.Protocol) error {
	p.E = NewLaserException()
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *LaserServiceGetResult) Write(oprot thrift.Protocol) error {
	if err := oprot.WriteStructBegin("get_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *LaserServiceGetResult) writeField0(oprot thrift.Protocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *LaserServiceGetResult) writeField1(oprot thrift.Protocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *LaserServiceGetResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LaserServiceGetResult(%+v)", *p)
}

// Attributes:
//  - Kv
type LaserServiceSsetArgs struct {
	Kv *LaserKV `thrift:"kv,1" db:"kv" json:"kv"`
}

func NewLaserServiceSsetArgs() *LaserServiceSsetArgs {
	return &LaserServiceSsetArgs{}
}

var LaserServiceSsetArgs_Kv_DEFAULT *LaserKV

func (p *LaserServiceSsetArgs) GetKv() *LaserKV {
	if !p.IsSetKv() {
		return LaserServiceSsetArgs_Kv_DEFAULT
	}
	return p.Kv
}
func (p *LaserServiceSsetArgs) IsSetKv() bool {
	return p.Kv != nil
}

func (p *LaserServiceSsetArgs) Read(iprot thrift.Protocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *LaserServiceSsetArgs) ReadField1(iprot thrift.Protocol) error {
	p.Kv = NewLaserKV()
	if err := p.Kv.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Kv), err)
	}
	return nil
}

func (p *LaserServiceSsetArgs) Write(oprot thrift.Protocol) error {
	if err := oprot.WriteStructBegin("sset_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *LaserServiceSsetArgs) writeField1(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("kv", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:kv: ", p), err)
	}
	if err := p.Kv.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Kv), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:kv: ", p), err)
	}
	return err
}

func (p *LaserServiceSsetArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LaserServiceSsetArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type LaserServiceSsetResult struct {
	Success *LaserResponse  `thrift:"success,0" db:"success" json:"success,omitempty"`
	E       *LaserException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewLaserServiceSsetResult() *LaserServiceSsetResult {
	return &LaserServiceSsetResult{}
}

var LaserServiceSsetResult_Success_DEFAULT *LaserResponse

func (p *LaserServiceSsetResult) GetSuccess() *LaserResponse {
	if !p.IsSetSuccess() {
		return LaserServiceSsetResult_Success_DEFAULT
	}
	return p.Success
}

var LaserServiceSsetResult_E_DEFAULT *LaserException

func (p *LaserServiceSsetResult) GetE() *LaserException {
	if !p.IsSetE() {
		return LaserServiceSsetResult_E_DEFAULT
	}
	return p.E
}
func (p *LaserServiceSsetResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *LaserServiceSsetResult) IsSetE() bool {
	return p.E != nil
}

func (p *LaserServiceSsetResult) Read(iprot thrift.Protocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *LaserServiceSsetResult) ReadField0(iprot thrift.Protocol) error {
	p.Success = NewLaserResponse()
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *LaserServiceSsetResult) ReadField1(iprot thrift.Protocol) error {
	p.E = NewLaserException()
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *LaserServiceSsetResult) Write(oprot thrift.Protocol) error {
	if err := oprot.WriteStructBegin("sset_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *LaserServiceSsetResult) writeField0(oprot thrift.Protocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *LaserServiceSsetResult) writeField1(oprot thrift.Protocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *LaserServiceSsetResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LaserServiceSsetResult(%+v)", *p)
}

// Attributes:
//  - Kv
//  - Option
type LaserServiceSetxArgs struct {
	Kv     *LaserKV        `thrift:"kv,1" db:"kv" json:"kv"`
	Option *LaserSetOption `thrift:"option,2" db:"option" json:"option"`
}

func NewLaserServiceSetxArgs() *LaserServiceSetxArgs {
	return &LaserServiceSetxArgs{}
}

var LaserServiceSetxArgs_Kv_DEFAULT *LaserKV

func (p *LaserServiceSetxArgs) GetKv() *LaserKV {
	if !p.IsSetKv() {
		return LaserServiceSetxArgs_Kv_DEFAULT
	}
	return p.Kv
}

var LaserServiceSetxArgs_Option_DEFAULT *LaserSetOption

func (p *LaserServiceSetxArgs) GetOption() *LaserSetOption {
	if !p.IsSetOption() {
		return LaserServiceSetxArgs_Option_DEFAULT
	}
	return p.Option
}
func (p *LaserServiceSetxArgs) IsSetKv() bool {
	return p.Kv != nil
}

func (p *LaserServiceSetxArgs) IsSetOption() bool {
	return p.Option != nil
}

func (p *LaserServiceSetxArgs) Read(iprot thrift.Protocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *LaserServiceSetxArgs) ReadField1(iprot thrift.Protocol) error {
	p.Kv = NewLaserKV()
	if err := p.Kv.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Kv), err)
	}
	return nil
}

func (p *LaserServiceSetxArgs) ReadField2(iprot thrift.Protocol) error {
	p.Option = NewLaserSetOption()
	if err := p.Option.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Option), err)
	}
	return nil
}

func (p *LaserServiceSetxArgs) Write(oprot thrift.Protocol) error {
	if err := oprot.WriteStructBegin("setx_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *LaserServiceSetxArgs) writeField1(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("kv", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:kv: ", p), err)
	}
	if err := p.Kv.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Kv), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:kv: ", p), err)
	}
	return err
}

func (p *LaserServiceSetxArgs) writeField2(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("option", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:option: ", p), err)
	}
	if err := p.Option.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Option), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:option: ", p), err)
	}
	return err
}

func (p *LaserServiceSetxArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LaserServiceSetxArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type LaserServiceSetxResult struct {
	Success *LaserResponse  `thrift:"success,0" db:"success" json:"success,omitempty"`
	E       *LaserException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewLaserServiceSetxResult() *LaserServiceSetxResult {
	return &LaserServiceSetxResult{}
}

var LaserServiceSetxResult_Success_DEFAULT *LaserResponse

func (p *LaserServiceSetxResult) GetSuccess() *LaserResponse {
	if !p.IsSetSuccess() {
		return LaserServiceSetxResult_Success_DEFAULT
	}
	return p.Success
}

var LaserServiceSetxResult_E_DEFAULT *LaserException

func (p *LaserServiceSetxResult) GetE() *LaserException {
	if !p.IsSetE() {
		return LaserServiceSetxResult_E_DEFAULT
	}
	return p.E
}
func (p *LaserServiceSetxResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *LaserServiceSetxResult) IsSetE() bool {
	return p.E != nil
}

func (p *LaserServiceSetxResult) Read(iprot thrift.Protocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *LaserServiceSetxResult) ReadField0(iprot thrift.Protocol) error {
	p.Success = NewLaserResponse()
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *LaserServiceSetxResult) ReadField1(iprot thrift.Protocol) error {
	p.E = NewLaserException()
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *LaserServiceSetxResult) Write(oprot thrift.Protocol) error {
	if err := oprot.WriteStructBegin("setx_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *LaserServiceSetxResult) writeField0(oprot thrift.Protocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *LaserServiceSetxResult) writeField1(oprot thrift.Protocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *LaserServiceSetxResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LaserServiceSetxResult(%+v)", *p)
}

// Attributes:
//  - Keys
type LaserServiceMgetArgs struct {
	Keys *LaserKeys `thrift:"keys,1" db:"keys" json:"keys"`
}

func NewLaserServiceMgetArgs() *LaserServiceMgetArgs {
	return &LaserServiceMgetArgs{}
}

var LaserServiceMgetArgs_Keys_DEFAULT *LaserKeys

func (p *LaserServiceMgetArgs) GetKeys() *LaserKeys {
	if !p.IsSetKeys() {
		return LaserServiceMgetArgs_Keys_DEFAULT
	}
	return p.Keys
}
func (p *LaserServiceMgetArgs) IsSetKeys() bool {
	return p.Keys != nil
}

func (p *LaserServiceMgetArgs) Read(iprot thrift.Protocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *LaserServiceMgetArgs) ReadField1(iprot thrift.Protocol) error {
	p.Keys = NewLaserKeys()
	if err := p.Keys.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Keys), err)
	}
	return nil
}

func (p *LaserServiceMgetArgs) Write(oprot thrift.Protocol) error {
	if err := oprot.WriteStructBegin("mget_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *LaserServiceMgetArgs) writeField1(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("keys", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:keys: ", p), err)
	}
	if err := p.Keys.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Keys), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:keys: ", p), err)
	}
	return err
}

func (p *LaserServiceMgetArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LaserServiceMgetArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type LaserServiceMgetResult struct {
	Success *LaserResponse  `thrift:"success,0" db:"success" json:"success,omitempty"`
	E       *LaserException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewLaserServiceMgetResult() *LaserServiceMgetResult {
	return &LaserServiceMgetResult{}
}

var LaserServiceMgetResult_Success_DEFAULT *LaserResponse

func (p *LaserServiceMgetResult) GetSuccess() *LaserResponse {
	if !p.IsSetSuccess() {
		return LaserServiceMgetResult_Success_DEFAULT
	}
	return p.Success
}

var LaserServiceMgetResult_E_DEFAULT *LaserException

func (p *LaserServiceMgetResult) GetE() *LaserException {
	if !p.IsSetE() {
		return LaserServiceMgetResult_E_DEFAULT
	}
	return p.E
}
func (p *LaserServiceMgetResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *LaserServiceMgetResult) IsSetE() bool {
	return p.E != nil
}

func (p *LaserServiceMgetResult) Read(iprot thrift.Protocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *LaserServiceMgetResult) ReadField0(iprot thrift.Protocol) error {
	p.Success = NewLaserResponse()
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *LaserServiceMgetResult) ReadField1(iprot thrift.Protocol) error {
	p.E = NewLaserException()
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *LaserServiceMgetResult) Write(oprot thrift.Protocol) error {
	if err := oprot.WriteStructBegin("mget_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *LaserServiceMgetResult) writeField0(oprot thrift.Protocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *LaserServiceMgetResult) writeField1(oprot thrift.Protocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *LaserServiceMgetResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LaserServiceMgetResult(%+v)", *p)
}

// Attributes:
//  - Values
type LaserServiceMsetArgs struct {
	Values *LaserKVs `thrift:"values,1" db:"values" json:"values"`
}

func NewLaserServiceMsetArgs() *LaserServiceMsetArgs {
	return &LaserServiceMsetArgs{}
}

var LaserServiceMsetArgs_Values_DEFAULT *LaserKVs

func (p *LaserServiceMsetArgs) GetValues() *LaserKVs {
	if !p.IsSetValues() {
		return LaserServiceMsetArgs_Values_DEFAULT
	}
	return p.Values
}
func (p *LaserServiceMsetArgs) IsSetValues() bool {
	return p.Values != nil
}

func (p *LaserServiceMsetArgs) Read(iprot thrift.Protocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *LaserServiceMsetArgs) ReadField1(iprot thrift.Protocol) error {
	p.Values = NewLaserKVs()
	if err := p.Values.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Values), err)
	}
	return nil
}

func (p *LaserServiceMsetArgs) Write(oprot thrift.Protocol) error {
	if err := oprot.WriteStructBegin("mset_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *LaserServiceMsetArgs) writeField1(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("values", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:values: ", p), err)
	}
	if err := p.Values.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Values), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:values: ", p), err)
	}
	return err
}

func (p *LaserServiceMsetArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LaserServiceMsetArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type LaserServiceMsetResult struct {
	Success *LaserResponse  `thrift:"success,0" db:"success" json:"success,omitempty"`
	E       *LaserException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewLaserServiceMsetResult() *LaserServiceMsetResult {
	return &LaserServiceMsetResult{}
}

var LaserServiceMsetResult_Success_DEFAULT *LaserResponse

func (p *LaserServiceMsetResult) GetSuccess() *LaserResponse {
	if !p.IsSetSuccess() {
		return LaserServiceMsetResult_Success_DEFAULT
	}
	return p.Success
}

var LaserServiceMsetResult_E_DEFAULT *LaserException

func (p *LaserServiceMsetResult) GetE() *LaserException {
	if !p.IsSetE() {
		return LaserServiceMsetResult_E_DEFAULT
	}
	return p.E
}
func (p *LaserServiceMsetResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *LaserServiceMsetResult) IsSetE() bool {
	return p.E != nil
}

func (p *LaserServiceMsetResult) Read(iprot thrift.Protocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *LaserServiceMsetResult) ReadField0(iprot thrift.Protocol) error {
	p.Success = NewLaserResponse()
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *LaserServiceMsetResult) ReadField1(iprot thrift.Protocol) error {
	p.E = NewLaserException()
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *LaserServiceMsetResult) Write(oprot thrift.Protocol) error {
	if err := oprot.WriteStructBegin("mset_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *LaserServiceMsetResult) writeField0(oprot thrift.Protocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *LaserServiceMsetResult) writeField1(oprot thrift.Protocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *LaserServiceMsetResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LaserServiceMsetResult(%+v)", *p)
}

// Attributes:
//  - Keys
type LaserServiceMgetDetailArgs struct {
	Keys *LaserKeys `thrift:"keys,1" db:"keys" json:"keys"`
}

func NewLaserServiceMgetDetailArgs() *LaserServiceMgetDetailArgs {
	return &LaserServiceMgetDetailArgs{}
}

var LaserServiceMgetDetailArgs_Keys_DEFAULT *LaserKeys

func (p *LaserServiceMgetDetailArgs) GetKeys() *LaserKeys {
	if !p.IsSetKeys() {
		return LaserServiceMgetDetailArgs_Keys_DEFAULT
	}
	return p.Keys
}
func (p *LaserServiceMgetDetailArgs) IsSetKeys() bool {
	return p.Keys != nil
}

func (p *LaserServiceMgetDetailArgs) Read(iprot thrift.Protocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *LaserServiceMgetDetailArgs) ReadField1(iprot thrift.Protocol) error {
	p.Keys = NewLaserKeys()
	if err := p.Keys.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Keys), err)
	}
	return nil
}

func (p *LaserServiceMgetDetailArgs) Write(oprot thrift.Protocol) error {
	if err := oprot.WriteStructBegin("mgetDetail_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *LaserServiceMgetDetailArgs) writeField1(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("keys", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:keys: ", p), err)
	}
	if err := p.Keys.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Keys), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:keys: ", p), err)
	}
	return err
}

func (p *LaserServiceMgetDetailArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LaserServiceMgetDetailArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type LaserServiceMgetDetailResult struct {
	Success *LaserResponse  `thrift:"success,0" db:"success" json:"success,omitempty"`
	E       *LaserException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewLaserServiceMgetDetailResult() *LaserServiceMgetDetailResult {
	return &LaserServiceMgetDetailResult{}
}

var LaserServiceMgetDetailResult_Success_DEFAULT *LaserResponse

func (p *LaserServiceMgetDetailResult) GetSuccess() *LaserResponse {
	if !p.IsSetSuccess() {
		return LaserServiceMgetDetailResult_Success_DEFAULT
	}
	return p.Success
}

var LaserServiceMgetDetailResult_E_DEFAULT *LaserException

func (p *LaserServiceMgetDetailResult) GetE() *LaserException {
	if !p.IsSetE() {
		return LaserServiceMgetDetailResult_E_DEFAULT
	}
	return p.E
}
func (p *LaserServiceMgetDetailResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *LaserServiceMgetDetailResult) IsSetE() bool {
	return p.E != nil
}

func (p *LaserServiceMgetDetailResult) Read(iprot thrift.Protocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *LaserServiceMgetDetailResult) ReadField0(iprot thrift.Protocol) error {
	p.Success = NewLaserResponse()
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *LaserServiceMgetDetailResult) ReadField1(iprot thrift.Protocol) error {
	p.E = NewLaserException()
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *LaserServiceMgetDetailResult) Write(oprot thrift.Protocol) error {
	if err := oprot.WriteStructBegin("mgetDetail_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *LaserServiceMgetDetailResult) writeField0(oprot thrift.Protocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *LaserServiceMgetDetailResult) writeField1(oprot thrift.Protocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *LaserServiceMgetDetailResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LaserServiceMgetDetailResult(%+v)", *p)
}

// Attributes:
//  - Values
//  - Option
type LaserServiceMsetDetailArgs struct {
	Values *LaserKVs       `thrift:"values,1" db:"values" json:"values"`
	Option *LaserSetOption `thrift:"option,2" db:"option" json:"option"`
}

func NewLaserServiceMsetDetailArgs() *LaserServiceMsetDetailArgs {
	return &LaserServiceMsetDetailArgs{}
}

var LaserServiceMsetDetailArgs_Values_DEFAULT *LaserKVs

func (p *LaserServiceMsetDetailArgs) GetValues() *LaserKVs {
	if !p.IsSetValues() {
		return LaserServiceMsetDetailArgs_Values_DEFAULT
	}
	return p.Values
}

var LaserServiceMsetDetailArgs_Option_DEFAULT *LaserSetOption

func (p *LaserServiceMsetDetailArgs) GetOption() *LaserSetOption {
	if !p.IsSetOption() {
		return LaserServiceMsetDetailArgs_Option_DEFAULT
	}
	return p.Option
}
func (p *LaserServiceMsetDetailArgs) IsSetValues() bool {
	return p.Values != nil
}

func (p *LaserServiceMsetDetailArgs) IsSetOption() bool {
	return p.Option != nil
}

func (p *LaserServiceMsetDetailArgs) Read(iprot thrift.Protocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *LaserServiceMsetDetailArgs) ReadField1(iprot thrift.Protocol) error {
	p.Values = NewLaserKVs()
	if err := p.Values.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Values), err)
	}
	return nil
}

func (p *LaserServiceMsetDetailArgs) ReadField2(iprot thrift.Protocol) error {
	p.Option = NewLaserSetOption()
	if err := p.Option.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Option), err)
	}
	return nil
}

func (p *LaserServiceMsetDetailArgs) Write(oprot thrift.Protocol) error {
	if err := oprot.WriteStructBegin("msetDetail_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *LaserServiceMsetDetailArgs) writeField1(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("values", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:values: ", p), err)
	}
	if err := p.Values.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Values), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:values: ", p), err)
	}
	return err
}

func (p *LaserServiceMsetDetailArgs) writeField2(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("option", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:option: ", p), err)
	}
	if err := p.Option.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Option), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:option: ", p), err)
	}
	return err
}

func (p *LaserServiceMsetDetailArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LaserServiceMsetDetailArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type LaserServiceMsetDetailResult struct {
	Success *LaserResponse  `thrift:"success,0" db:"success" json:"success,omitempty"`
	E       *LaserException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewLaserServiceMsetDetailResult() *LaserServiceMsetDetailResult {
	return &LaserServiceMsetDetailResult{}
}

var LaserServiceMsetDetailResult_Success_DEFAULT *LaserResponse

func (p *LaserServiceMsetDetailResult) GetSuccess() *LaserResponse {
	if !p.IsSetSuccess() {
		return LaserServiceMsetDetailResult_Success_DEFAULT
	}
	return p.Success
}

var LaserServiceMsetDetailResult_E_DEFAULT *LaserException

func (p *LaserServiceMsetDetailResult) GetE() *LaserException {
	if !p.IsSetE() {
		return LaserServiceMsetDetailResult_E_DEFAULT
	}
	return p.E
}
func (p *LaserServiceMsetDetailResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *LaserServiceMsetDetailResult) IsSetE() bool {
	return p.E != nil
}

func (p *LaserServiceMsetDetailResult) Read(iprot thrift.Protocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *LaserServiceMsetDetailResult) ReadField0(iprot thrift.Protocol) error {
	p.Success = NewLaserResponse()
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *LaserServiceMsetDetailResult) ReadField1(iprot thrift.Protocol) error {
	p.E = NewLaserException()
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *LaserServiceMsetDetailResult) Write(oprot thrift.Protocol) error {
	if err := oprot.WriteStructBegin("msetDetail_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *LaserServiceMsetDetailResult) writeField0(oprot thrift.Protocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *LaserServiceMsetDetailResult) writeField1(oprot thrift.Protocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *LaserServiceMsetDetailResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LaserServiceMsetDetailResult(%+v)", *p)
}

// Attributes:
//  - Keys
type LaserServiceMdelArgs struct {
	Keys *LaserKeys `thrift:"keys,1" db:"keys" json:"keys"`
}

func NewLaserServiceMdelArgs() *LaserServiceMdelArgs {
	return &LaserServiceMdelArgs{}
}

var LaserServiceMdelArgs_Keys_DEFAULT *LaserKeys

func (p *LaserServiceMdelArgs) GetKeys() *LaserKeys {
	if !p.IsSetKeys() {
		return LaserServiceMdelArgs_Keys_DEFAULT
	}
	return p.Keys
}
func (p *LaserServiceMdelArgs) IsSetKeys() bool {
	return p.Keys != nil
}

func (p *LaserServiceMdelArgs) Read(iprot thrift.Protocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *LaserServiceMdelArgs) ReadField1(iprot thrift.Protocol) error {
	p.Keys = NewLaserKeys()
	if err := p.Keys.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Keys), err)
	}
	return nil
}

func (p *LaserServiceMdelArgs) Write(oprot thrift.Protocol) error {
	if err := oprot.WriteStructBegin("mdel_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *LaserServiceMdelArgs) writeField1(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("keys", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:keys: ", p), err)
	}
	if err := p.Keys.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Keys), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:keys: ", p), err)
	}
	return err
}

func (p *LaserServiceMdelArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LaserServiceMdelArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type LaserServiceMdelResult struct {
	Success *LaserResponse  `thrift:"success,0" db:"success" json:"success,omitempty"`
	E       *LaserException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewLaserServiceMdelResult() *LaserServiceMdelResult {
	return &LaserServiceMdelResult{}
}

var LaserServiceMdelResult_Success_DEFAULT *LaserResponse

func (p *LaserServiceMdelResult) GetSuccess() *LaserResponse {
	if !p.IsSetSuccess() {
		return LaserServiceMdelResult_Success_DEFAULT
	}
	return p.Success
}

var LaserServiceMdelResult_E_DEFAULT *LaserException

func (p *LaserServiceMdelResult) GetE() *LaserException {
	if !p.IsSetE() {
		return LaserServiceMdelResult_E_DEFAULT
	}
	return p.E
}
func (p *LaserServiceMdelResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *LaserServiceMdelResult) IsSetE() bool {
	return p.E != nil
}

func (p *LaserServiceMdelResult) Read(iprot thrift.Protocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *LaserServiceMdelResult) ReadField0(iprot thrift.Protocol) error {
	p.Success = NewLaserResponse()
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *LaserServiceMdelResult) ReadField1(iprot thrift.Protocol) error {
	p.E = NewLaserException()
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *LaserServiceMdelResult) Write(oprot thrift.Protocol) error {
	if err := oprot.WriteStructBegin("mdel_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *LaserServiceMdelResult) writeField0(oprot thrift.Protocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *LaserServiceMdelResult) writeField1(oprot thrift.Protocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *LaserServiceMdelResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LaserServiceMdelResult(%+v)", *p)
}

// Attributes:
//  - Key
type LaserServiceExistArgs struct {
	Key *LaserKey `thrift:"key,1" db:"key" json:"key"`
}

func NewLaserServiceExistArgs() *LaserServiceExistArgs {
	return &LaserServiceExistArgs{}
}

var LaserServiceExistArgs_Key_DEFAULT *LaserKey

func (p *LaserServiceExistArgs) GetKey() *LaserKey {
	if !p.IsSetKey() {
		return LaserServiceExistArgs_Key_DEFAULT
	}
	return p.Key
}
func (p *LaserServiceExistArgs) IsSetKey() bool {
	return p.Key != nil
}

func (p *LaserServiceExistArgs) Read(iprot thrift.Protocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *LaserServiceExistArgs) ReadField1(iprot thrift.Protocol) error {
	p.Key = NewLaserKey()
	if err := p.Key.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Key), err)
	}
	return nil
}

func (p *LaserServiceExistArgs) Write(oprot thrift.Protocol) error {
	if err := oprot.WriteStructBegin("exist_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *LaserServiceExistArgs) writeField1(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("key", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:key: ", p), err)
	}
	if err := p.Key.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Key), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:key: ", p), err)
	}
	return err
}

func (p *LaserServiceExistArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LaserServiceExistArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type LaserServiceExistResult struct {
	Success *LaserResponse  `thrift:"success,0" db:"success" json:"success,omitempty"`
	E       *LaserException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewLaserServiceExistResult() *LaserServiceExistResult {
	return &LaserServiceExistResult{}
}

var LaserServiceExistResult_Success_DEFAULT *LaserResponse

func (p *LaserServiceExistResult) GetSuccess() *LaserResponse {
	if !p.IsSetSuccess() {
		return LaserServiceExistResult_Success_DEFAULT
	}
	return p.Success
}

var LaserServiceExistResult_E_DEFAULT *LaserException

func (p *LaserServiceExistResult) GetE() *LaserException {
	if !p.IsSetE() {
		return LaserServiceExistResult_E_DEFAULT
	}
	return p.E
}
func (p *LaserServiceExistResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *LaserServiceExistResult) IsSetE() bool {
	return p.E != nil
}

func (p *LaserServiceExistResult) Read(iprot thrift.Protocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *LaserServiceExistResult) ReadField0(iprot thrift.Protocol) error {
	p.Success = NewLaserResponse()
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *LaserServiceExistResult) ReadField1(iprot thrift.Protocol) error {
	p.E = NewLaserException()
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *LaserServiceExistResult) Write(oprot thrift.Protocol) error {
	if err := oprot.WriteStructBegin("exist_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *LaserServiceExistResult) writeField0(oprot thrift.Protocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *LaserServiceExistResult) writeField1(oprot thrift.Protocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *LaserServiceExistResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LaserServiceExistResult(%+v)", *p)
}

// Attributes:
//  - Key
type LaserServiceDecrArgs struct {
	Key *LaserKey `thrift:"key,1" db:"key" json:"key"`
}

func NewLaserServiceDecrArgs() *LaserServiceDecrArgs {
	return &LaserServiceDecrArgs{}
}

var LaserServiceDecrArgs_Key_DEFAULT *LaserKey

func (p *LaserServiceDecrArgs) GetKey() *LaserKey {
	if !p.IsSetKey() {
		return LaserServiceDecrArgs_Key_DEFAULT
	}
	return p.Key
}
func (p *LaserServiceDecrArgs) IsSetKey() bool {
	return p.Key != nil
}

func (p *LaserServiceDecrArgs) Read(iprot thrift.Protocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *LaserServiceDecrArgs) ReadField1(iprot thrift.Protocol) error {
	p.Key = NewLaserKey()
	if err := p.Key.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Key), err)
	}
	return nil
}

func (p *LaserServiceDecrArgs) Write(oprot thrift.Protocol) error {
	if err := oprot.WriteStructBegin("decr_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *LaserServiceDecrArgs) writeField1(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("key", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:key: ", p), err)
	}
	if err := p.Key.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Key), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:key: ", p), err)
	}
	return err
}

func (p *LaserServiceDecrArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LaserServiceDecrArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type LaserServiceDecrResult struct {
	Success *LaserResponse  `thrift:"success,0" db:"success" json:"success,omitempty"`
	E       *LaserException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewLaserServiceDecrResult() *LaserServiceDecrResult {
	return &LaserServiceDecrResult{}
}

var LaserServiceDecrResult_Success_DEFAULT *LaserResponse

func (p *LaserServiceDecrResult) GetSuccess() *LaserResponse {
	if !p.IsSetSuccess() {
		return LaserServiceDecrResult_Success_DEFAULT
	}
	return p.Success
}

var LaserServiceDecrResult_E_DEFAULT *LaserException

func (p *LaserServiceDecrResult) GetE() *LaserException {
	if !p.IsSetE() {
		return LaserServiceDecrResult_E_DEFAULT
	}
	return p.E
}
func (p *LaserServiceDecrResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *LaserServiceDecrResult) IsSetE() bool {
	return p.E != nil
}

func (p *LaserServiceDecrResult) Read(iprot thrift.Protocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *LaserServiceDecrResult) ReadField0(iprot thrift.Protocol) error {
	p.Success = NewLaserResponse()
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *LaserServiceDecrResult) ReadField1(iprot thrift.Protocol) error {
	p.E = NewLaserException()
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *LaserServiceDecrResult) Write(oprot thrift.Protocol) error {
	if err := oprot.WriteStructBegin("decr_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *LaserServiceDecrResult) writeField0(oprot thrift.Protocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *LaserServiceDecrResult) writeField1(oprot thrift.Protocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *LaserServiceDecrResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LaserServiceDecrResult(%+v)", *p)
}

// Attributes:
//  - Key
type LaserServiceIncrArgs struct {
	Key *LaserKey `thrift:"key,1" db:"key" json:"key"`
}

func NewLaserServiceIncrArgs() *LaserServiceIncrArgs {
	return &LaserServiceIncrArgs{}
}

var LaserServiceIncrArgs_Key_DEFAULT *LaserKey

func (p *LaserServiceIncrArgs) GetKey() *LaserKey {
	if !p.IsSetKey() {
		return LaserServiceIncrArgs_Key_DEFAULT
	}
	return p.Key
}
func (p *LaserServiceIncrArgs) IsSetKey() bool {
	return p.Key != nil
}

func (p *LaserServiceIncrArgs) Read(iprot thrift.Protocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *LaserServiceIncrArgs) ReadField1(iprot thrift.Protocol) error {
	p.Key = NewLaserKey()
	if err := p.Key.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Key), err)
	}
	return nil
}

func (p *LaserServiceIncrArgs) Write(oprot thrift.Protocol) error {
	if err := oprot.WriteStructBegin("incr_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *LaserServiceIncrArgs) writeField1(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("key", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:key: ", p), err)
	}
	if err := p.Key.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Key), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:key: ", p), err)
	}
	return err
}

func (p *LaserServiceIncrArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LaserServiceIncrArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type LaserServiceIncrResult struct {
	Success *LaserResponse  `thrift:"success,0" db:"success" json:"success,omitempty"`
	E       *LaserException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewLaserServiceIncrResult() *LaserServiceIncrResult {
	return &LaserServiceIncrResult{}
}

var LaserServiceIncrResult_Success_DEFAULT *LaserResponse

func (p *LaserServiceIncrResult) GetSuccess() *LaserResponse {
	if !p.IsSetSuccess() {
		return LaserServiceIncrResult_Success_DEFAULT
	}
	return p.Success
}

var LaserServiceIncrResult_E_DEFAULT *LaserException

func (p *LaserServiceIncrResult) GetE() *LaserException {
	if !p.IsSetE() {
		return LaserServiceIncrResult_E_DEFAULT
	}
	return p.E
}
func (p *LaserServiceIncrResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *LaserServiceIncrResult) IsSetE() bool {
	return p.E != nil
}

func (p *LaserServiceIncrResult) Read(iprot thrift.Protocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *LaserServiceIncrResult) ReadField0(iprot thrift.Protocol) error {
	p.Success = NewLaserResponse()
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *LaserServiceIncrResult) ReadField1(iprot thrift.Protocol) error {
	p.E = NewLaserException()
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *LaserServiceIncrResult) Write(oprot thrift.Protocol) error {
	if err := oprot.WriteStructBegin("incr_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *LaserServiceIncrResult) writeField0(oprot thrift.Protocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *LaserServiceIncrResult) writeField1(oprot thrift.Protocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *LaserServiceIncrResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LaserServiceIncrResult(%+v)", *p)
}

// Attributes:
//  - Key
//  - Step
type LaserServiceDecrByArgs struct {
	Key  *LaserKey `thrift:"key,1" db:"key" json:"key"`
	Step int64     `thrift:"step,2" db:"step" json:"step"`
}

func NewLaserServiceDecrByArgs() *LaserServiceDecrByArgs {
	return &LaserServiceDecrByArgs{}
}

var LaserServiceDecrByArgs_Key_DEFAULT *LaserKey

func (p *LaserServiceDecrByArgs) GetKey() *LaserKey {
	if !p.IsSetKey() {
		return LaserServiceDecrByArgs_Key_DEFAULT
	}
	return p.Key
}

func (p *LaserServiceDecrByArgs) GetStep() int64 {
	return p.Step
}
func (p *LaserServiceDecrByArgs) IsSetKey() bool {
	return p.Key != nil
}

func (p *LaserServiceDecrByArgs) Read(iprot thrift.Protocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *LaserServiceDecrByArgs) ReadField1(iprot thrift.Protocol) error {
	p.Key = NewLaserKey()
	if err := p.Key.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Key), err)
	}
	return nil
}

func (p *LaserServiceDecrByArgs) ReadField2(iprot thrift.Protocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Step = v
	}
	return nil
}

func (p *LaserServiceDecrByArgs) Write(oprot thrift.Protocol) error {
	if err := oprot.WriteStructBegin("decrBy_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *LaserServiceDecrByArgs) writeField1(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("key", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:key: ", p), err)
	}
	if err := p.Key.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Key), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:key: ", p), err)
	}
	return err
}

func (p *LaserServiceDecrByArgs) writeField2(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("step", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:step: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.Step)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.step (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:step: ", p), err)
	}
	return err
}

func (p *LaserServiceDecrByArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LaserServiceDecrByArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type LaserServiceDecrByResult struct {
	Success *LaserResponse  `thrift:"success,0" db:"success" json:"success,omitempty"`
	E       *LaserException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewLaserServiceDecrByResult() *LaserServiceDecrByResult {
	return &LaserServiceDecrByResult{}
}

var LaserServiceDecrByResult_Success_DEFAULT *LaserResponse

func (p *LaserServiceDecrByResult) GetSuccess() *LaserResponse {
	if !p.IsSetSuccess() {
		return LaserServiceDecrByResult_Success_DEFAULT
	}
	return p.Success
}

var LaserServiceDecrByResult_E_DEFAULT *LaserException

func (p *LaserServiceDecrByResult) GetE() *LaserException {
	if !p.IsSetE() {
		return LaserServiceDecrByResult_E_DEFAULT
	}
	return p.E
}
func (p *LaserServiceDecrByResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *LaserServiceDecrByResult) IsSetE() bool {
	return p.E != nil
}

func (p *LaserServiceDecrByResult) Read(iprot thrift.Protocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *LaserServiceDecrByResult) ReadField0(iprot thrift.Protocol) error {
	p.Success = NewLaserResponse()
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *LaserServiceDecrByResult) ReadField1(iprot thrift.Protocol) error {
	p.E = NewLaserException()
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *LaserServiceDecrByResult) Write(oprot thrift.Protocol) error {
	if err := oprot.WriteStructBegin("decrBy_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *LaserServiceDecrByResult) writeField0(oprot thrift.Protocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *LaserServiceDecrByResult) writeField1(oprot thrift.Protocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *LaserServiceDecrByResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LaserServiceDecrByResult(%+v)", *p)
}

// Attributes:
//  - Key
//  - Step
type LaserServiceIncrByArgs struct {
	Key  *LaserKey `thrift:"key,1" db:"key" json:"key"`
	Step int64     `thrift:"step,2" db:"step" json:"step"`
}

func NewLaserServiceIncrByArgs() *LaserServiceIncrByArgs {
	return &LaserServiceIncrByArgs{}
}

var LaserServiceIncrByArgs_Key_DEFAULT *LaserKey

func (p *LaserServiceIncrByArgs) GetKey() *LaserKey {
	if !p.IsSetKey() {
		return LaserServiceIncrByArgs_Key_DEFAULT
	}
	return p.Key
}

func (p *LaserServiceIncrByArgs) GetStep() int64 {
	return p.Step
}
func (p *LaserServiceIncrByArgs) IsSetKey() bool {
	return p.Key != nil
}

func (p *LaserServiceIncrByArgs) Read(iprot thrift.Protocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *LaserServiceIncrByArgs) ReadField1(iprot thrift.Protocol) error {
	p.Key = NewLaserKey()
	if err := p.Key.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Key), err)
	}
	return nil
}

func (p *LaserServiceIncrByArgs) ReadField2(iprot thrift.Protocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Step = v
	}
	return nil
}

func (p *LaserServiceIncrByArgs) Write(oprot thrift.Protocol) error {
	if err := oprot.WriteStructBegin("incrBy_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *LaserServiceIncrByArgs) writeField1(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("key", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:key: ", p), err)
	}
	if err := p.Key.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Key), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:key: ", p), err)
	}
	return err
}

func (p *LaserServiceIncrByArgs) writeField2(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("step", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:step: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.Step)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.step (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:step: ", p), err)
	}
	return err
}

func (p *LaserServiceIncrByArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LaserServiceIncrByArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type LaserServiceIncrByResult struct {
	Success *LaserResponse  `thrift:"success,0" db:"success" json:"success,omitempty"`
	E       *LaserException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewLaserServiceIncrByResult() *LaserServiceIncrByResult {
	return &LaserServiceIncrByResult{}
}

var LaserServiceIncrByResult_Success_DEFAULT *LaserResponse

func (p *LaserServiceIncrByResult) GetSuccess() *LaserResponse {
	if !p.IsSetSuccess() {
		return LaserServiceIncrByResult_Success_DEFAULT
	}
	return p.Success
}

var LaserServiceIncrByResult_E_DEFAULT *LaserException

func (p *LaserServiceIncrByResult) GetE() *LaserException {
	if !p.IsSetE() {
		return LaserServiceIncrByResult_E_DEFAULT
	}
	return p.E
}
func (p *LaserServiceIncrByResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *LaserServiceIncrByResult) IsSetE() bool {
	return p.E != nil
}

func (p *LaserServiceIncrByResult) Read(iprot thrift.Protocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *LaserServiceIncrByResult) ReadField0(iprot thrift.Protocol) error {
	p.Success = NewLaserResponse()
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *LaserServiceIncrByResult) ReadField1(iprot thrift.Protocol) error {
	p.E = NewLaserException()
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *LaserServiceIncrByResult) Write(oprot thrift.Protocol) error {
	if err := oprot.WriteStructBegin("incrBy_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *LaserServiceIncrByResult) writeField0(oprot thrift.Protocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *LaserServiceIncrByResult) writeField1(oprot thrift.Protocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *LaserServiceIncrByResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LaserServiceIncrByResult(%+v)", *p)
}

// Attributes:
//  - Key
//  - Field
type LaserServiceHdelArgs struct {
	Key   *LaserKey `thrift:"key,1" db:"key" json:"key"`
	Field string    `thrift:"field,2" db:"field" json:"field"`
}

func NewLaserServiceHdelArgs() *LaserServiceHdelArgs {
	return &LaserServiceHdelArgs{}
}

var LaserServiceHdelArgs_Key_DEFAULT *LaserKey

func (p *LaserServiceHdelArgs) GetKey() *LaserKey {
	if !p.IsSetKey() {
		return LaserServiceHdelArgs_Key_DEFAULT
	}
	return p.Key
}

func (p *LaserServiceHdelArgs) GetField() string {
	return p.Field
}
func (p *LaserServiceHdelArgs) IsSetKey() bool {
	return p.Key != nil
}

func (p *LaserServiceHdelArgs) Read(iprot thrift.Protocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *LaserServiceHdelArgs) ReadField1(iprot thrift.Protocol) error {
	p.Key = NewLaserKey()
	if err := p.Key.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Key), err)
	}
	return nil
}

func (p *LaserServiceHdelArgs) ReadField2(iprot thrift.Protocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Field = v
	}
	return nil
}

func (p *LaserServiceHdelArgs) Write(oprot thrift.Protocol) error {
	if err := oprot.WriteStructBegin("hdel_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *LaserServiceHdelArgs) writeField1(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("key", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:key: ", p), err)
	}
	if err := p.Key.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Key), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:key: ", p), err)
	}
	return err
}

func (p *LaserServiceHdelArgs) writeField2(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("field", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:field: ", p), err)
	}
	if err := oprot.WriteString(string(p.Field)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.field (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:field: ", p), err)
	}
	return err
}

func (p *LaserServiceHdelArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LaserServiceHdelArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type LaserServiceHdelResult struct {
	Success *LaserResponse  `thrift:"success,0" db:"success" json:"success,omitempty"`
	E       *LaserException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewLaserServiceHdelResult() *LaserServiceHdelResult {
	return &LaserServiceHdelResult{}
}

var LaserServiceHdelResult_Success_DEFAULT *LaserResponse

func (p *LaserServiceHdelResult) GetSuccess() *LaserResponse {
	if !p.IsSetSuccess() {
		return LaserServiceHdelResult_Success_DEFAULT
	}
	return p.Success
}

var LaserServiceHdelResult_E_DEFAULT *LaserException

func (p *LaserServiceHdelResult) GetE() *LaserException {
	if !p.IsSetE() {
		return LaserServiceHdelResult_E_DEFAULT
	}
	return p.E
}
func (p *LaserServiceHdelResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *LaserServiceHdelResult) IsSetE() bool {
	return p.E != nil
}

func (p *LaserServiceHdelResult) Read(iprot thrift.Protocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *LaserServiceHdelResult) ReadField0(iprot thrift.Protocol) error {
	p.Success = NewLaserResponse()
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *LaserServiceHdelResult) ReadField1(iprot thrift.Protocol) error {
	p.E = NewLaserException()
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *LaserServiceHdelResult) Write(oprot thrift.Protocol) error {
	if err := oprot.WriteStructBegin("hdel_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *LaserServiceHdelResult) writeField0(oprot thrift.Protocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *LaserServiceHdelResult) writeField1(oprot thrift.Protocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *LaserServiceHdelResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LaserServiceHdelResult(%+v)", *p)
}

// Attributes:
//  - Key
//  - Field
type LaserServiceHexistsArgs struct {
	Key   *LaserKey `thrift:"key,1" db:"key" json:"key"`
	Field string    `thrift:"field,2" db:"field" json:"field"`
}

func NewLaserServiceHexistsArgs() *LaserServiceHexistsArgs {
	return &LaserServiceHexistsArgs{}
}

var LaserServiceHexistsArgs_Key_DEFAULT *LaserKey

func (p *LaserServiceHexistsArgs) GetKey() *LaserKey {
	if !p.IsSetKey() {
		return LaserServiceHexistsArgs_Key_DEFAULT
	}
	return p.Key
}

func (p *LaserServiceHexistsArgs) GetField() string {
	return p.Field
}
func (p *LaserServiceHexistsArgs) IsSetKey() bool {
	return p.Key != nil
}

func (p *LaserServiceHexistsArgs) Read(iprot thrift.Protocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *LaserServiceHexistsArgs) ReadField1(iprot thrift.Protocol) error {
	p.Key = NewLaserKey()
	if err := p.Key.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Key), err)
	}
	return nil
}

func (p *LaserServiceHexistsArgs) ReadField2(iprot thrift.Protocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Field = v
	}
	return nil
}

func (p *LaserServiceHexistsArgs) Write(oprot thrift.Protocol) error {
	if err := oprot.WriteStructBegin("hexists_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *LaserServiceHexistsArgs) writeField1(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("key", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:key: ", p), err)
	}
	if err := p.Key.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Key), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:key: ", p), err)
	}
	return err
}

func (p *LaserServiceHexistsArgs) writeField2(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("field", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:field: ", p), err)
	}
	if err := oprot.WriteString(string(p.Field)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.field (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:field: ", p), err)
	}
	return err
}

func (p *LaserServiceHexistsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LaserServiceHexistsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type LaserServiceHexistsResult struct {
	Success *LaserResponse  `thrift:"success,0" db:"success" json:"success,omitempty"`
	E       *LaserException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewLaserServiceHexistsResult() *LaserServiceHexistsResult {
	return &LaserServiceHexistsResult{}
}

var LaserServiceHexistsResult_Success_DEFAULT *LaserResponse

func (p *LaserServiceHexistsResult) GetSuccess() *LaserResponse {
	if !p.IsSetSuccess() {
		return LaserServiceHexistsResult_Success_DEFAULT
	}
	return p.Success
}

var LaserServiceHexistsResult_E_DEFAULT *LaserException

func (p *LaserServiceHexistsResult) GetE() *LaserException {
	if !p.IsSetE() {
		return LaserServiceHexistsResult_E_DEFAULT
	}
	return p.E
}
func (p *LaserServiceHexistsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *LaserServiceHexistsResult) IsSetE() bool {
	return p.E != nil
}

func (p *LaserServiceHexistsResult) Read(iprot thrift.Protocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *LaserServiceHexistsResult) ReadField0(iprot thrift.Protocol) error {
	p.Success = NewLaserResponse()
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *LaserServiceHexistsResult) ReadField1(iprot thrift.Protocol) error {
	p.E = NewLaserException()
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *LaserServiceHexistsResult) Write(oprot thrift.Protocol) error {
	if err := oprot.WriteStructBegin("hexists_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *LaserServiceHexistsResult) writeField0(oprot thrift.Protocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *LaserServiceHexistsResult) writeField1(oprot thrift.Protocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *LaserServiceHexistsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LaserServiceHexistsResult(%+v)", *p)
}

// Attributes:
//  - Key
//  - Field
type LaserServiceHgetArgs struct {
	Key   *LaserKey `thrift:"key,1" db:"key" json:"key"`
	Field string    `thrift:"field,2" db:"field" json:"field"`
}

func NewLaserServiceHgetArgs() *LaserServiceHgetArgs {
	return &LaserServiceHgetArgs{}
}

var LaserServiceHgetArgs_Key_DEFAULT *LaserKey

func (p *LaserServiceHgetArgs) GetKey() *LaserKey {
	if !p.IsSetKey() {
		return LaserServiceHgetArgs_Key_DEFAULT
	}
	return p.Key
}

func (p *LaserServiceHgetArgs) GetField() string {
	return p.Field
}
func (p *LaserServiceHgetArgs) IsSetKey() bool {
	return p.Key != nil
}

func (p *LaserServiceHgetArgs) Read(iprot thrift.Protocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *LaserServiceHgetArgs) ReadField1(iprot thrift.Protocol) error {
	p.Key = NewLaserKey()
	if err := p.Key.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Key), err)
	}
	return nil
}

func (p *LaserServiceHgetArgs) ReadField2(iprot thrift.Protocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Field = v
	}
	return nil
}

func (p *LaserServiceHgetArgs) Write(oprot thrift.Protocol) error {
	if err := oprot.WriteStructBegin("hget_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *LaserServiceHgetArgs) writeField1(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("key", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:key: ", p), err)
	}
	if err := p.Key.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Key), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:key: ", p), err)
	}
	return err
}

func (p *LaserServiceHgetArgs) writeField2(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("field", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:field: ", p), err)
	}
	if err := oprot.WriteString(string(p.Field)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.field (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:field: ", p), err)
	}
	return err
}

func (p *LaserServiceHgetArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LaserServiceHgetArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type LaserServiceHgetResult struct {
	Success *LaserResponse  `thrift:"success,0" db:"success" json:"success,omitempty"`
	E       *LaserException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewLaserServiceHgetResult() *LaserServiceHgetResult {
	return &LaserServiceHgetResult{}
}

var LaserServiceHgetResult_Success_DEFAULT *LaserResponse

func (p *LaserServiceHgetResult) GetSuccess() *LaserResponse {
	if !p.IsSetSuccess() {
		return LaserServiceHgetResult_Success_DEFAULT
	}
	return p.Success
}

var LaserServiceHgetResult_E_DEFAULT *LaserException

func (p *LaserServiceHgetResult) GetE() *LaserException {
	if !p.IsSetE() {
		return LaserServiceHgetResult_E_DEFAULT
	}
	return p.E
}
func (p *LaserServiceHgetResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *LaserServiceHgetResult) IsSetE() bool {
	return p.E != nil
}

func (p *LaserServiceHgetResult) Read(iprot thrift.Protocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *LaserServiceHgetResult) ReadField0(iprot thrift.Protocol) error {
	p.Success = NewLaserResponse()
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *LaserServiceHgetResult) ReadField1(iprot thrift.Protocol) error {
	p.E = NewLaserException()
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *LaserServiceHgetResult) Write(oprot thrift.Protocol) error {
	if err := oprot.WriteStructBegin("hget_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *LaserServiceHgetResult) writeField0(oprot thrift.Protocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *LaserServiceHgetResult) writeField1(oprot thrift.Protocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *LaserServiceHgetResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LaserServiceHgetResult(%+v)", *p)
}

// Attributes:
//  - Key
//  - Field
//  - Value
type LaserServiceHsetArgs struct {
	Key   *LaserKey `thrift:"key,1" db:"key" json:"key"`
	Field string    `thrift:"field,2" db:"field" json:"field"`
	Value string    `thrift:"value,3" db:"value" json:"value"`
}

func NewLaserServiceHsetArgs() *LaserServiceHsetArgs {
	return &LaserServiceHsetArgs{}
}

var LaserServiceHsetArgs_Key_DEFAULT *LaserKey

func (p *LaserServiceHsetArgs) GetKey() *LaserKey {
	if !p.IsSetKey() {
		return LaserServiceHsetArgs_Key_DEFAULT
	}
	return p.Key
}

func (p *LaserServiceHsetArgs) GetField() string {
	return p.Field
}

func (p *LaserServiceHsetArgs) GetValue() string {
	return p.Value
}
func (p *LaserServiceHsetArgs) IsSetKey() bool {
	return p.Key != nil
}

func (p *LaserServiceHsetArgs) Read(iprot thrift.Protocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *LaserServiceHsetArgs) ReadField1(iprot thrift.Protocol) error {
	p.Key = NewLaserKey()
	if err := p.Key.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Key), err)
	}
	return nil
}

func (p *LaserServiceHsetArgs) ReadField2(iprot thrift.Protocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Field = v
	}
	return nil
}

func (p *LaserServiceHsetArgs) ReadField3(iprot thrift.Protocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Value = v
	}
	return nil
}

func (p *LaserServiceHsetArgs) Write(oprot thrift.Protocol) error {
	if err := oprot.WriteStructBegin("hset_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *LaserServiceHsetArgs) writeField1(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("key", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:key: ", p), err)
	}
	if err := p.Key.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Key), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:key: ", p), err)
	}
	return err
}

func (p *LaserServiceHsetArgs) writeField2(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("field", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:field: ", p), err)
	}
	if err := oprot.WriteString(string(p.Field)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.field (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:field: ", p), err)
	}
	return err
}

func (p *LaserServiceHsetArgs) writeField3(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("value", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:value: ", p), err)
	}
	if err := oprot.WriteString(string(p.Value)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.value (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:value: ", p), err)
	}
	return err
}

func (p *LaserServiceHsetArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LaserServiceHsetArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type LaserServiceHsetResult struct {
	Success *LaserResponse  `thrift:"success,0" db:"success" json:"success,omitempty"`
	E       *LaserException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewLaserServiceHsetResult() *LaserServiceHsetResult {
	return &LaserServiceHsetResult{}
}

var LaserServiceHsetResult_Success_DEFAULT *LaserResponse

func (p *LaserServiceHsetResult) GetSuccess() *LaserResponse {
	if !p.IsSetSuccess() {
		return LaserServiceHsetResult_Success_DEFAULT
	}
	return p.Success
}

var LaserServiceHsetResult_E_DEFAULT *LaserException

func (p *LaserServiceHsetResult) GetE() *LaserException {
	if !p.IsSetE() {
		return LaserServiceHsetResult_E_DEFAULT
	}
	return p.E
}
func (p *LaserServiceHsetResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *LaserServiceHsetResult) IsSetE() bool {
	return p.E != nil
}

func (p *LaserServiceHsetResult) Read(iprot thrift.Protocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *LaserServiceHsetResult) ReadField0(iprot thrift.Protocol) error {
	p.Success = NewLaserResponse()
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *LaserServiceHsetResult) ReadField1(iprot thrift.Protocol) error {
	p.E = NewLaserException()
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *LaserServiceHsetResult) Write(oprot thrift.Protocol) error {
	if err := oprot.WriteStructBegin("hset_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *LaserServiceHsetResult) writeField0(oprot thrift.Protocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *LaserServiceHsetResult) writeField1(oprot thrift.Protocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *LaserServiceHsetResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LaserServiceHsetResult(%+v)", *p)
}

// Attributes:
//  - Key
type LaserServiceHgetallArgs struct {
	Key *LaserKey `thrift:"key,1" db:"key" json:"key"`
}

func NewLaserServiceHgetallArgs() *LaserServiceHgetallArgs {
	return &LaserServiceHgetallArgs{}
}

var LaserServiceHgetallArgs_Key_DEFAULT *LaserKey

func (p *LaserServiceHgetallArgs) GetKey() *LaserKey {
	if !p.IsSetKey() {
		return LaserServiceHgetallArgs_Key_DEFAULT
	}
	return p.Key
}
func (p *LaserServiceHgetallArgs) IsSetKey() bool {
	return p.Key != nil
}

func (p *LaserServiceHgetallArgs) Read(iprot thrift.Protocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *LaserServiceHgetallArgs) ReadField1(iprot thrift.Protocol) error {
	p.Key = NewLaserKey()
	if err := p.Key.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Key), err)
	}
	return nil
}

func (p *LaserServiceHgetallArgs) Write(oprot thrift.Protocol) error {
	if err := oprot.WriteStructBegin("hgetall_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *LaserServiceHgetallArgs) writeField1(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("key", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:key: ", p), err)
	}
	if err := p.Key.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Key), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:key: ", p), err)
	}
	return err
}

func (p *LaserServiceHgetallArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LaserServiceHgetallArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type LaserServiceHgetallResult struct {
	Success *LaserResponse  `thrift:"success,0" db:"success" json:"success,omitempty"`
	E       *LaserException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewLaserServiceHgetallResult() *LaserServiceHgetallResult {
	return &LaserServiceHgetallResult{}
}

var LaserServiceHgetallResult_Success_DEFAULT *LaserResponse

func (p *LaserServiceHgetallResult) GetSuccess() *LaserResponse {
	if !p.IsSetSuccess() {
		return LaserServiceHgetallResult_Success_DEFAULT
	}
	return p.Success
}

var LaserServiceHgetallResult_E_DEFAULT *LaserException

func (p *LaserServiceHgetallResult) GetE() *LaserException {
	if !p.IsSetE() {
		return LaserServiceHgetallResult_E_DEFAULT
	}
	return p.E
}
func (p *LaserServiceHgetallResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *LaserServiceHgetallResult) IsSetE() bool {
	return p.E != nil
}

func (p *LaserServiceHgetallResult) Read(iprot thrift.Protocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *LaserServiceHgetallResult) ReadField0(iprot thrift.Protocol) error {
	p.Success = NewLaserResponse()
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *LaserServiceHgetallResult) ReadField1(iprot thrift.Protocol) error {
	p.E = NewLaserException()
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *LaserServiceHgetallResult) Write(oprot thrift.Protocol) error {
	if err := oprot.WriteStructBegin("hgetall_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *LaserServiceHgetallResult) writeField0(oprot thrift.Protocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *LaserServiceHgetallResult) writeField1(oprot thrift.Protocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *LaserServiceHgetallResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LaserServiceHgetallResult(%+v)", *p)
}

// Attributes:
//  - Key
type LaserServiceHkeysArgs struct {
	Key *LaserKey `thrift:"key,1" db:"key" json:"key"`
}

func NewLaserServiceHkeysArgs() *LaserServiceHkeysArgs {
	return &LaserServiceHkeysArgs{}
}

var LaserServiceHkeysArgs_Key_DEFAULT *LaserKey

func (p *LaserServiceHkeysArgs) GetKey() *LaserKey {
	if !p.IsSetKey() {
		return LaserServiceHkeysArgs_Key_DEFAULT
	}
	return p.Key
}
func (p *LaserServiceHkeysArgs) IsSetKey() bool {
	return p.Key != nil
}

func (p *LaserServiceHkeysArgs) Read(iprot thrift.Protocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *LaserServiceHkeysArgs) ReadField1(iprot thrift.Protocol) error {
	p.Key = NewLaserKey()
	if err := p.Key.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Key), err)
	}
	return nil
}

func (p *LaserServiceHkeysArgs) Write(oprot thrift.Protocol) error {
	if err := oprot.WriteStructBegin("hkeys_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *LaserServiceHkeysArgs) writeField1(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("key", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:key: ", p), err)
	}
	if err := p.Key.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Key), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:key: ", p), err)
	}
	return err
}

func (p *LaserServiceHkeysArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LaserServiceHkeysArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type LaserServiceHkeysResult struct {
	Success *LaserResponse  `thrift:"success,0" db:"success" json:"success,omitempty"`
	E       *LaserException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewLaserServiceHkeysResult() *LaserServiceHkeysResult {
	return &LaserServiceHkeysResult{}
}

var LaserServiceHkeysResult_Success_DEFAULT *LaserResponse

func (p *LaserServiceHkeysResult) GetSuccess() *LaserResponse {
	if !p.IsSetSuccess() {
		return LaserServiceHkeysResult_Success_DEFAULT
	}
	return p.Success
}

var LaserServiceHkeysResult_E_DEFAULT *LaserException

func (p *LaserServiceHkeysResult) GetE() *LaserException {
	if !p.IsSetE() {
		return LaserServiceHkeysResult_E_DEFAULT
	}
	return p.E
}
func (p *LaserServiceHkeysResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *LaserServiceHkeysResult) IsSetE() bool {
	return p.E != nil
}

func (p *LaserServiceHkeysResult) Read(iprot thrift.Protocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *LaserServiceHkeysResult) ReadField0(iprot thrift.Protocol) error {
	p.Success = NewLaserResponse()
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *LaserServiceHkeysResult) ReadField1(iprot thrift.Protocol) error {
	p.E = NewLaserException()
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *LaserServiceHkeysResult) Write(oprot thrift.Protocol) error {
	if err := oprot.WriteStructBegin("hkeys_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *LaserServiceHkeysResult) writeField0(oprot thrift.Protocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *LaserServiceHkeysResult) writeField1(oprot thrift.Protocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *LaserServiceHkeysResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LaserServiceHkeysResult(%+v)", *p)
}

// Attributes:
//  - Key
type LaserServiceHlenArgs struct {
	Key *LaserKey `thrift:"key,1" db:"key" json:"key"`
}

func NewLaserServiceHlenArgs() *LaserServiceHlenArgs {
	return &LaserServiceHlenArgs{}
}

var LaserServiceHlenArgs_Key_DEFAULT *LaserKey

func (p *LaserServiceHlenArgs) GetKey() *LaserKey {
	if !p.IsSetKey() {
		return LaserServiceHlenArgs_Key_DEFAULT
	}
	return p.Key
}
func (p *LaserServiceHlenArgs) IsSetKey() bool {
	return p.Key != nil
}

func (p *LaserServiceHlenArgs) Read(iprot thrift.Protocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *LaserServiceHlenArgs) ReadField1(iprot thrift.Protocol) error {
	p.Key = NewLaserKey()
	if err := p.Key.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Key), err)
	}
	return nil
}

func (p *LaserServiceHlenArgs) Write(oprot thrift.Protocol) error {
	if err := oprot.WriteStructBegin("hlen_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *LaserServiceHlenArgs) writeField1(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("key", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:key: ", p), err)
	}
	if err := p.Key.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Key), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:key: ", p), err)
	}
	return err
}

func (p *LaserServiceHlenArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LaserServiceHlenArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type LaserServiceHlenResult struct {
	Success *LaserResponse  `thrift:"success,0" db:"success" json:"success,omitempty"`
	E       *LaserException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewLaserServiceHlenResult() *LaserServiceHlenResult {
	return &LaserServiceHlenResult{}
}

var LaserServiceHlenResult_Success_DEFAULT *LaserResponse

func (p *LaserServiceHlenResult) GetSuccess() *LaserResponse {
	if !p.IsSetSuccess() {
		return LaserServiceHlenResult_Success_DEFAULT
	}
	return p.Success
}

var LaserServiceHlenResult_E_DEFAULT *LaserException

func (p *LaserServiceHlenResult) GetE() *LaserException {
	if !p.IsSetE() {
		return LaserServiceHlenResult_E_DEFAULT
	}
	return p.E
}
func (p *LaserServiceHlenResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *LaserServiceHlenResult) IsSetE() bool {
	return p.E != nil
}

func (p *LaserServiceHlenResult) Read(iprot thrift.Protocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *LaserServiceHlenResult) ReadField0(iprot thrift.Protocol) error {
	p.Success = NewLaserResponse()
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *LaserServiceHlenResult) ReadField1(iprot thrift.Protocol) error {
	p.E = NewLaserException()
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *LaserServiceHlenResult) Write(oprot thrift.Protocol) error {
	if err := oprot.WriteStructBegin("hlen_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *LaserServiceHlenResult) writeField0(oprot thrift.Protocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *LaserServiceHlenResult) writeField1(oprot thrift.Protocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *LaserServiceHlenResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LaserServiceHlenResult(%+v)", *p)
}

// Attributes:
//  - Key
//  - Fields
type LaserServiceHmgetArgs struct {
	Key    *LaserKey `thrift:"key,1" db:"key" json:"key"`
	Fields []string  `thrift:"fields,2" db:"fields" json:"fields"`
}

func NewLaserServiceHmgetArgs() *LaserServiceHmgetArgs {
	return &LaserServiceHmgetArgs{}
}

var LaserServiceHmgetArgs_Key_DEFAULT *LaserKey

func (p *LaserServiceHmgetArgs) GetKey() *LaserKey {
	if !p.IsSetKey() {
		return LaserServiceHmgetArgs_Key_DEFAULT
	}
	return p.Key
}

func (p *LaserServiceHmgetArgs) GetFields() []string {
	return p.Fields
}
func (p *LaserServiceHmgetArgs) IsSetKey() bool {
	return p.Key != nil
}

func (p *LaserServiceHmgetArgs) Read(iprot thrift.Protocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *LaserServiceHmgetArgs) ReadField1(iprot thrift.Protocol) error {
	p.Key = NewLaserKey()
	if err := p.Key.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Key), err)
	}
	return nil
}

func (p *LaserServiceHmgetArgs) ReadField2(iprot thrift.Protocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.Fields = tSlice
	for i := 0; i < size; i++ {
		var _elem210 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem210 = v
		}
		p.Fields = append(p.Fields, _elem210)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *LaserServiceHmgetArgs) Write(oprot thrift.Protocol) error {
	if err := oprot.WriteStructBegin("hmget_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *LaserServiceHmgetArgs) writeField1(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("key", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:key: ", p), err)
	}
	if err := p.Key.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Key), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:key: ", p), err)
	}
	return err
}

func (p *LaserServiceHmgetArgs) writeField2(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("fields", thrift.LIST, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:fields: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.Fields)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Fields {
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:fields: ", p), err)
	}
	return err
}

func (p *LaserServiceHmgetArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LaserServiceHmgetArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type LaserServiceHmgetResult struct {
	Success *LaserResponse  `thrift:"success,0" db:"success" json:"success,omitempty"`
	E       *LaserException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewLaserServiceHmgetResult() *LaserServiceHmgetResult {
	return &LaserServiceHmgetResult{}
}

var LaserServiceHmgetResult_Success_DEFAULT *LaserResponse

func (p *LaserServiceHmgetResult) GetSuccess() *LaserResponse {
	if !p.IsSetSuccess() {
		return LaserServiceHmgetResult_Success_DEFAULT
	}
	return p.Success
}

var LaserServiceHmgetResult_E_DEFAULT *LaserException

func (p *LaserServiceHmgetResult) GetE() *LaserException {
	if !p.IsSetE() {
		return LaserServiceHmgetResult_E_DEFAULT
	}
	return p.E
}
func (p *LaserServiceHmgetResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *LaserServiceHmgetResult) IsSetE() bool {
	return p.E != nil
}

func (p *LaserServiceHmgetResult) Read(iprot thrift.Protocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *LaserServiceHmgetResult) ReadField0(iprot thrift.Protocol) error {
	p.Success = NewLaserResponse()
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *LaserServiceHmgetResult) ReadField1(iprot thrift.Protocol) error {
	p.E = NewLaserException()
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *LaserServiceHmgetResult) Write(oprot thrift.Protocol) error {
	if err := oprot.WriteStructBegin("hmget_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *LaserServiceHmgetResult) writeField0(oprot thrift.Protocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *LaserServiceHmgetResult) writeField1(oprot thrift.Protocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *LaserServiceHmgetResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LaserServiceHmgetResult(%+v)", *p)
}

// Attributes:
//  - Key
//  - Value
type LaserServiceHmsetArgs struct {
	Key   *LaserKey   `thrift:"key,1" db:"key" json:"key"`
	Value *LaserValue `thrift:"value,2" db:"value" json:"value"`
}

func NewLaserServiceHmsetArgs() *LaserServiceHmsetArgs {
	return &LaserServiceHmsetArgs{}
}

var LaserServiceHmsetArgs_Key_DEFAULT *LaserKey

func (p *LaserServiceHmsetArgs) GetKey() *LaserKey {
	if !p.IsSetKey() {
		return LaserServiceHmsetArgs_Key_DEFAULT
	}
	return p.Key
}

var LaserServiceHmsetArgs_Value_DEFAULT *LaserValue

func (p *LaserServiceHmsetArgs) GetValue() *LaserValue {
	if !p.IsSetValue() {
		return LaserServiceHmsetArgs_Value_DEFAULT
	}
	return p.Value
}
func (p *LaserServiceHmsetArgs) IsSetKey() bool {
	return p.Key != nil
}

func (p *LaserServiceHmsetArgs) IsSetValue() bool {
	return p.Value != nil
}

func (p *LaserServiceHmsetArgs) Read(iprot thrift.Protocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *LaserServiceHmsetArgs) ReadField1(iprot thrift.Protocol) error {
	p.Key = NewLaserKey()
	if err := p.Key.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Key), err)
	}
	return nil
}

func (p *LaserServiceHmsetArgs) ReadField2(iprot thrift.Protocol) error {
	p.Value = NewLaserValue()
	if err := p.Value.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Value), err)
	}
	return nil
}

func (p *LaserServiceHmsetArgs) Write(oprot thrift.Protocol) error {
	if err := oprot.WriteStructBegin("hmset_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *LaserServiceHmsetArgs) writeField1(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("key", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:key: ", p), err)
	}
	if err := p.Key.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Key), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:key: ", p), err)
	}
	return err
}

func (p *LaserServiceHmsetArgs) writeField2(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("value", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:value: ", p), err)
	}
	if err := p.Value.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Value), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:value: ", p), err)
	}
	return err
}

func (p *LaserServiceHmsetArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LaserServiceHmsetArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type LaserServiceHmsetResult struct {
	Success *LaserResponse  `thrift:"success,0" db:"success" json:"success,omitempty"`
	E       *LaserException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewLaserServiceHmsetResult() *LaserServiceHmsetResult {
	return &LaserServiceHmsetResult{}
}

var LaserServiceHmsetResult_Success_DEFAULT *LaserResponse

func (p *LaserServiceHmsetResult) GetSuccess() *LaserResponse {
	if !p.IsSetSuccess() {
		return LaserServiceHmsetResult_Success_DEFAULT
	}
	return p.Success
}

var LaserServiceHmsetResult_E_DEFAULT *LaserException

func (p *LaserServiceHmsetResult) GetE() *LaserException {
	if !p.IsSetE() {
		return LaserServiceHmsetResult_E_DEFAULT
	}
	return p.E
}
func (p *LaserServiceHmsetResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *LaserServiceHmsetResult) IsSetE() bool {
	return p.E != nil
}

func (p *LaserServiceHmsetResult) Read(iprot thrift.Protocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *LaserServiceHmsetResult) ReadField0(iprot thrift.Protocol) error {
	p.Success = NewLaserResponse()
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *LaserServiceHmsetResult) ReadField1(iprot thrift.Protocol) error {
	p.E = NewLaserException()
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *LaserServiceHmsetResult) Write(oprot thrift.Protocol) error {
	if err := oprot.WriteStructBegin("hmset_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *LaserServiceHmsetResult) writeField0(oprot thrift.Protocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *LaserServiceHmsetResult) writeField1(oprot thrift.Protocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *LaserServiceHmsetResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LaserServiceHmsetResult(%+v)", *p)
}

// Attributes:
//  - Key
//  - Index
type LaserServiceLindexArgs struct {
	Key   *LaserKey `thrift:"key,1" db:"key" json:"key"`
	Index int32     `thrift:"index,2" db:"index" json:"index"`
}

func NewLaserServiceLindexArgs() *LaserServiceLindexArgs {
	return &LaserServiceLindexArgs{}
}

var LaserServiceLindexArgs_Key_DEFAULT *LaserKey

func (p *LaserServiceLindexArgs) GetKey() *LaserKey {
	if !p.IsSetKey() {
		return LaserServiceLindexArgs_Key_DEFAULT
	}
	return p.Key
}

func (p *LaserServiceLindexArgs) GetIndex() int32 {
	return p.Index
}
func (p *LaserServiceLindexArgs) IsSetKey() bool {
	return p.Key != nil
}

func (p *LaserServiceLindexArgs) Read(iprot thrift.Protocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *LaserServiceLindexArgs) ReadField1(iprot thrift.Protocol) error {
	p.Key = NewLaserKey()
	if err := p.Key.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Key), err)
	}
	return nil
}

func (p *LaserServiceLindexArgs) ReadField2(iprot thrift.Protocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Index = v
	}
	return nil
}

func (p *LaserServiceLindexArgs) Write(oprot thrift.Protocol) error {
	if err := oprot.WriteStructBegin("lindex_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *LaserServiceLindexArgs) writeField1(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("key", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:key: ", p), err)
	}
	if err := p.Key.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Key), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:key: ", p), err)
	}
	return err
}

func (p *LaserServiceLindexArgs) writeField2(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("index", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:index: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Index)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.index (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:index: ", p), err)
	}
	return err
}

func (p *LaserServiceLindexArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LaserServiceLindexArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type LaserServiceLindexResult struct {
	Success *LaserResponse  `thrift:"success,0" db:"success" json:"success,omitempty"`
	E       *LaserException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewLaserServiceLindexResult() *LaserServiceLindexResult {
	return &LaserServiceLindexResult{}
}

var LaserServiceLindexResult_Success_DEFAULT *LaserResponse

func (p *LaserServiceLindexResult) GetSuccess() *LaserResponse {
	if !p.IsSetSuccess() {
		return LaserServiceLindexResult_Success_DEFAULT
	}
	return p.Success
}

var LaserServiceLindexResult_E_DEFAULT *LaserException

func (p *LaserServiceLindexResult) GetE() *LaserException {
	if !p.IsSetE() {
		return LaserServiceLindexResult_E_DEFAULT
	}
	return p.E
}
func (p *LaserServiceLindexResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *LaserServiceLindexResult) IsSetE() bool {
	return p.E != nil
}

func (p *LaserServiceLindexResult) Read(iprot thrift.Protocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *LaserServiceLindexResult) ReadField0(iprot thrift.Protocol) error {
	p.Success = NewLaserResponse()
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *LaserServiceLindexResult) ReadField1(iprot thrift.Protocol) error {
	p.E = NewLaserException()
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *LaserServiceLindexResult) Write(oprot thrift.Protocol) error {
	if err := oprot.WriteStructBegin("lindex_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *LaserServiceLindexResult) writeField0(oprot thrift.Protocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *LaserServiceLindexResult) writeField1(oprot thrift.Protocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *LaserServiceLindexResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LaserServiceLindexResult(%+v)", *p)
}

// Attributes:
//  - Key
type LaserServiceLlenArgs struct {
	Key *LaserKey `thrift:"key,1" db:"key" json:"key"`
}

func NewLaserServiceLlenArgs() *LaserServiceLlenArgs {
	return &LaserServiceLlenArgs{}
}

var LaserServiceLlenArgs_Key_DEFAULT *LaserKey

func (p *LaserServiceLlenArgs) GetKey() *LaserKey {
	if !p.IsSetKey() {
		return LaserServiceLlenArgs_Key_DEFAULT
	}
	return p.Key
}
func (p *LaserServiceLlenArgs) IsSetKey() bool {
	return p.Key != nil
}

func (p *LaserServiceLlenArgs) Read(iprot thrift.Protocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *LaserServiceLlenArgs) ReadField1(iprot thrift.Protocol) error {
	p.Key = NewLaserKey()
	if err := p.Key.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Key), err)
	}
	return nil
}

func (p *LaserServiceLlenArgs) Write(oprot thrift.Protocol) error {
	if err := oprot.WriteStructBegin("llen_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *LaserServiceLlenArgs) writeField1(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("key", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:key: ", p), err)
	}
	if err := p.Key.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Key), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:key: ", p), err)
	}
	return err
}

func (p *LaserServiceLlenArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LaserServiceLlenArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type LaserServiceLlenResult struct {
	Success *LaserResponse  `thrift:"success,0" db:"success" json:"success,omitempty"`
	E       *LaserException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewLaserServiceLlenResult() *LaserServiceLlenResult {
	return &LaserServiceLlenResult{}
}

var LaserServiceLlenResult_Success_DEFAULT *LaserResponse

func (p *LaserServiceLlenResult) GetSuccess() *LaserResponse {
	if !p.IsSetSuccess() {
		return LaserServiceLlenResult_Success_DEFAULT
	}
	return p.Success
}

var LaserServiceLlenResult_E_DEFAULT *LaserException

func (p *LaserServiceLlenResult) GetE() *LaserException {
	if !p.IsSetE() {
		return LaserServiceLlenResult_E_DEFAULT
	}
	return p.E
}
func (p *LaserServiceLlenResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *LaserServiceLlenResult) IsSetE() bool {
	return p.E != nil
}

func (p *LaserServiceLlenResult) Read(iprot thrift.Protocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *LaserServiceLlenResult) ReadField0(iprot thrift.Protocol) error {
	p.Success = NewLaserResponse()
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *LaserServiceLlenResult) ReadField1(iprot thrift.Protocol) error {
	p.E = NewLaserException()
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *LaserServiceLlenResult) Write(oprot thrift.Protocol) error {
	if err := oprot.WriteStructBegin("llen_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *LaserServiceLlenResult) writeField0(oprot thrift.Protocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *LaserServiceLlenResult) writeField1(oprot thrift.Protocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *LaserServiceLlenResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LaserServiceLlenResult(%+v)", *p)
}

// Attributes:
//  - Key
type LaserServiceLpopArgs struct {
	Key *LaserKey `thrift:"key,1" db:"key" json:"key"`
}

func NewLaserServiceLpopArgs() *LaserServiceLpopArgs {
	return &LaserServiceLpopArgs{}
}

var LaserServiceLpopArgs_Key_DEFAULT *LaserKey

func (p *LaserServiceLpopArgs) GetKey() *LaserKey {
	if !p.IsSetKey() {
		return LaserServiceLpopArgs_Key_DEFAULT
	}
	return p.Key
}
func (p *LaserServiceLpopArgs) IsSetKey() bool {
	return p.Key != nil
}

func (p *LaserServiceLpopArgs) Read(iprot thrift.Protocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *LaserServiceLpopArgs) ReadField1(iprot thrift.Protocol) error {
	p.Key = NewLaserKey()
	if err := p.Key.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Key), err)
	}
	return nil
}

func (p *LaserServiceLpopArgs) Write(oprot thrift.Protocol) error {
	if err := oprot.WriteStructBegin("lpop_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *LaserServiceLpopArgs) writeField1(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("key", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:key: ", p), err)
	}
	if err := p.Key.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Key), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:key: ", p), err)
	}
	return err
}

func (p *LaserServiceLpopArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LaserServiceLpopArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type LaserServiceLpopResult struct {
	Success *LaserResponse  `thrift:"success,0" db:"success" json:"success,omitempty"`
	E       *LaserException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewLaserServiceLpopResult() *LaserServiceLpopResult {
	return &LaserServiceLpopResult{}
}

var LaserServiceLpopResult_Success_DEFAULT *LaserResponse

func (p *LaserServiceLpopResult) GetSuccess() *LaserResponse {
	if !p.IsSetSuccess() {
		return LaserServiceLpopResult_Success_DEFAULT
	}
	return p.Success
}

var LaserServiceLpopResult_E_DEFAULT *LaserException

func (p *LaserServiceLpopResult) GetE() *LaserException {
	if !p.IsSetE() {
		return LaserServiceLpopResult_E_DEFAULT
	}
	return p.E
}
func (p *LaserServiceLpopResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *LaserServiceLpopResult) IsSetE() bool {
	return p.E != nil
}

func (p *LaserServiceLpopResult) Read(iprot thrift.Protocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *LaserServiceLpopResult) ReadField0(iprot thrift.Protocol) error {
	p.Success = NewLaserResponse()
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *LaserServiceLpopResult) ReadField1(iprot thrift.Protocol) error {
	p.E = NewLaserException()
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *LaserServiceLpopResult) Write(oprot thrift.Protocol) error {
	if err := oprot.WriteStructBegin("lpop_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *LaserServiceLpopResult) writeField0(oprot thrift.Protocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *LaserServiceLpopResult) writeField1(oprot thrift.Protocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *LaserServiceLpopResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LaserServiceLpopResult(%+v)", *p)
}

// Attributes:
//  - Key
//  - Value
type LaserServiceLpushArgs struct {
	Key   *LaserKey `thrift:"key,1" db:"key" json:"key"`
	Value string    `thrift:"value,2" db:"value" json:"value"`
}

func NewLaserServiceLpushArgs() *LaserServiceLpushArgs {
	return &LaserServiceLpushArgs{}
}

var LaserServiceLpushArgs_Key_DEFAULT *LaserKey

func (p *LaserServiceLpushArgs) GetKey() *LaserKey {
	if !p.IsSetKey() {
		return LaserServiceLpushArgs_Key_DEFAULT
	}
	return p.Key
}

func (p *LaserServiceLpushArgs) GetValue() string {
	return p.Value
}
func (p *LaserServiceLpushArgs) IsSetKey() bool {
	return p.Key != nil
}

func (p *LaserServiceLpushArgs) Read(iprot thrift.Protocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *LaserServiceLpushArgs) ReadField1(iprot thrift.Protocol) error {
	p.Key = NewLaserKey()
	if err := p.Key.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Key), err)
	}
	return nil
}

func (p *LaserServiceLpushArgs) ReadField2(iprot thrift.Protocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Value = v
	}
	return nil
}

func (p *LaserServiceLpushArgs) Write(oprot thrift.Protocol) error {
	if err := oprot.WriteStructBegin("lpush_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *LaserServiceLpushArgs) writeField1(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("key", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:key: ", p), err)
	}
	if err := p.Key.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Key), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:key: ", p), err)
	}
	return err
}

func (p *LaserServiceLpushArgs) writeField2(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("value", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:value: ", p), err)
	}
	if err := oprot.WriteString(string(p.Value)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.value (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:value: ", p), err)
	}
	return err
}

func (p *LaserServiceLpushArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LaserServiceLpushArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type LaserServiceLpushResult struct {
	Success *LaserResponse  `thrift:"success,0" db:"success" json:"success,omitempty"`
	E       *LaserException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewLaserServiceLpushResult() *LaserServiceLpushResult {
	return &LaserServiceLpushResult{}
}

var LaserServiceLpushResult_Success_DEFAULT *LaserResponse

func (p *LaserServiceLpushResult) GetSuccess() *LaserResponse {
	if !p.IsSetSuccess() {
		return LaserServiceLpushResult_Success_DEFAULT
	}
	return p.Success
}

var LaserServiceLpushResult_E_DEFAULT *LaserException

func (p *LaserServiceLpushResult) GetE() *LaserException {
	if !p.IsSetE() {
		return LaserServiceLpushResult_E_DEFAULT
	}
	return p.E
}
func (p *LaserServiceLpushResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *LaserServiceLpushResult) IsSetE() bool {
	return p.E != nil
}

func (p *LaserServiceLpushResult) Read(iprot thrift.Protocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *LaserServiceLpushResult) ReadField0(iprot thrift.Protocol) error {
	p.Success = NewLaserResponse()
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *LaserServiceLpushResult) ReadField1(iprot thrift.Protocol) error {
	p.E = NewLaserException()
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *LaserServiceLpushResult) Write(oprot thrift.Protocol) error {
	if err := oprot.WriteStructBegin("lpush_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *LaserServiceLpushResult) writeField0(oprot thrift.Protocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *LaserServiceLpushResult) writeField1(oprot thrift.Protocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *LaserServiceLpushResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LaserServiceLpushResult(%+v)", *p)
}

// Attributes:
//  - Key
//  - Start
//  - End
type LaserServiceLrangeArgs struct {
	Key   *LaserKey `thrift:"key,1" db:"key" json:"key"`
	Start int32     `thrift:"start,2" db:"start" json:"start"`
	End   int32     `thrift:"end,3" db:"end" json:"end"`
}

func NewLaserServiceLrangeArgs() *LaserServiceLrangeArgs {
	return &LaserServiceLrangeArgs{}
}

var LaserServiceLrangeArgs_Key_DEFAULT *LaserKey

func (p *LaserServiceLrangeArgs) GetKey() *LaserKey {
	if !p.IsSetKey() {
		return LaserServiceLrangeArgs_Key_DEFAULT
	}
	return p.Key
}

func (p *LaserServiceLrangeArgs) GetStart() int32 {
	return p.Start
}

func (p *LaserServiceLrangeArgs) GetEnd() int32 {
	return p.End
}
func (p *LaserServiceLrangeArgs) IsSetKey() bool {
	return p.Key != nil
}

func (p *LaserServiceLrangeArgs) Read(iprot thrift.Protocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *LaserServiceLrangeArgs) ReadField1(iprot thrift.Protocol) error {
	p.Key = NewLaserKey()
	if err := p.Key.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Key), err)
	}
	return nil
}

func (p *LaserServiceLrangeArgs) ReadField2(iprot thrift.Protocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Start = v
	}
	return nil
}

func (p *LaserServiceLrangeArgs) ReadField3(iprot thrift.Protocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.End = v
	}
	return nil
}

func (p *LaserServiceLrangeArgs) Write(oprot thrift.Protocol) error {
	if err := oprot.WriteStructBegin("lrange_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *LaserServiceLrangeArgs) writeField1(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("key", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:key: ", p), err)
	}
	if err := p.Key.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Key), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:key: ", p), err)
	}
	return err
}

func (p *LaserServiceLrangeArgs) writeField2(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("start", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:start: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Start)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.start (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:start: ", p), err)
	}
	return err
}

func (p *LaserServiceLrangeArgs) writeField3(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("end", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:end: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.End)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.end (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:end: ", p), err)
	}
	return err
}

func (p *LaserServiceLrangeArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LaserServiceLrangeArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type LaserServiceLrangeResult struct {
	Success *LaserResponse  `thrift:"success,0" db:"success" json:"success,omitempty"`
	E       *LaserException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewLaserServiceLrangeResult() *LaserServiceLrangeResult {
	return &LaserServiceLrangeResult{}
}

var LaserServiceLrangeResult_Success_DEFAULT *LaserResponse

func (p *LaserServiceLrangeResult) GetSuccess() *LaserResponse {
	if !p.IsSetSuccess() {
		return LaserServiceLrangeResult_Success_DEFAULT
	}
	return p.Success
}

var LaserServiceLrangeResult_E_DEFAULT *LaserException

func (p *LaserServiceLrangeResult) GetE() *LaserException {
	if !p.IsSetE() {
		return LaserServiceLrangeResult_E_DEFAULT
	}
	return p.E
}
func (p *LaserServiceLrangeResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *LaserServiceLrangeResult) IsSetE() bool {
	return p.E != nil
}

func (p *LaserServiceLrangeResult) Read(iprot thrift.Protocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *LaserServiceLrangeResult) ReadField0(iprot thrift.Protocol) error {
	p.Success = NewLaserResponse()
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *LaserServiceLrangeResult) ReadField1(iprot thrift.Protocol) error {
	p.E = NewLaserException()
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *LaserServiceLrangeResult) Write(oprot thrift.Protocol) error {
	if err := oprot.WriteStructBegin("lrange_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *LaserServiceLrangeResult) writeField0(oprot thrift.Protocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *LaserServiceLrangeResult) writeField1(oprot thrift.Protocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *LaserServiceLrangeResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LaserServiceLrangeResult(%+v)", *p)
}

// Attributes:
//  - Key
type LaserServiceRpopArgs struct {
	Key *LaserKey `thrift:"key,1" db:"key" json:"key"`
}

func NewLaserServiceRpopArgs() *LaserServiceRpopArgs {
	return &LaserServiceRpopArgs{}
}

var LaserServiceRpopArgs_Key_DEFAULT *LaserKey

func (p *LaserServiceRpopArgs) GetKey() *LaserKey {
	if !p.IsSetKey() {
		return LaserServiceRpopArgs_Key_DEFAULT
	}
	return p.Key
}
func (p *LaserServiceRpopArgs) IsSetKey() bool {
	return p.Key != nil
}

func (p *LaserServiceRpopArgs) Read(iprot thrift.Protocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *LaserServiceRpopArgs) ReadField1(iprot thrift.Protocol) error {
	p.Key = NewLaserKey()
	if err := p.Key.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Key), err)
	}
	return nil
}

func (p *LaserServiceRpopArgs) Write(oprot thrift.Protocol) error {
	if err := oprot.WriteStructBegin("rpop_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *LaserServiceRpopArgs) writeField1(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("key", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:key: ", p), err)
	}
	if err := p.Key.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Key), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:key: ", p), err)
	}
	return err
}

func (p *LaserServiceRpopArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LaserServiceRpopArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type LaserServiceRpopResult struct {
	Success *LaserResponse  `thrift:"success,0" db:"success" json:"success,omitempty"`
	E       *LaserException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewLaserServiceRpopResult() *LaserServiceRpopResult {
	return &LaserServiceRpopResult{}
}

var LaserServiceRpopResult_Success_DEFAULT *LaserResponse

func (p *LaserServiceRpopResult) GetSuccess() *LaserResponse {
	if !p.IsSetSuccess() {
		return LaserServiceRpopResult_Success_DEFAULT
	}
	return p.Success
}

var LaserServiceRpopResult_E_DEFAULT *LaserException

func (p *LaserServiceRpopResult) GetE() *LaserException {
	if !p.IsSetE() {
		return LaserServiceRpopResult_E_DEFAULT
	}
	return p.E
}
func (p *LaserServiceRpopResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *LaserServiceRpopResult) IsSetE() bool {
	return p.E != nil
}

func (p *LaserServiceRpopResult) Read(iprot thrift.Protocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *LaserServiceRpopResult) ReadField0(iprot thrift.Protocol) error {
	p.Success = NewLaserResponse()
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *LaserServiceRpopResult) ReadField1(iprot thrift.Protocol) error {
	p.E = NewLaserException()
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *LaserServiceRpopResult) Write(oprot thrift.Protocol) error {
	if err := oprot.WriteStructBegin("rpop_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *LaserServiceRpopResult) writeField0(oprot thrift.Protocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *LaserServiceRpopResult) writeField1(oprot thrift.Protocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *LaserServiceRpopResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LaserServiceRpopResult(%+v)", *p)
}

// Attributes:
//  - Key
//  - Value
type LaserServiceRpushArgs struct {
	Key   *LaserKey `thrift:"key,1" db:"key" json:"key"`
	Value string    `thrift:"value,2" db:"value" json:"value"`
}

func NewLaserServiceRpushArgs() *LaserServiceRpushArgs {
	return &LaserServiceRpushArgs{}
}

var LaserServiceRpushArgs_Key_DEFAULT *LaserKey

func (p *LaserServiceRpushArgs) GetKey() *LaserKey {
	if !p.IsSetKey() {
		return LaserServiceRpushArgs_Key_DEFAULT
	}
	return p.Key
}

func (p *LaserServiceRpushArgs) GetValue() string {
	return p.Value
}
func (p *LaserServiceRpushArgs) IsSetKey() bool {
	return p.Key != nil
}

func (p *LaserServiceRpushArgs) Read(iprot thrift.Protocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *LaserServiceRpushArgs) ReadField1(iprot thrift.Protocol) error {
	p.Key = NewLaserKey()
	if err := p.Key.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Key), err)
	}
	return nil
}

func (p *LaserServiceRpushArgs) ReadField2(iprot thrift.Protocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Value = v
	}
	return nil
}

func (p *LaserServiceRpushArgs) Write(oprot thrift.Protocol) error {
	if err := oprot.WriteStructBegin("rpush_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *LaserServiceRpushArgs) writeField1(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("key", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:key: ", p), err)
	}
	if err := p.Key.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Key), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:key: ", p), err)
	}
	return err
}

func (p *LaserServiceRpushArgs) writeField2(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("value", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:value: ", p), err)
	}
	if err := oprot.WriteString(string(p.Value)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.value (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:value: ", p), err)
	}
	return err
}

func (p *LaserServiceRpushArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LaserServiceRpushArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type LaserServiceRpushResult struct {
	Success *LaserResponse  `thrift:"success,0" db:"success" json:"success,omitempty"`
	E       *LaserException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewLaserServiceRpushResult() *LaserServiceRpushResult {
	return &LaserServiceRpushResult{}
}

var LaserServiceRpushResult_Success_DEFAULT *LaserResponse

func (p *LaserServiceRpushResult) GetSuccess() *LaserResponse {
	if !p.IsSetSuccess() {
		return LaserServiceRpushResult_Success_DEFAULT
	}
	return p.Success
}

var LaserServiceRpushResult_E_DEFAULT *LaserException

func (p *LaserServiceRpushResult) GetE() *LaserException {
	if !p.IsSetE() {
		return LaserServiceRpushResult_E_DEFAULT
	}
	return p.E
}
func (p *LaserServiceRpushResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *LaserServiceRpushResult) IsSetE() bool {
	return p.E != nil
}

func (p *LaserServiceRpushResult) Read(iprot thrift.Protocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *LaserServiceRpushResult) ReadField0(iprot thrift.Protocol) error {
	p.Success = NewLaserResponse()
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *LaserServiceRpushResult) ReadField1(iprot thrift.Protocol) error {
	p.E = NewLaserException()
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *LaserServiceRpushResult) Write(oprot thrift.Protocol) error {
	if err := oprot.WriteStructBegin("rpush_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *LaserServiceRpushResult) writeField0(oprot thrift.Protocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *LaserServiceRpushResult) writeField1(oprot thrift.Protocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *LaserServiceRpushResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LaserServiceRpushResult(%+v)", *p)
}

// Attributes:
//  - Key
//  - Member
type LaserServiceSaddArgs struct {
	Key    *LaserKey `thrift:"key,1" db:"key" json:"key"`
	Member string    `thrift:"member,2" db:"member" json:"member"`
}

func NewLaserServiceSaddArgs() *LaserServiceSaddArgs {
	return &LaserServiceSaddArgs{}
}

var LaserServiceSaddArgs_Key_DEFAULT *LaserKey

func (p *LaserServiceSaddArgs) GetKey() *LaserKey {
	if !p.IsSetKey() {
		return LaserServiceSaddArgs_Key_DEFAULT
	}
	return p.Key
}

func (p *LaserServiceSaddArgs) GetMember() string {
	return p.Member
}
func (p *LaserServiceSaddArgs) IsSetKey() bool {
	return p.Key != nil
}

func (p *LaserServiceSaddArgs) Read(iprot thrift.Protocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *LaserServiceSaddArgs) ReadField1(iprot thrift.Protocol) error {
	p.Key = NewLaserKey()
	if err := p.Key.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Key), err)
	}
	return nil
}

func (p *LaserServiceSaddArgs) ReadField2(iprot thrift.Protocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Member = v
	}
	return nil
}

func (p *LaserServiceSaddArgs) Write(oprot thrift.Protocol) error {
	if err := oprot.WriteStructBegin("sadd_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *LaserServiceSaddArgs) writeField1(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("key", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:key: ", p), err)
	}
	if err := p.Key.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Key), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:key: ", p), err)
	}
	return err
}

func (p *LaserServiceSaddArgs) writeField2(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("member", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:member: ", p), err)
	}
	if err := oprot.WriteString(string(p.Member)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.member (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:member: ", p), err)
	}
	return err
}

func (p *LaserServiceSaddArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LaserServiceSaddArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type LaserServiceSaddResult struct {
	Success *LaserResponse  `thrift:"success,0" db:"success" json:"success,omitempty"`
	E       *LaserException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewLaserServiceSaddResult() *LaserServiceSaddResult {
	return &LaserServiceSaddResult{}
}

var LaserServiceSaddResult_Success_DEFAULT *LaserResponse

func (p *LaserServiceSaddResult) GetSuccess() *LaserResponse {
	if !p.IsSetSuccess() {
		return LaserServiceSaddResult_Success_DEFAULT
	}
	return p.Success
}

var LaserServiceSaddResult_E_DEFAULT *LaserException

func (p *LaserServiceSaddResult) GetE() *LaserException {
	if !p.IsSetE() {
		return LaserServiceSaddResult_E_DEFAULT
	}
	return p.E
}
func (p *LaserServiceSaddResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *LaserServiceSaddResult) IsSetE() bool {
	return p.E != nil
}

func (p *LaserServiceSaddResult) Read(iprot thrift.Protocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *LaserServiceSaddResult) ReadField0(iprot thrift.Protocol) error {
	p.Success = NewLaserResponse()
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *LaserServiceSaddResult) ReadField1(iprot thrift.Protocol) error {
	p.E = NewLaserException()
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *LaserServiceSaddResult) Write(oprot thrift.Protocol) error {
	if err := oprot.WriteStructBegin("sadd_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *LaserServiceSaddResult) writeField0(oprot thrift.Protocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *LaserServiceSaddResult) writeField1(oprot thrift.Protocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *LaserServiceSaddResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LaserServiceSaddResult(%+v)", *p)
}

// Attributes:
//  - Req
type LaserServiceScardArgs struct {
	Req *LaserKey `thrift:"req,1" db:"req" json:"req"`
}

func NewLaserServiceScardArgs() *LaserServiceScardArgs {
	return &LaserServiceScardArgs{}
}

var LaserServiceScardArgs_Req_DEFAULT *LaserKey

func (p *LaserServiceScardArgs) GetReq() *LaserKey {
	if !p.IsSetReq() {
		return LaserServiceScardArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *LaserServiceScardArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *LaserServiceScardArgs) Read(iprot thrift.Protocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *LaserServiceScardArgs) ReadField1(iprot thrift.Protocol) error {
	p.Req = NewLaserKey()
	if err := p.Req.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
	}
	return nil
}

func (p *LaserServiceScardArgs) Write(oprot thrift.Protocol) error {
	if err := oprot.WriteStructBegin("scard_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *LaserServiceScardArgs) writeField1(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err)
	}
	return err
}

func (p *LaserServiceScardArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LaserServiceScardArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type LaserServiceScardResult struct {
	Success *LaserResponse  `thrift:"success,0" db:"success" json:"success,omitempty"`
	E       *LaserException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewLaserServiceScardResult() *LaserServiceScardResult {
	return &LaserServiceScardResult{}
}

var LaserServiceScardResult_Success_DEFAULT *LaserResponse

func (p *LaserServiceScardResult) GetSuccess() *LaserResponse {
	if !p.IsSetSuccess() {
		return LaserServiceScardResult_Success_DEFAULT
	}
	return p.Success
}

var LaserServiceScardResult_E_DEFAULT *LaserException

func (p *LaserServiceScardResult) GetE() *LaserException {
	if !p.IsSetE() {
		return LaserServiceScardResult_E_DEFAULT
	}
	return p.E
}
func (p *LaserServiceScardResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *LaserServiceScardResult) IsSetE() bool {
	return p.E != nil
}

func (p *LaserServiceScardResult) Read(iprot thrift.Protocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *LaserServiceScardResult) ReadField0(iprot thrift.Protocol) error {
	p.Success = NewLaserResponse()
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *LaserServiceScardResult) ReadField1(iprot thrift.Protocol) error {
	p.E = NewLaserException()
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *LaserServiceScardResult) Write(oprot thrift.Protocol) error {
	if err := oprot.WriteStructBegin("scard_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *LaserServiceScardResult) writeField0(oprot thrift.Protocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *LaserServiceScardResult) writeField1(oprot thrift.Protocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *LaserServiceScardResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LaserServiceScardResult(%+v)", *p)
}

// Attributes:
//  - Req
//  - Member
type LaserServiceSismemberArgs struct {
	Req    *LaserKey `thrift:"req,1" db:"req" json:"req"`
	Member string    `thrift:"member,2" db:"member" json:"member"`
}

func NewLaserServiceSismemberArgs() *LaserServiceSismemberArgs {
	return &LaserServiceSismemberArgs{}
}

var LaserServiceSismemberArgs_Req_DEFAULT *LaserKey

func (p *LaserServiceSismemberArgs) GetReq() *LaserKey {
	if !p.IsSetReq() {
		return LaserServiceSismemberArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *LaserServiceSismemberArgs) GetMember() string {
	return p.Member
}
func (p *LaserServiceSismemberArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *LaserServiceSismemberArgs) Read(iprot thrift.Protocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *LaserServiceSismemberArgs) ReadField1(iprot thrift.Protocol) error {
	p.Req = NewLaserKey()
	if err := p.Req.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
	}
	return nil
}

func (p *LaserServiceSismemberArgs) ReadField2(iprot thrift.Protocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Member = v
	}
	return nil
}

func (p *LaserServiceSismemberArgs) Write(oprot thrift.Protocol) error {
	if err := oprot.WriteStructBegin("sismember_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *LaserServiceSismemberArgs) writeField1(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err)
	}
	return err
}

func (p *LaserServiceSismemberArgs) writeField2(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("member", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:member: ", p), err)
	}
	if err := oprot.WriteString(string(p.Member)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.member (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:member: ", p), err)
	}
	return err
}

func (p *LaserServiceSismemberArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LaserServiceSismemberArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type LaserServiceSismemberResult struct {
	Success *LaserResponse  `thrift:"success,0" db:"success" json:"success,omitempty"`
	E       *LaserException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewLaserServiceSismemberResult() *LaserServiceSismemberResult {
	return &LaserServiceSismemberResult{}
}

var LaserServiceSismemberResult_Success_DEFAULT *LaserResponse

func (p *LaserServiceSismemberResult) GetSuccess() *LaserResponse {
	if !p.IsSetSuccess() {
		return LaserServiceSismemberResult_Success_DEFAULT
	}
	return p.Success
}

var LaserServiceSismemberResult_E_DEFAULT *LaserException

func (p *LaserServiceSismemberResult) GetE() *LaserException {
	if !p.IsSetE() {
		return LaserServiceSismemberResult_E_DEFAULT
	}
	return p.E
}
func (p *LaserServiceSismemberResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *LaserServiceSismemberResult) IsSetE() bool {
	return p.E != nil
}

func (p *LaserServiceSismemberResult) Read(iprot thrift.Protocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *LaserServiceSismemberResult) ReadField0(iprot thrift.Protocol) error {
	p.Success = NewLaserResponse()
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *LaserServiceSismemberResult) ReadField1(iprot thrift.Protocol) error {
	p.E = NewLaserException()
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *LaserServiceSismemberResult) Write(oprot thrift.Protocol) error {
	if err := oprot.WriteStructBegin("sismember_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *LaserServiceSismemberResult) writeField0(oprot thrift.Protocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *LaserServiceSismemberResult) writeField1(oprot thrift.Protocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *LaserServiceSismemberResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LaserServiceSismemberResult(%+v)", *p)
}

// Attributes:
//  - Req
//  - Member
type LaserServiceSremoveArgs struct {
	Req    *LaserKey `thrift:"req,1" db:"req" json:"req"`
	Member string    `thrift:"member,2" db:"member" json:"member"`
}

func NewLaserServiceSremoveArgs() *LaserServiceSremoveArgs {
	return &LaserServiceSremoveArgs{}
}

var LaserServiceSremoveArgs_Req_DEFAULT *LaserKey

func (p *LaserServiceSremoveArgs) GetReq() *LaserKey {
	if !p.IsSetReq() {
		return LaserServiceSremoveArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *LaserServiceSremoveArgs) GetMember() string {
	return p.Member
}
func (p *LaserServiceSremoveArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *LaserServiceSremoveArgs) Read(iprot thrift.Protocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *LaserServiceSremoveArgs) ReadField1(iprot thrift.Protocol) error {
	p.Req = NewLaserKey()
	if err := p.Req.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
	}
	return nil
}

func (p *LaserServiceSremoveArgs) ReadField2(iprot thrift.Protocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Member = v
	}
	return nil
}

func (p *LaserServiceSremoveArgs) Write(oprot thrift.Protocol) error {
	if err := oprot.WriteStructBegin("sremove_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *LaserServiceSremoveArgs) writeField1(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err)
	}
	return err
}

func (p *LaserServiceSremoveArgs) writeField2(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("member", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:member: ", p), err)
	}
	if err := oprot.WriteString(string(p.Member)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.member (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:member: ", p), err)
	}
	return err
}

func (p *LaserServiceSremoveArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LaserServiceSremoveArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type LaserServiceSremoveResult struct {
	Success *LaserResponse  `thrift:"success,0" db:"success" json:"success,omitempty"`
	E       *LaserException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewLaserServiceSremoveResult() *LaserServiceSremoveResult {
	return &LaserServiceSremoveResult{}
}

var LaserServiceSremoveResult_Success_DEFAULT *LaserResponse

func (p *LaserServiceSremoveResult) GetSuccess() *LaserResponse {
	if !p.IsSetSuccess() {
		return LaserServiceSremoveResult_Success_DEFAULT
	}
	return p.Success
}

var LaserServiceSremoveResult_E_DEFAULT *LaserException

func (p *LaserServiceSremoveResult) GetE() *LaserException {
	if !p.IsSetE() {
		return LaserServiceSremoveResult_E_DEFAULT
	}
	return p.E
}
func (p *LaserServiceSremoveResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *LaserServiceSremoveResult) IsSetE() bool {
	return p.E != nil
}

func (p *LaserServiceSremoveResult) Read(iprot thrift.Protocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *LaserServiceSremoveResult) ReadField0(iprot thrift.Protocol) error {
	p.Success = NewLaserResponse()
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *LaserServiceSremoveResult) ReadField1(iprot thrift.Protocol) error {
	p.E = NewLaserException()
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *LaserServiceSremoveResult) Write(oprot thrift.Protocol) error {
	if err := oprot.WriteStructBegin("sremove_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *LaserServiceSremoveResult) writeField0(oprot thrift.Protocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *LaserServiceSremoveResult) writeField1(oprot thrift.Protocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *LaserServiceSremoveResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LaserServiceSremoveResult(%+v)", *p)
}

// Attributes:
//  - Req
type LaserServiceSmembersArgs struct {
	Req *LaserKey `thrift:"req,1" db:"req" json:"req"`
}

func NewLaserServiceSmembersArgs() *LaserServiceSmembersArgs {
	return &LaserServiceSmembersArgs{}
}

var LaserServiceSmembersArgs_Req_DEFAULT *LaserKey

func (p *LaserServiceSmembersArgs) GetReq() *LaserKey {
	if !p.IsSetReq() {
		return LaserServiceSmembersArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *LaserServiceSmembersArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *LaserServiceSmembersArgs) Read(iprot thrift.Protocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *LaserServiceSmembersArgs) ReadField1(iprot thrift.Protocol) error {
	p.Req = NewLaserKey()
	if err := p.Req.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
	}
	return nil
}

func (p *LaserServiceSmembersArgs) Write(oprot thrift.Protocol) error {
	if err := oprot.WriteStructBegin("smembers_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *LaserServiceSmembersArgs) writeField1(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err)
	}
	return err
}

func (p *LaserServiceSmembersArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LaserServiceSmembersArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type LaserServiceSmembersResult struct {
	Success *LaserResponse  `thrift:"success,0" db:"success" json:"success,omitempty"`
	E       *LaserException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewLaserServiceSmembersResult() *LaserServiceSmembersResult {
	return &LaserServiceSmembersResult{}
}

var LaserServiceSmembersResult_Success_DEFAULT *LaserResponse

func (p *LaserServiceSmembersResult) GetSuccess() *LaserResponse {
	if !p.IsSetSuccess() {
		return LaserServiceSmembersResult_Success_DEFAULT
	}
	return p.Success
}

var LaserServiceSmembersResult_E_DEFAULT *LaserException

func (p *LaserServiceSmembersResult) GetE() *LaserException {
	if !p.IsSetE() {
		return LaserServiceSmembersResult_E_DEFAULT
	}
	return p.E
}
func (p *LaserServiceSmembersResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *LaserServiceSmembersResult) IsSetE() bool {
	return p.E != nil
}

func (p *LaserServiceSmembersResult) Read(iprot thrift.Protocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *LaserServiceSmembersResult) ReadField0(iprot thrift.Protocol) error {
	p.Success = NewLaserResponse()
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *LaserServiceSmembersResult) ReadField1(iprot thrift.Protocol) error {
	p.E = NewLaserException()
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *LaserServiceSmembersResult) Write(oprot thrift.Protocol) error {
	if err := oprot.WriteStructBegin("smembers_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *LaserServiceSmembersResult) writeField0(oprot thrift.Protocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *LaserServiceSmembersResult) writeField1(oprot thrift.Protocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *LaserServiceSmembersResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LaserServiceSmembersResult(%+v)", *p)
}

// Attributes:
//  - Key
//  - MemberScore
type LaserServiceZaddArgs struct {
	Key         *LaserKey   `thrift:"key,1" db:"key" json:"key"`
	MemberScore *LaserValue `thrift:"member_score,2" db:"member_score" json:"member_score"`
}

func NewLaserServiceZaddArgs() *LaserServiceZaddArgs {
	return &LaserServiceZaddArgs{}
}

var LaserServiceZaddArgs_Key_DEFAULT *LaserKey

func (p *LaserServiceZaddArgs) GetKey() *LaserKey {
	if !p.IsSetKey() {
		return LaserServiceZaddArgs_Key_DEFAULT
	}
	return p.Key
}

var LaserServiceZaddArgs_MemberScore_DEFAULT *LaserValue

func (p *LaserServiceZaddArgs) GetMemberScore() *LaserValue {
	if !p.IsSetMemberScore() {
		return LaserServiceZaddArgs_MemberScore_DEFAULT
	}
	return p.MemberScore
}
func (p *LaserServiceZaddArgs) IsSetKey() bool {
	return p.Key != nil
}

func (p *LaserServiceZaddArgs) IsSetMemberScore() bool {
	return p.MemberScore != nil
}

func (p *LaserServiceZaddArgs) Read(iprot thrift.Protocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *LaserServiceZaddArgs) ReadField1(iprot thrift.Protocol) error {
	p.Key = NewLaserKey()
	if err := p.Key.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Key), err)
	}
	return nil
}

func (p *LaserServiceZaddArgs) ReadField2(iprot thrift.Protocol) error {
	p.MemberScore = NewLaserValue()
	if err := p.MemberScore.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.MemberScore), err)
	}
	return nil
}

func (p *LaserServiceZaddArgs) Write(oprot thrift.Protocol) error {
	if err := oprot.WriteStructBegin("zadd_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *LaserServiceZaddArgs) writeField1(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("key", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:key: ", p), err)
	}
	if err := p.Key.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Key), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:key: ", p), err)
	}
	return err
}

func (p *LaserServiceZaddArgs) writeField2(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("member_score", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:member_score: ", p), err)
	}
	if err := p.MemberScore.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.MemberScore), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:member_score: ", p), err)
	}
	return err
}

func (p *LaserServiceZaddArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LaserServiceZaddArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type LaserServiceZaddResult struct {
	Success *LaserResponse  `thrift:"success,0" db:"success" json:"success,omitempty"`
	E       *LaserException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewLaserServiceZaddResult() *LaserServiceZaddResult {
	return &LaserServiceZaddResult{}
}

var LaserServiceZaddResult_Success_DEFAULT *LaserResponse

func (p *LaserServiceZaddResult) GetSuccess() *LaserResponse {
	if !p.IsSetSuccess() {
		return LaserServiceZaddResult_Success_DEFAULT
	}
	return p.Success
}

var LaserServiceZaddResult_E_DEFAULT *LaserException

func (p *LaserServiceZaddResult) GetE() *LaserException {
	if !p.IsSetE() {
		return LaserServiceZaddResult_E_DEFAULT
	}
	return p.E
}
func (p *LaserServiceZaddResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *LaserServiceZaddResult) IsSetE() bool {
	return p.E != nil
}

func (p *LaserServiceZaddResult) Read(iprot thrift.Protocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *LaserServiceZaddResult) ReadField0(iprot thrift.Protocol) error {
	p.Success = NewLaserResponse()
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *LaserServiceZaddResult) ReadField1(iprot thrift.Protocol) error {
	p.E = NewLaserException()
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *LaserServiceZaddResult) Write(oprot thrift.Protocol) error {
	if err := oprot.WriteStructBegin("zadd_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *LaserServiceZaddResult) writeField0(oprot thrift.Protocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *LaserServiceZaddResult) writeField1(oprot thrift.Protocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *LaserServiceZaddResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LaserServiceZaddResult(%+v)", *p)
}

// Attributes:
//  - Key
type LaserServiceZcardArgs struct {
	Key *LaserKey `thrift:"key,1" db:"key" json:"key"`
}

func NewLaserServiceZcardArgs() *LaserServiceZcardArgs {
	return &LaserServiceZcardArgs{}
}

var LaserServiceZcardArgs_Key_DEFAULT *LaserKey

func (p *LaserServiceZcardArgs) GetKey() *LaserKey {
	if !p.IsSetKey() {
		return LaserServiceZcardArgs_Key_DEFAULT
	}
	return p.Key
}
func (p *LaserServiceZcardArgs) IsSetKey() bool {
	return p.Key != nil
}

func (p *LaserServiceZcardArgs) Read(iprot thrift.Protocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *LaserServiceZcardArgs) ReadField1(iprot thrift.Protocol) error {
	p.Key = NewLaserKey()
	if err := p.Key.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Key), err)
	}
	return nil
}

func (p *LaserServiceZcardArgs) Write(oprot thrift.Protocol) error {
	if err := oprot.WriteStructBegin("zcard_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *LaserServiceZcardArgs) writeField1(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("key", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:key: ", p), err)
	}
	if err := p.Key.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Key), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:key: ", p), err)
	}
	return err
}

func (p *LaserServiceZcardArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LaserServiceZcardArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type LaserServiceZcardResult struct {
	Success *LaserResponse  `thrift:"success,0" db:"success" json:"success,omitempty"`
	E       *LaserException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewLaserServiceZcardResult() *LaserServiceZcardResult {
	return &LaserServiceZcardResult{}
}

var LaserServiceZcardResult_Success_DEFAULT *LaserResponse

func (p *LaserServiceZcardResult) GetSuccess() *LaserResponse {
	if !p.IsSetSuccess() {
		return LaserServiceZcardResult_Success_DEFAULT
	}
	return p.Success
}

var LaserServiceZcardResult_E_DEFAULT *LaserException

func (p *LaserServiceZcardResult) GetE() *LaserException {
	if !p.IsSetE() {
		return LaserServiceZcardResult_E_DEFAULT
	}
	return p.E
}
func (p *LaserServiceZcardResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *LaserServiceZcardResult) IsSetE() bool {
	return p.E != nil
}

func (p *LaserServiceZcardResult) Read(iprot thrift.Protocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *LaserServiceZcardResult) ReadField0(iprot thrift.Protocol) error {
	p.Success = NewLaserResponse()
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *LaserServiceZcardResult) ReadField1(iprot thrift.Protocol) error {
	p.E = NewLaserException()
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *LaserServiceZcardResult) Write(oprot thrift.Protocol) error {
	if err := oprot.WriteStructBegin("zcard_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *LaserServiceZcardResult) writeField0(oprot thrift.Protocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *LaserServiceZcardResult) writeField1(oprot thrift.Protocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *LaserServiceZcardResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LaserServiceZcardResult(%+v)", *p)
}

// Attributes:
//  - Key
//  - Member
type LaserServiceZrankArgs struct {
	Key    *LaserKey `thrift:"key,1" db:"key" json:"key"`
	Member string    `thrift:"member,2" db:"member" json:"member"`
}

func NewLaserServiceZrankArgs() *LaserServiceZrankArgs {
	return &LaserServiceZrankArgs{}
}

var LaserServiceZrankArgs_Key_DEFAULT *LaserKey

func (p *LaserServiceZrankArgs) GetKey() *LaserKey {
	if !p.IsSetKey() {
		return LaserServiceZrankArgs_Key_DEFAULT
	}
	return p.Key
}

func (p *LaserServiceZrankArgs) GetMember() string {
	return p.Member
}
func (p *LaserServiceZrankArgs) IsSetKey() bool {
	return p.Key != nil
}

func (p *LaserServiceZrankArgs) Read(iprot thrift.Protocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *LaserServiceZrankArgs) ReadField1(iprot thrift.Protocol) error {
	p.Key = NewLaserKey()
	if err := p.Key.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Key), err)
	}
	return nil
}

func (p *LaserServiceZrankArgs) ReadField2(iprot thrift.Protocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Member = v
	}
	return nil
}

func (p *LaserServiceZrankArgs) Write(oprot thrift.Protocol) error {
	if err := oprot.WriteStructBegin("zrank_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *LaserServiceZrankArgs) writeField1(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("key", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:key: ", p), err)
	}
	if err := p.Key.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Key), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:key: ", p), err)
	}
	return err
}

func (p *LaserServiceZrankArgs) writeField2(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("member", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:member: ", p), err)
	}
	if err := oprot.WriteString(string(p.Member)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.member (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:member: ", p), err)
	}
	return err
}

func (p *LaserServiceZrankArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LaserServiceZrankArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type LaserServiceZrankResult struct {
	Success *LaserResponse  `thrift:"success,0" db:"success" json:"success,omitempty"`
	E       *LaserException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewLaserServiceZrankResult() *LaserServiceZrankResult {
	return &LaserServiceZrankResult{}
}

var LaserServiceZrankResult_Success_DEFAULT *LaserResponse

func (p *LaserServiceZrankResult) GetSuccess() *LaserResponse {
	if !p.IsSetSuccess() {
		return LaserServiceZrankResult_Success_DEFAULT
	}
	return p.Success
}

var LaserServiceZrankResult_E_DEFAULT *LaserException

func (p *LaserServiceZrankResult) GetE() *LaserException {
	if !p.IsSetE() {
		return LaserServiceZrankResult_E_DEFAULT
	}
	return p.E
}
func (p *LaserServiceZrankResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *LaserServiceZrankResult) IsSetE() bool {
	return p.E != nil
}

func (p *LaserServiceZrankResult) Read(iprot thrift.Protocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *LaserServiceZrankResult) ReadField0(iprot thrift.Protocol) error {
	p.Success = NewLaserResponse()
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *LaserServiceZrankResult) ReadField1(iprot thrift.Protocol) error {
	p.E = NewLaserException()
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *LaserServiceZrankResult) Write(oprot thrift.Protocol) error {
	if err := oprot.WriteStructBegin("zrank_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *LaserServiceZrankResult) writeField0(oprot thrift.Protocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *LaserServiceZrankResult) writeField1(oprot thrift.Protocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *LaserServiceZrankResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LaserServiceZrankResult(%+v)", *p)
}

// Attributes:
//  - Key
//  - Member
type LaserServiceZscoreArgs struct {
	Key    *LaserKey `thrift:"key,1" db:"key" json:"key"`
	Member string    `thrift:"member,2" db:"member" json:"member"`
}

func NewLaserServiceZscoreArgs() *LaserServiceZscoreArgs {
	return &LaserServiceZscoreArgs{}
}

var LaserServiceZscoreArgs_Key_DEFAULT *LaserKey

func (p *LaserServiceZscoreArgs) GetKey() *LaserKey {
	if !p.IsSetKey() {
		return LaserServiceZscoreArgs_Key_DEFAULT
	}
	return p.Key
}

func (p *LaserServiceZscoreArgs) GetMember() string {
	return p.Member
}
func (p *LaserServiceZscoreArgs) IsSetKey() bool {
	return p.Key != nil
}

func (p *LaserServiceZscoreArgs) Read(iprot thrift.Protocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *LaserServiceZscoreArgs) ReadField1(iprot thrift.Protocol) error {
	p.Key = NewLaserKey()
	if err := p.Key.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Key), err)
	}
	return nil
}

func (p *LaserServiceZscoreArgs) ReadField2(iprot thrift.Protocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Member = v
	}
	return nil
}

func (p *LaserServiceZscoreArgs) Write(oprot thrift.Protocol) error {
	if err := oprot.WriteStructBegin("zscore_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *LaserServiceZscoreArgs) writeField1(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("key", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:key: ", p), err)
	}
	if err := p.Key.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Key), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:key: ", p), err)
	}
	return err
}

func (p *LaserServiceZscoreArgs) writeField2(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("member", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:member: ", p), err)
	}
	if err := oprot.WriteString(string(p.Member)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.member (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:member: ", p), err)
	}
	return err
}

func (p *LaserServiceZscoreArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LaserServiceZscoreArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type LaserServiceZscoreResult struct {
	Success *LaserResponse  `thrift:"success,0" db:"success" json:"success,omitempty"`
	E       *LaserException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewLaserServiceZscoreResult() *LaserServiceZscoreResult {
	return &LaserServiceZscoreResult{}
}

var LaserServiceZscoreResult_Success_DEFAULT *LaserResponse

func (p *LaserServiceZscoreResult) GetSuccess() *LaserResponse {
	if !p.IsSetSuccess() {
		return LaserServiceZscoreResult_Success_DEFAULT
	}
	return p.Success
}

var LaserServiceZscoreResult_E_DEFAULT *LaserException

func (p *LaserServiceZscoreResult) GetE() *LaserException {
	if !p.IsSetE() {
		return LaserServiceZscoreResult_E_DEFAULT
	}
	return p.E
}
func (p *LaserServiceZscoreResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *LaserServiceZscoreResult) IsSetE() bool {
	return p.E != nil
}

func (p *LaserServiceZscoreResult) Read(iprot thrift.Protocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *LaserServiceZscoreResult) ReadField0(iprot thrift.Protocol) error {
	p.Success = NewLaserResponse()
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *LaserServiceZscoreResult) ReadField1(iprot thrift.Protocol) error {
	p.E = NewLaserException()
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *LaserServiceZscoreResult) Write(oprot thrift.Protocol) error {
	if err := oprot.WriteStructBegin("zscore_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *LaserServiceZscoreResult) writeField0(oprot thrift.Protocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *LaserServiceZscoreResult) writeField1(oprot thrift.Protocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *LaserServiceZscoreResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LaserServiceZscoreResult(%+v)", *p)
}

// Attributes:
//  - Key
//  - Member
type LaserServiceZremArgs struct {
	Key    *LaserKey `thrift:"key,1" db:"key" json:"key"`
	Member string    `thrift:"member,2" db:"member" json:"member"`
}

func NewLaserServiceZremArgs() *LaserServiceZremArgs {
	return &LaserServiceZremArgs{}
}

var LaserServiceZremArgs_Key_DEFAULT *LaserKey

func (p *LaserServiceZremArgs) GetKey() *LaserKey {
	if !p.IsSetKey() {
		return LaserServiceZremArgs_Key_DEFAULT
	}
	return p.Key
}

func (p *LaserServiceZremArgs) GetMember() string {
	return p.Member
}
func (p *LaserServiceZremArgs) IsSetKey() bool {
	return p.Key != nil
}

func (p *LaserServiceZremArgs) Read(iprot thrift.Protocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *LaserServiceZremArgs) ReadField1(iprot thrift.Protocol) error {
	p.Key = NewLaserKey()
	if err := p.Key.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Key), err)
	}
	return nil
}

func (p *LaserServiceZremArgs) ReadField2(iprot thrift.Protocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Member = v
	}
	return nil
}

func (p *LaserServiceZremArgs) Write(oprot thrift.Protocol) error {
	if err := oprot.WriteStructBegin("zrem_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *LaserServiceZremArgs) writeField1(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("key", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:key: ", p), err)
	}
	if err := p.Key.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Key), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:key: ", p), err)
	}
	return err
}

func (p *LaserServiceZremArgs) writeField2(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("member", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:member: ", p), err)
	}
	if err := oprot.WriteString(string(p.Member)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.member (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:member: ", p), err)
	}
	return err
}

func (p *LaserServiceZremArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LaserServiceZremArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type LaserServiceZremResult struct {
	Success *LaserResponse  `thrift:"success,0" db:"success" json:"success,omitempty"`
	E       *LaserException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewLaserServiceZremResult() *LaserServiceZremResult {
	return &LaserServiceZremResult{}
}

var LaserServiceZremResult_Success_DEFAULT *LaserResponse

func (p *LaserServiceZremResult) GetSuccess() *LaserResponse {
	if !p.IsSetSuccess() {
		return LaserServiceZremResult_Success_DEFAULT
	}
	return p.Success
}

var LaserServiceZremResult_E_DEFAULT *LaserException

func (p *LaserServiceZremResult) GetE() *LaserException {
	if !p.IsSetE() {
		return LaserServiceZremResult_E_DEFAULT
	}
	return p.E
}
func (p *LaserServiceZremResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *LaserServiceZremResult) IsSetE() bool {
	return p.E != nil
}

func (p *LaserServiceZremResult) Read(iprot thrift.Protocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *LaserServiceZremResult) ReadField0(iprot thrift.Protocol) error {
	p.Success = NewLaserResponse()
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *LaserServiceZremResult) ReadField1(iprot thrift.Protocol) error {
	p.E = NewLaserException()
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *LaserServiceZremResult) Write(oprot thrift.Protocol) error {
	if err := oprot.WriteStructBegin("zrem_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *LaserServiceZremResult) writeField0(oprot thrift.Protocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *LaserServiceZremResult) writeField1(oprot thrift.Protocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *LaserServiceZremResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LaserServiceZremResult(%+v)", *p)
}

// Attributes:
//  - Key
//  - Start
//  - Stop
type LaserServiceZrangeArgs struct {
	Key   *LaserKey `thrift:"key,1" db:"key" json:"key"`
	Start int64     `thrift:"start,2" db:"start" json:"start"`
	Stop  int64     `thrift:"stop,3" db:"stop" json:"stop"`
}

func NewLaserServiceZrangeArgs() *LaserServiceZrangeArgs {
	return &LaserServiceZrangeArgs{}
}

var LaserServiceZrangeArgs_Key_DEFAULT *LaserKey

func (p *LaserServiceZrangeArgs) GetKey() *LaserKey {
	if !p.IsSetKey() {
		return LaserServiceZrangeArgs_Key_DEFAULT
	}
	return p.Key
}

func (p *LaserServiceZrangeArgs) GetStart() int64 {
	return p.Start
}

func (p *LaserServiceZrangeArgs) GetStop() int64 {
	return p.Stop
}
func (p *LaserServiceZrangeArgs) IsSetKey() bool {
	return p.Key != nil
}

func (p *LaserServiceZrangeArgs) Read(iprot thrift.Protocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *LaserServiceZrangeArgs) ReadField1(iprot thrift.Protocol) error {
	p.Key = NewLaserKey()
	if err := p.Key.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Key), err)
	}
	return nil
}

func (p *LaserServiceZrangeArgs) ReadField2(iprot thrift.Protocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Start = v
	}
	return nil
}

func (p *LaserServiceZrangeArgs) ReadField3(iprot thrift.Protocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Stop = v
	}
	return nil
}

func (p *LaserServiceZrangeArgs) Write(oprot thrift.Protocol) error {
	if err := oprot.WriteStructBegin("zrange_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *LaserServiceZrangeArgs) writeField1(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("key", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:key: ", p), err)
	}
	if err := p.Key.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Key), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:key: ", p), err)
	}
	return err
}

func (p *LaserServiceZrangeArgs) writeField2(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("start", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:start: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.Start)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.start (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:start: ", p), err)
	}
	return err
}

func (p *LaserServiceZrangeArgs) writeField3(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("stop", thrift.I64, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:stop: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.Stop)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.stop (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:stop: ", p), err)
	}
	return err
}

func (p *LaserServiceZrangeArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LaserServiceZrangeArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type LaserServiceZrangeResult struct {
	Success *LaserResponse  `thrift:"success,0" db:"success" json:"success,omitempty"`
	E       *LaserException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewLaserServiceZrangeResult() *LaserServiceZrangeResult {
	return &LaserServiceZrangeResult{}
}

var LaserServiceZrangeResult_Success_DEFAULT *LaserResponse

func (p *LaserServiceZrangeResult) GetSuccess() *LaserResponse {
	if !p.IsSetSuccess() {
		return LaserServiceZrangeResult_Success_DEFAULT
	}
	return p.Success
}

var LaserServiceZrangeResult_E_DEFAULT *LaserException

func (p *LaserServiceZrangeResult) GetE() *LaserException {
	if !p.IsSetE() {
		return LaserServiceZrangeResult_E_DEFAULT
	}
	return p.E
}
func (p *LaserServiceZrangeResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *LaserServiceZrangeResult) IsSetE() bool {
	return p.E != nil
}

func (p *LaserServiceZrangeResult) Read(iprot thrift.Protocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *LaserServiceZrangeResult) ReadField0(iprot thrift.Protocol) error {
	p.Success = NewLaserResponse()
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *LaserServiceZrangeResult) ReadField1(iprot thrift.Protocol) error {
	p.E = NewLaserException()
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *LaserServiceZrangeResult) Write(oprot thrift.Protocol) error {
	if err := oprot.WriteStructBegin("zrange_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *LaserServiceZrangeResult) writeField0(oprot thrift.Protocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *LaserServiceZrangeResult) writeField1(oprot thrift.Protocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *LaserServiceZrangeResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LaserServiceZrangeResult(%+v)", *p)
}

// Attributes:
//  - Key
//  - Min
//  - Max
type LaserServiceZrangeByScoreArgs struct {
	Key *LaserKey `thrift:"key,1" db:"key" json:"key"`
	Min int64     `thrift:"min,2" db:"min" json:"min"`
	Max int64     `thrift:"max,3" db:"max" json:"max"`
}

func NewLaserServiceZrangeByScoreArgs() *LaserServiceZrangeByScoreArgs {
	return &LaserServiceZrangeByScoreArgs{}
}

var LaserServiceZrangeByScoreArgs_Key_DEFAULT *LaserKey

func (p *LaserServiceZrangeByScoreArgs) GetKey() *LaserKey {
	if !p.IsSetKey() {
		return LaserServiceZrangeByScoreArgs_Key_DEFAULT
	}
	return p.Key
}

func (p *LaserServiceZrangeByScoreArgs) GetMin() int64 {
	return p.Min
}

func (p *LaserServiceZrangeByScoreArgs) GetMax() int64 {
	return p.Max
}
func (p *LaserServiceZrangeByScoreArgs) IsSetKey() bool {
	return p.Key != nil
}

func (p *LaserServiceZrangeByScoreArgs) Read(iprot thrift.Protocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *LaserServiceZrangeByScoreArgs) ReadField1(iprot thrift.Protocol) error {
	p.Key = NewLaserKey()
	if err := p.Key.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Key), err)
	}
	return nil
}

func (p *LaserServiceZrangeByScoreArgs) ReadField2(iprot thrift.Protocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Min = v
	}
	return nil
}

func (p *LaserServiceZrangeByScoreArgs) ReadField3(iprot thrift.Protocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Max = v
	}
	return nil
}

func (p *LaserServiceZrangeByScoreArgs) Write(oprot thrift.Protocol) error {
	if err := oprot.WriteStructBegin("zrangeByScore_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *LaserServiceZrangeByScoreArgs) writeField1(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("key", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:key: ", p), err)
	}
	if err := p.Key.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Key), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:key: ", p), err)
	}
	return err
}

func (p *LaserServiceZrangeByScoreArgs) writeField2(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("min", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:min: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.Min)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.min (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:min: ", p), err)
	}
	return err
}

func (p *LaserServiceZrangeByScoreArgs) writeField3(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("max", thrift.I64, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:max: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.Max)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.max (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:max: ", p), err)
	}
	return err
}

func (p *LaserServiceZrangeByScoreArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LaserServiceZrangeByScoreArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type LaserServiceZrangeByScoreResult struct {
	Success *LaserResponse  `thrift:"success,0" db:"success" json:"success,omitempty"`
	E       *LaserException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewLaserServiceZrangeByScoreResult() *LaserServiceZrangeByScoreResult {
	return &LaserServiceZrangeByScoreResult{}
}

var LaserServiceZrangeByScoreResult_Success_DEFAULT *LaserResponse

func (p *LaserServiceZrangeByScoreResult) GetSuccess() *LaserResponse {
	if !p.IsSetSuccess() {
		return LaserServiceZrangeByScoreResult_Success_DEFAULT
	}
	return p.Success
}

var LaserServiceZrangeByScoreResult_E_DEFAULT *LaserException

func (p *LaserServiceZrangeByScoreResult) GetE() *LaserException {
	if !p.IsSetE() {
		return LaserServiceZrangeByScoreResult_E_DEFAULT
	}
	return p.E
}
func (p *LaserServiceZrangeByScoreResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *LaserServiceZrangeByScoreResult) IsSetE() bool {
	return p.E != nil
}

func (p *LaserServiceZrangeByScoreResult) Read(iprot thrift.Protocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *LaserServiceZrangeByScoreResult) ReadField0(iprot thrift.Protocol) error {
	p.Success = NewLaserResponse()
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *LaserServiceZrangeByScoreResult) ReadField1(iprot thrift.Protocol) error {
	p.E = NewLaserException()
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *LaserServiceZrangeByScoreResult) Write(oprot thrift.Protocol) error {
	if err := oprot.WriteStructBegin("zrangeByScore_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *LaserServiceZrangeByScoreResult) writeField0(oprot thrift.Protocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *LaserServiceZrangeByScoreResult) writeField1(oprot thrift.Protocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *LaserServiceZrangeByScoreResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LaserServiceZrangeByScoreResult(%+v)", *p)
}

// Attributes:
//  - Key
//  - Min
//  - Max
type LaserServiceZremRangeByScoreArgs struct {
	Key *LaserKey `thrift:"key,1" db:"key" json:"key"`
	Min int64     `thrift:"min,2" db:"min" json:"min"`
	Max int64     `thrift:"max,3" db:"max" json:"max"`
}

func NewLaserServiceZremRangeByScoreArgs() *LaserServiceZremRangeByScoreArgs {
	return &LaserServiceZremRangeByScoreArgs{}
}

var LaserServiceZremRangeByScoreArgs_Key_DEFAULT *LaserKey

func (p *LaserServiceZremRangeByScoreArgs) GetKey() *LaserKey {
	if !p.IsSetKey() {
		return LaserServiceZremRangeByScoreArgs_Key_DEFAULT
	}
	return p.Key
}

func (p *LaserServiceZremRangeByScoreArgs) GetMin() int64 {
	return p.Min
}

func (p *LaserServiceZremRangeByScoreArgs) GetMax() int64 {
	return p.Max
}
func (p *LaserServiceZremRangeByScoreArgs) IsSetKey() bool {
	return p.Key != nil
}

func (p *LaserServiceZremRangeByScoreArgs) Read(iprot thrift.Protocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *LaserServiceZremRangeByScoreArgs) ReadField1(iprot thrift.Protocol) error {
	p.Key = NewLaserKey()
	if err := p.Key.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Key), err)
	}
	return nil
}

func (p *LaserServiceZremRangeByScoreArgs) ReadField2(iprot thrift.Protocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Min = v
	}
	return nil
}

func (p *LaserServiceZremRangeByScoreArgs) ReadField3(iprot thrift.Protocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Max = v
	}
	return nil
}

func (p *LaserServiceZremRangeByScoreArgs) Write(oprot thrift.Protocol) error {
	if err := oprot.WriteStructBegin("zremRangeByScore_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *LaserServiceZremRangeByScoreArgs) writeField1(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("key", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:key: ", p), err)
	}
	if err := p.Key.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Key), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:key: ", p), err)
	}
	return err
}

func (p *LaserServiceZremRangeByScoreArgs) writeField2(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("min", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:min: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.Min)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.min (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:min: ", p), err)
	}
	return err
}

func (p *LaserServiceZremRangeByScoreArgs) writeField3(oprot thrift.Protocol) (err error) {
	if err := oprot.WriteFieldBegin("max", thrift.I64, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:max: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.Max)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.max (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:max: ", p), err)
	}
	return err
}

func (p *LaserServiceZremRangeByScoreArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LaserServiceZremRangeByScoreArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type LaserServiceZremRangeByScoreResult struct {
	Success *LaserResponse  `thrift:"success,0" db:"success" json:"success,omitempty"`
	E       *LaserException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewLaserServiceZremRangeByScoreResult() *LaserServiceZremRangeByScoreResult {
	return &LaserServiceZremRangeByScoreResult{}
}

var LaserServiceZremRangeByScoreResult_Success_DEFAULT *LaserResponse

func (p *LaserServiceZremRangeByScoreResult) GetSuccess() *LaserResponse {
	if !p.IsSetSuccess() {
		return LaserServiceZremRangeByScoreResult_Success_DEFAULT
	}
	return p.Success
}

var LaserServiceZremRangeByScoreResult_E_DEFAULT *LaserException

func (p *LaserServiceZremRangeByScoreResult) GetE() *LaserException {
	if !p.IsSetE() {
		return LaserServiceZremRangeByScoreResult_E_DEFAULT
	}
	return p.E
}
func (p *LaserServiceZremRangeByScoreResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *LaserServiceZremRangeByScoreResult) IsSetE() bool {
	return p.E != nil
}

func (p *LaserServiceZremRangeByScoreResult) Read(iprot thrift.Protocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *LaserServiceZremRangeByScoreResult) ReadField0(iprot thrift.Protocol) error {
	p.Success = NewLaserResponse()
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *LaserServiceZremRangeByScoreResult) ReadField1(iprot thrift.Protocol) error {
	p.E = NewLaserException()
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *LaserServiceZremRangeByScoreResult) Write(oprot thrift.Protocol) error {
	if err := oprot.WriteStructBegin("zremRangeByScore_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *LaserServiceZremRangeByScoreResult) writeField0(oprot thrift.Protocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *LaserServiceZremRangeByScoreResult) writeField1(oprot thrift.Protocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *LaserServiceZremRangeByScoreResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LaserServiceZremRangeByScoreResult(%+v)", *p)
}
