{"remainingRequest":"/Volumes/workspace/github/liubang/LaserDB/docs/node_modules/babel-loader/lib/index.js??ref--7-1!/Volumes/workspace/github/liubang/LaserDB/docs/node_modules/@docusaurus/theme-classic/lib/theme/Navbar/index.js","dependencies":[{"path":"/Volumes/workspace/github/liubang/LaserDB/docs/node_modules/@docusaurus/theme-classic/lib/theme/Navbar/index.js","mtime":1642676741559},{"path":"/Volumes/workspace/github/liubang/LaserDB/docs/babel.config.js","mtime":1642678208699},{"path":"/Volumes/workspace/github/liubang/LaserDB/docs/node_modules/cache-loader/dist/cjs.js","mtime":1642676720444},{"path":"/Volumes/workspace/github/liubang/LaserDB/docs/node_modules/babel-loader/lib/index.js","mtime":1642677262834}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}